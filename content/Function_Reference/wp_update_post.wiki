{{Languages|
{{en|Function_Reference/wp_update_post}}
{{ja|関数リファレンス/wp update post}}
{{tr|Fonksiyon Listesi/wp update post}}
{{ko|함수 레퍼런스/wp_update_post}}
}}
==Description==
This function updates posts (and pages) in the database. To work as expected, it is necessary to pass the ID of the post to be updated.

Note that when the post is "updated", the existing Post record is duplicated for audit/revision purposes.  The primary record is then updated with the new values. Category associations, custom fields, post meta, and other related entries continue to be linked to the primary Post record.

==Usage==
%%% <?php wp_update_post( $post, $wp_error ); ?> %%%

==Parameters==
{{Parameter|$post|array/object|An array or object representing the elements that make up a post. There is a one-to-one relationship between these elements and the names of columns in the <tt>[[Database_Description#Table:_wp_posts | wp_posts]]</tt> table in the database. You must include "ID", otherwise a WP_Error will be thrown.|optional|An empty array}}

{{Parameter|$wp_error|Boolean|A Boolean that can be passed to control what is returned on failure. The default setting (<tt>false</tt>) will return a <tt>0</tt> if the post fails to update. However, if this is set to <tt>true</tt>, it will return with a <tt>[[Class_Reference/WP_Error | WP_Error]]</tt> object.|optional|<tt>false</tt>}}

==Example==
Before calling <tt>wp_update_post()</tt> it is necessary to create an array to pass the necessary elements. Unlike <tt>[[Function Reference/wp insert post|wp_insert_post()]]</tt>, it is only necessary to pass the ID of the post to be updated and the elements to be updated. The names of the elements should match those in the database.

<pre>
// Update post 37
  $my_post = array(
      'ID'           => 37,
      'post_title'   => 'This is the post title.',
      'post_content' => 'This is the updated content.',
  );

// Update the post into the database
  wp_update_post( $my_post );
</pre>

<strong>Processing $wp_error</strong>

If your updates are not working, there could be an error. It is a good idea to set $wp_error to true and display the error immediately after.
<pre>
<?php
// Of course, this should be done in an development environment only and commented out or removed after deploying to your production site.

$post_id = wp_update_post( $current_item, true );						  
if (is_wp_error($post_id)) {
	$errors = $post_id->get_error_messages();
	foreach ($errors as $error) {
		echo $error;
	}
}
?>
</pre>


===Categories===
Categories need to be passed as an array of integers that match the category IDs in the database. This is the case even where only one category is assigned to the post.

===Caution - Infinite loop===
When executed by an action hooked into <tt>save_post</tt> (e.g. a custom metabox), <tt>wp_update_post()</tt> has the potential to create an infinite loop. This happens because (1) <tt>wp_update_post()</tt> results in <tt>save_post</tt> being fired and (2) <tt>save_post</tt> is called twice when revisions are enabled (first when creating the revision, then when updating the original post&mdash;resulting in the creation of endless revisions).

If you must update a post from code called by <tt>save_post</tt>, make sure to verify the <tt>post_type</tt> is not set to <tt>'revision'</tt> and that the <tt>$post</tt> object does indeed need to be updated.

Likewise, an action hooked into <tt>edit_attachment</tt> can cause an infinite loop if it contains a function call to <tt>wp_update_post</tt> passing an array parameter with a key value of <tt>"ID"</tt> and an associated value that corresponds to an Attachment.

Note you will need to remove then add the hook, code sample modified from the API/Action reference: <tt>[[Plugin_API/Action_Reference/save_post | save_post]]</tt>

<pre>
<?php
function my_function( $post_id ){
	if ( ! wp_is_post_revision( $post_id ) ){
	
		// unhook this function so it doesn't loop infinitely
		remove_action('save_post', 'my_function');
	
		// update the post, which calls save_post again
		wp_update_post( $my_args );

		// re-hook this function
		add_action('save_post', 'my_function');
	}
}
add_action('save_post', 'my_function');
?>
</pre>

===Scheduling posts===
If you are trying to use <tt>wp_update_post()</tt> to schedule an existing draft, it will not work unless you pass <tt>$my_post->edit_date = true</tt>. WordPress will ignore the <tt>post_date</tt> when updating drafts unless <tt>edit_date</tt> is true.

==Return==
{{Return||integer|The ID of the post if the post is successfully updated in the database. Otherwise returns <tt>0</tt>}}.

==Change Log==
* Since: [[Version 1.0|1.0.0]]

== Source File ==
<tt>wp_update_post()</tt> is located in {{Trac|wp-includes/post.php}}.

==Related==
[[Function Reference/wp insert post|wp_insert_post()]]

{{Tag Footer}}
{{Copyedit}}

[[Category:Functions]]
[[Category:New page created]]