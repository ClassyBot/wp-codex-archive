{{#dotorgredirect:https://developer.wordpress.org/reference/functions/load_child_theme_textdomain/}}

{{Languages|
{{en|Function Reference/load_child_theme_textdomain}}
{{ja|関数リファレンス/load_child_theme_textdomain}}
}}

== Description ==
Loads the child theme's translated strings. 

If the current locale exists as a .mo file in the child theme's root directory, it will be included in the translated strings by the <tt>$domain</tt>. 

The .mo files must be <strong>named based on the locale exactly</strong>, <code>de_DE.mo</code> for example.

This function is the proper way to load translations for a child theme. For the parent theme/single themes <tt>load_theme_textdomain()</tt> is used instead. Loading child theme translations extra is better to optimize the loading process and helps organize code and files better.

Example: If you are using "Twenty Eleven" as your parent theme it already comes with the function <tt>load_theme_textdomain()</tt> in place and there are already translations for this theme available in numerous languages. Now you have created a child theme for it with lots of custom elements like new sidebars or other sections. All strings of these new sections in frontend and also backend should be controlled by the child theme's translations files. If the parent theme gets updated (and most likely its language strings too...) your child theme translations keep untouched. So that's the proper way of doing it and WordPress is prepared for that out of the box.

== Usage ==
%%%<?php load_child_theme_textdomain( $domain, $path ) ?>%%%

== Parameters ==
{{Parameter|$domain|string|Unique identifier for retrieving translated strings.}}
{{Parameter|$path|unknown|The directory where the .mo file can be found (without the trailing slash).|optional|false}}

== Return Values ==
; (bool) : This function return TRUE as textdomain well loaded, FALSE on failure.

== Example ==
The load_child_theme_textdomain() function should generally be called from within the [[Plugin_API/Action_Reference/after_setup_theme|after_setup_theme]] action hook, just the same as with its related load_theme_textdomain() function.
<pre>
add_action( 'after_setup_theme', 'my_child_theme_setup' );
function my_child_theme_setup() {
    load_child_theme_textdomain( 'my_child_theme', get_stylesheet_directory() . '/languages' );
}
</pre>

my_child_theme = The name of the Main theme

The <code>.mo</code> files must use language-only filenames, like <code>languages/de_DE.mo</code> in your child theme directory.

Unlike plugin language files, a name like <code>my_child_theme-de_DE.mo</code> will <b>NOT work</b>. Although plugin language files allow you to specify the text-domain in the filename, this will NOT work with themes and child themes. Language files for themes should include the language shortcut ONLY.

== Notes ==
Internationalization and localization (other correct spellings are internationalisation and localisation) are means of adapting computer software to different languages.
* <i>l10n</i> is an abbreviation for <i>localization</i>.
* <i>i18n</i> 18 stands for the number of letters between the first i and last n in <i>internationalization</i>.

== Change Log ==
Since: 2.9.0

== Source File ==
<!-- Need links to current source code files -->
<tt>load_child_theme_textdomain()</tt> is located in [http://core.trac.wordpress.org/browser/tags/3.3.2/wp-includes/l10n.php].

== Related ==
{{Localization}}

{{Tag Footer}}

[[Category:Functions]]
[[Category:New_page_created]]