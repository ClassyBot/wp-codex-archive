{{#dotorgredirect: https://developer.wordpress.org/reference/functions/add_action/}}

{{Languages|
{{en|Function_Reference/add_action}}
{{ja|関数リファレンス/add_action}}
{{zh-hans|函数参考/add_action}}
{{ko|한국어/add_action}}

}}
== Description ==

Hooks a function on to a specific [http://codex.wordpress.org/Glossary#Action action]. 

More specifically, this function will run the function <tt>$function_to_add</tt> when the event <tt>$hook</tt> occurs.

This function is an alias to [[Function_Reference/add_filter|add_filter()]].

See [[Plugin_API/Action_Reference|Plugin API/Action Reference]] for a list of action hooks. Actions are (usually) triggered when the WordPress core calls [[Function_Reference/do_action|do_action()]].

== Usage ==
%%%<?php add_action( $hook, $function_to_add, $priority, $accepted_args ); ?>%%%

==Parameters==

{{Parameter|$hook|string|The name of the action to which $function_to_add is hooked. (See [[Plugin_API/Action_Reference|Plugin API/Action Reference]] for a list of action hooks). Can also be the name of an action inside a theme or plugin file, or the special tag "all", in which case the function will be called for all hooks.}}

{{Parameter|$function_to_add|callback|The name of the function you wish to be hooked.}}

{{Parameter|$priority|int|Used to specify the order in which the functions associated with a particular action are executed. Lower numbers correspond with earlier execution, and functions with the same priority are executed in the order in which they were added to the action.|optional|10}}

{{Parameter|$accepted_args|int|The number of arguments the hooked function accepts. In WordPress 1.5.1+, hooked functions can take extra arguments that are set when the matching [[Function_Reference/do_action|do_action()]] or [[Function_Reference/apply_filters|apply_filters()]] call is run. For example, the action <tt>comment_id_not_found</tt> will pass any functions that hook onto it the ID of the requested comment.|optional|1}}

== Return Values ==
; <tt>(boolean)</tt> : Always True.

== Examples ==

=== Simple Hook ===
To email some friends whenever an entry is posted on your blog:

<pre>
function email_friends( $post_ID ) {
   $friends = 'bob@example.org, susie@example.org';
   wp_mail( $friends, "sally's blog updated", 'I just put something on my blog: http://blog.example.com' );

   return $post_ID;
}
add_action( 'publish_post', 'email_friends' );
</pre>

=== Accepted Arguments ===
A hooked function can optionally accept arguments from the action call, if any are set to be passed. In this simplistic example, the <tt>echo_comment_id</tt> function takes the <tt>$comment_id</tt> argument, which is automatically passed to when the [[Function_Reference/do_action|do_action()]] call using the <tt>comment_id_not_found</tt> filter hook is run.

<pre>
function echo_comment_id( $comment_id ) {
   echo 'Comment ID ' . $comment_id . ' could not be found';
}
add_action( 'comment_id_not_found', 'echo_comment_id', 10, 1 );
</pre>

=== Using with a Class ===
To use <tt>add_action()</tt> when your plugin or theme is built using classes, you need to use [http://www.php.net/manual/en/language.types.callable.php#language.types.callable.passing the array callable syntax]. You would pass the function to <tt>add_action()</tt> as an array, with your object as the first element, then the name of the class method, like so:

<pre>
class My_Plugin_Class {
    
    public function save_posts_hook() {
         // do stuff here...
    }
}

$my_class = new My_Plugin_Class; 
add_action( 'save_post', array( $my_class, 'save_posts_hook' ) );
</pre>

If the class method can be called statically, the approach is much like the way you would a function: you can just pass a string with the full method:

<pre>
class My_Plugin_Class {
    
    public static function save_posts_hook() {
         // do stuff here...
    }
}

add_action( 'save_post', 'My_Plugin_Class::save_posts_hook' );
</pre>

== Notes ==

To find out the number and name of arguments for an action, simply search the code base for the matching do_action() call.  For example, if you are hooking into 'save_post', you would find it in post.php:
%%% <?php do_action( 'save_post', $post_ID, $post, $update ); ?> %%%

Your add_action call would look like:
%%% <?php add_action( 'save_post', 'my_save_post', 10, 3 ); ?> %%%

And your function would be:
<pre>
function my_save_post( $post_ID, $post, $update ) {
   // do stuff here
}
</pre>

== Change Log ==

Since [[Version 1.2|1.2.0]]

== Source File ==

<tt>add_action()</tt> is located in {{Trac|wp-includes/plugin.php}}.

== Related ==

{{Action Tags}}

{{Tag Footer}}

[[Category:Functions]]

{{Copyedit}}