== Description ==
This function can be replaced via [[Glossary#plugins|plugins]]. If plugins do not redefine these functions, then this will be used instead.

Creates a hash of a plain text password. Unless the global <var>$wp_hasher</var> is set, the default implementation uses <code>PasswordHash</code>, which adds salt to the password and hashes it with 8 passes of MD5. MD5 is used by default because it's supported on all platforms. You can configure <code>PasswordHash</code> to use Blowfish or extended DES (if available) instead of MD5 with the <var>$portable_hashes</var> constructor argument or property (see examples).

For integration with other applications, this function can be overwritten to instead use the other package password checking algorithm.

== Usage ==
%%%<?php $hash = wp_hash_password( $password ) ?>%%%

== Parameters ==
{{Parameter|$password|string|Plain text user password to hash.}}

== Return Values ==
; (string) : The hash string of the password.

== Examples ==

Compare an already hashed password with its plain-text string:<code><pre>
<?php
$wp_hasher = new PasswordHash(8, TRUE);

$password_hashed = '$P$B55D6LjfHDkINU5wF.v2BuuzO0/XPk/';
$plain_password = 'test';

if($wp_hasher->CheckPassword($plain_password, $password_hashed)) {
    echo "YES, Matched";
} else {
    echo "No, Wrong Password";
}
?>
</pre></code>
Use Blowfish or extended DES (if available) instead of MD5 to hash the password with 16 rounds of hashing:<code><pre>
$wp_hasher = new PasswordHash(16, FALSE);
$hashedPassword = wp_hash_password($password);
</pre></code>

== Notes ==
* This function can be replaced via [[Glossary#plugins|plugins]]. If plugins do not redefine these functions, then this will be used instead.
* Uses: <tt>PasswordHash::HashPassword()</tt>
* Uses global: (<tt>unknown type</tt>) <tt>$wp_hasher</tt>

== Change Log ==
* Since: 2.5

== Source File ==
<tt>wp_hash_password()</tt> is located in {{Trac|wp-includes/pluggable.php}}.

== Related ==

{{Password Tags}}

{{Tag Footer}}

[[Category:Functions]]