{{#dotorgredirect:https://developer.wordpress.org/reference/functions/add_contextual_help/}}

{{Deprecated}}

Use [[Class_Reference/WP_Screen/add_help_tab|WP_Screen::add_help_tab()]] instead.

= Description =

This function is used to add HTML to the Contextual Help tab for a specific admin page.

== Usage ==

%%% <?php add_contextual_help( $screen, $help ); ?> %%%

== Parameters ==

{{Parameter|$screen|string| The handle for the screen to add help to. This is usually the hook name returned by the add_*_page() functions.}}
{{Parameter|$help|string|An arbitrary string containing HTML for help text.}}

== Example ==

=== Default Usage ===

This example shows how you would add contextual help to an admin page you've created with the <tt>add_theme_page()</tt> function. Here, we will assume that your page has a slug of 'my_theme_options' and exists under the Appearance tab, which has a slug of 'appearance_page'. To keep things organized, we can use the 'admin_init' hook to declare a function with our custom contextual help.

<pre>
<?php 
function add_my_contextual_help() {
    $text = __("<p>This is a help text for 'my_theme_options' page (a subpage of 'appearance_page').</p>");
    add_contextual_help( 'appearance_page_my_theme_options', $text ); 
}
add_action( 'admin_init', 'add_my_contextual_help' );
?>
</pre>

=== Finding the Screen Name ===

If you need to find the current screen name (for the $screen parameter) then you can use this function. Just put it in your functions.php file and then browse to the page you wish to find the screen name. It will then be printed across the top of your admin screen. This is very useful for people who create custom administration menus (typically advanced premium themes) and aren't quite sure what the screen name would be.

<pre>
<?php
function check_current_screen() {
    if( !is_admin() ) return;
    global $current_screen;
    print_r( $current_screen );
}
add_action( 'admin_notices', 'check_current_screen' );
?>
</pre>

== Notes ==

When using this function to add contextual help to an admin page created by a plugin or theme, it is important to remember that the add_*_page() set of functions build and return custom hook names - which are needed in order to use add_contextual_help().

This page hook name is <em>usually</em> made up of two page slugs separated by an underscore - the slug for the current page (as defined in your add_*_page() function), an underscore, and the slug for the parent page.

For example, if you created a new "theme_options" subpage under the Admin > Appearance menu (which itself has a slug of "appearance_page"), your page hook would be "appearance_page_theme_options".

To modify or add to the hard-coded help text for default WordPress admin pages, you have to use the [[Plugin_API/Filter_Reference/gettext|<tt>gettext</tt>]] filter hook.

== Change Log ==

* Since: [[Version 2.7|2.7.0]]
* Deprecated: [[Version 3.3|3.3.0]]
* Replace by: [[Function_Reference/add_help_tab|add_help_tab()]]

== Source File ==

<tt>add_contextual_help()</tt> is located in {{Trac|wp-admin/includes/template.php}}.

== Related ==

=== Topics ===
* [[Adding_Contextual_Help_to_Administration_Menus|Adding Contextual Help to Admin Menus]]
* [[Plugin_API/Admin_Screen_Reference|Admin Screen ID Reference]]

=== Functions ===
* [[Function Reference/add_options_page|add_options_page]]
* [[Function Reference/add_menu_page|add_menu_page]]
* [[Function Reference/add_submenu_page|add_submenu_page]]
* [[Function Reference/add_theme_page|add_theme_page]]

== Resources ==
* [http://justintadlock.com/archives/2011/06/02/adding-contextual-help-to-plugin-and-theme-admin-pages Adding Contextual Menus for Themes and Plugins] - Justin Tadlock tutorial
* [http://www.studiograsshopper.ch/code-snippets/wordpress-current_screen-variable-admin-screens/ How to Easily Find the Current Screen Name] - very useful in finding the $screen variable for this function

[[Category:Functions]]