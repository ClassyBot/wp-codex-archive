{{Languages|
{{en|Function_Reference/update_option}}
{{ru|Справочник_по_функциям/update_option}}
}}
== Description ==

Use the function <tt>update_option()</tt> to update a named option/value pair to the options database table.

This function may be used in place of [[Function Reference/add option|<tt>add_option</tt>]], although it is not as flexible.  <tt>update_option</tt> will check to see if the option already exists.  If it does not, it will be added with <tt>add_option('option_name', 'option_value')</tt>.  Unless you need to specify the optional arguments of <tt>add_option()</tt>, <tt>update_option()</tt> is a useful catch-all for both adding and updating options.

== Usage ==

%%%<?php update_option( $option, $new_value, $autoload ); ?>%%%

== Parameters ==

{{Parameter|$option|string|Name of the option to update. Must not exceed 64 characters. A list of valid default options to update can be found at the [[Option Reference]].}}
{{Parameter|$newvalue|mixed|The NEW value for this option name. This value can be an integer, string, array, or object.}}
{{Parameter|$autoload|mixed| Whether to load the option when WordPress starts up. For existing options `$autoload` can only be updated using `update_option()` if `$value` is also changed. Accepts 'yes' or true to enable, 'no' or false to disable. For non-existent options, the default value is 'yes'.|optional|null}}

== Return Value ==

{{Return||boolean|True if option value has changed, false if not or if update failed.}}

== Example ==

=== Updating Core Options ===

Set the default comment status to 'closed':

 update_option( 'default_comment_status', 'closed' );

This option is usually set by from the Settings > Discussion administration panel. See the [[Option Reference]] for a full list of options used by WordPress Core.

=== Updating Custom Options ===

You can also create your own custom options. To update the option <tt>'myhack_extraction_length'</tt> with the value 255, we would do this:

 update_option( 'myhack_extraction_length', 255 );

This will automatically add the option if it does not exist. However, if we don't want this option to be autoloaded, we have to add it with <tt>add_option()</tt>. In this example, we update the option if it already exists, and if it does not exist we use <tt>add_option()</tt> and set <tt>$autoload</tt> to "no".

<pre>
<?php

$option_name = 'myhack_extraction_length' ;
$new_value = '255' ;

if ( get_option( $option_name ) !== false ) {

    // The option already exists, so we just update it.
    update_option( $option_name, $new_value );

} else {

    // The option hasn't been added yet. We'll add it with $autoload set to 'no'.
    $deprecated = null;
    $autoload = 'no';
    add_option( $option_name, $new_value, $deprecated, $autoload );
}

?>
</pre>
=== Notes ===
Upon getting an option in code, this option value will be cached.  If you modify any options outside of the [https://codex.wordpress.org/Options_API Options API], then try to update an option that's already cached, this will fail updating and return false. You can use the following method to clear the options cache before trying to get or update the options on the same request:
<pre>
<?php
wp_cache_delete ( 'alloptions', 'options' );
?>
</pre>

== Change Log ==
* [[Version 4.2|4.2.0]]: $autoload parameter added
* Since: [[Version 1.0|1.0.0]]

== Source File ==

<tt>update_option()</tt> is located in {{Trac|wp-includes/option.php}}.

== Related ==

{{Option Tags}}

{{Tag Footer}}

[[Category:Functions]]