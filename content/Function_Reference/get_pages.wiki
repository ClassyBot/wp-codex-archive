{{Languages|
{{en|Function Reference/get pages}}
{{ja| 関数リファレンス/get pages}}
}}
==Description==

This function returns an array of pages that are in the blog, optionally constrained by parameters.  This array is not tree-like (hierarchical).  See the [[Template_Tags/wp_list_pages|wp_list_pages()]] [[Template_Tags|template tag]] for the output of page titles in a tree-like fashion.

This function can also retrieve other post types using the 'post_type' parameter, but the type must be hierarchical like pages, or the function will return false.

Note that, although similar to [[Function_Reference/get_posts|get_posts()]], several of the parameter names and values differ.  (It is implemented quite differently, see get_posts().)

==Usage==

%%% <?php get_pages( $args ); ?> %%%

===Default Usage===

<pre>
<?php $args = array(
	'sort_order' => 'asc',
	'sort_column' => 'post_title',
	'hierarchical' => 1,
	'exclude' => '',
	'include' => '',
	'meta_key' => '',
	'meta_value' => '',
	'authors' => '',
	'child_of' => 0,
	'parent' => -1,
	'exclude_tree' => '',
	'number' => '',
	'offset' => 0,
	'post_type' => 'page',
	'post_status' => 'publish'
); 
$pages = get_pages($args); 
?>
</pre>

==Parameters==

; sort_column : (''string'') Sorts the list of Pages in a number of different ways. The default setting is ''sort alphabetically by Page title''.
:* <tt>'post_title'</tt> - Sort Pages alphabetically (by title) - default
:* <tt>'menu_order'</tt> - Sort Pages by Page Order. ''N.B.'' Note the difference between ''Page Order'' and ''Page ID''. The Page ID is a unique number assigned by WordPress to every post or page. The Page Order can be set by the user in the [[Write_Page_SubPanel|Write>Pages]] administrative panel.
:* <tt>'post_date'</tt> - Sort by creation time.
:* <tt>'post_modified'</tt> - Sort by time last modified.
:* <tt>'ID'</tt> - Sort by numeric Page ID.
:* <tt>'post_author'</tt> - Sort by the Page author's numeric ID.
:* <tt>'post_name'</tt> - Sort alphabetically by Post [[Glossary#Slug|slug]]. Not supported yet, as of WP 3.3 (See: http://core.trac.wordpress.org/ticket/14368 )
:'''Note:''' The '''sort_column''' parameter can be used to sort the list of Pages by the descriptor of any field in the [[Database Description#Table:_wp_posts|wp_post table]] of the WordPress database. Some useful examples are listed here.
:'''Note:''' get_posts() uses the parameter <tt>'orderby'</tt> instead of <tt>'sort_column'</tt>.  Also, get_posts() automatically prepends <tt>'post_'</tt> to these values: <tt>'author, date, modified, parent, title, excerpt, content'</tt>.

; sort_order : (''string'') Change the sort order of the list of Pages (either ascending or descending). The default is ''ascending''. Valid values:
:* <tt>'asc'</tt> - Sort from lowest to highest (Default).
:* <tt>'desc'</tt> - Sort from highest to lowest.
:'''Note:''' get_posts() uses the parameter <tt>'order'</tt> instead of <tt>'sort_order'</tt>.

; exclude : (''string or array'') Define a comma-separated list of Page IDs to be excluded from the list (example: <tt>'exclude=3,7,31'</tt>).  Beginning with [[Version 3.0]], an array of Page ID also can be used. There is no default value.

; include : (''string or array'') Only include certain Pages in the list generated by ''get_pages''. Like '''exclude''', this parameter takes a comma-separated list of Page IDs. Beginning with [[Version 3.0]], an array of Page ID also can be used. There is no default value.
:'''Note:''' If this parameter is provided, child_of, parent, exclude, meta_key, and meta_value params are ignored, and hierarchical is set to false.

; child_of : (''integer'') Lists the sub-pages of a single Page only; uses the ID for a Page as the value. Defaults to ''0'' (list all Pages). Note that the child_of parameter will also fetch "grandchildren" of the given ID, not just direct descendants.
:* <tt>0</tt> - default, no child_of restriction
:'''Note:''' The <tt>child_of</tt> parameter is not applied to the SQL query for pages. It is applied to the results of the query. If a number parameter is also provided, the final results may be less than the number specified.

; parent : (''integer'') List those pages that have the provided single page only ID as parent. Defaults to -1 (displays all Pages regardless of parent). Note that the 'hierarchical' parameter must be set to 0 (false) -- which is not default -- or else no results will be returned for any page other than the top level pages with no parent (ID=0) and the default all pages (ID=-1). In contrast to the 'child_of' parameter, this parameter only returns the direct descendants of the parent, no 'grandchildren'. You can obviate the 'hierarchical' set to 0 requirement by passing a 'child_of' parameter set to the same (parent) ID value.
:* <tt>-1</tt> - default, no parent restriction
:* <tt>0</tt> - returns all top level pages

; exclude_tree : (''integer'') The opposite of 'child_of', 'exclude_tree' will remove all children of a given ID from the results. Useful for hiding all children of a given page. Can also be used to hide grandchildren in conjunction with a 'child_of' value. This parameter was available at [[Version 2.7]].

; hierarchical : (''boolean'') Lists sub-Pages below their parent or lists the Pages inline.  The default is ''true'' (list sub-Pages below the parent list item). NOTE: This default value will prevent meta_key & parent page searches from finding sub-pages. You need to set 'hierarchical' => 0 for these parameters to work properly. Valid values:
:* <tt>1 (true)</tt> - default
:* <tt>0 (false)</tt>

; meta_key : (''string'') Only include the Pages that have this Custom Field Key (use in conjunction with the meta_value field).
; meta_value : (''string'') Only include the Pages that have this Custom Field Value (use in conjunction with the meta_key field).

; authors : (''string'') Only include the Pages written by the given author(s)
:'''Note:''' get_posts() uses the parameter <tt>'author'</tt> instead of <tt>'authors'</tt>.

; number : (''integer'') Sets the number of Pages to list. This causes the SQL LIMIT value to be defined. Default to no LIMIT.  This parameter was added with [[Version 2.8]].
:'''Note:''' get_posts() uses the parameter <tt>'numberposts'</tt> instead of <tt>'number'</tt>.
:'''Second Note:''' it doesn't work if used together with <tt>'child_of'</tt>. Instead use <tt>'parent'</tt> and set <tt>'hierarchical'</tt> to false.

; offset : (''integer'') The number of Pages to pass over (or displace) before collecting the set of Pages.  Default is no OFFSET.  This parameter was added with [[Version 2.8]].

; post_type : ("string") Show posts associated with certain [[Post Types|type]]. Valid values include:
:* '<tt>post</tt>' - a post. 
:* '<tt>page</tt>' - a page.
:* '<tt>revision</tt>' - a revision.
:* '<tt>attachment</tt>' - an attachment.
:* Custom Post Types
:'''Note:''' Only hierarchical post types are valid.

; post_status : (''string'') A comma-separated list of post status types that should be included. For example, <tt>'publish,private,draft'</tt>.

==Return==

; (Array) : An array containing all the [[Pages]] matching the request, or <tt>false</tt> on failure. The returned array is an array of "page" objects. Each page object is a map containing 24 keys:

<ul>
<li><code>ID</code>: page/post ID (<i>int</i>)</li>
<li><code>post_author</code>: author ID (<i>string</i>)</li>
<li><code>post_date</code>: time-date string (<tt>YYYY-MM-DD HH:MM:SS</tt>), e.g., "2012-10-15 01:02:59"</li>
<li><code>post_date_gmt</code>: time-date string</li>
<li><code>post_content</code>: HTML (<i>string</i>)</li>
<li><code>post_title</code></li>
<li><code>post_excerpt</code>: HTML (<i>string</i>)</li>
<li><code>post_status</code>: (<tt>publish|inherit|pending|private|future|draft|trash</tt>)</li>
<li><code>comment_status</code>: closed/open</li>
<li><code>ping_status</code>: (<tt>closed|open</tt>)</li>
<li><code>post_password</code></li>
<li><code>post_name</code>: slug for page/post</li>
<li><code>to_ping</code></li>
<li><code>pinged</code></li>
<li><code>post_modified</code>: time-date string</li>
<li><code>post_modified_gmt</code>: time-date string</li>
<li><code>post_content_filtered</code></li>
<li><code>post_parent</code>: parent ID (<i>int</i>)</li>
<li><code>guid</code>: URL</li>
<li><code>menu_order</code>: (<i>int</i>)</li>
<li><code>post_type</code>: (<tt>page|post|attachment</tt>)</li>
<li><code>post_mime_type</code></li>
<li><code>comment_count</code>: number of comments (<i>string</i>)</li>
<li><code>filter</code>
</ul>

All values are strings unless otherwise shown as (<i>int</i>).

==Example==

=== Displaying pages in dropdown list ===

In this example a dropdown list with all the pages. Note how you can grab the link for the page with a simple call to the function get_page_link passing the ID of the page.
<pre>
<select name="page-dropdown"
 onchange='document.location.href=this.options[this.selectedIndex].value;'> 
 <option value="">
<?php echo esc_attr( __( 'Select page' ) ); ?></option> 
 <?php 
  $pages = get_pages(); 
  foreach ( $pages as $page ) {
  	$option = '<option value="' . get_page_link( $page->ID ) . '">';
	$option .= $page->post_title;
	$option .= '</option>';
	echo $option;
  }
 ?>
</select>
</pre>

=== Displaying Child pages of the current page in post format ===

<pre>
<?php
	$mypages = get_pages( array( 'child_of' => $post->ID, 'sort_column' => 'post_date', 'sort_order' => 'desc' ) );

	foreach( $mypages as $page ) {		
		$content = $page->post_content;
		if ( ! $content ) // Check for empty page
			continue;

		$content = apply_filters( 'the_content', $content );
	?>
		<h2><a href="<?php echo get_page_link( $page->ID ); ?>"><?php echo $page->post_title; ?></a></h2>
		<div class="entry"><?php echo $content; ?></div>
	<?php
	}	
?>
</pre>

==Changelog==

* Since: 1.5.0

== Source File ==

<tt>get_pages()</tt> is located in {{Trac|wp-includes/post.php}}.

== Related ==
{{Page Tags}}

{{Tag Footer}}

{{Copyedit}}

[[Category:Functions]]