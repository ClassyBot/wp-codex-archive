{{Languages|
{{en|Function Reference/get_post_type_capabilities}}
{{it|Riferimento_funzioni/get_post_type_capabilities}}
{{ja|関数リファレンス/get_post_type_capabilities}}
}}

== Description ==

Builds an object with all post type capabilities out of a post type object. Post type capabilities use the <tt>'capability_type'</tt> argument as a base, if the capability is not set in the <tt>'capabilities'</tt> argument array or if the <tt>'capabilities'</tt> argument is not supplied. The <tt>capability_type</tt> argument can optionally be registered as an array, with the first value being singular and the second plural, e.g. <tt>array('story, 'stories')</tt> Otherwise, an 's' will be added to the value for the plural form. After registration, <tt>capability_type</tt> will always be a string of the singular value.

== Usage ==
%%%<?php get_post_type_capabilities( $args ) ?>%%%

==Parameters==
{{Parameter|$args|array or string| The desired capability type (e.g. 'post').  Set ['capability_type'] to an array to allow for alternative plurals when using this argument as a base to construct the capabilities, e.g. array('story', 'stories').  Set ['map_meta_cap'] to <tt>true</tt> to obtain those capabilities as well.
}}

By default, seven keys are accepted as part of the capabilities array:
* '''<tt>edit_post</tt>''', '''<tt>read_post</tt>''', and '''<tt>delete_post</tt>''' are meta capabilities, which are then generally mapped to corresponding primitive capabilities depending on the context, which would be the post being edited/read/deleted and the user or role being checked. Thus these capabilities would generally not be granted directly to users or roles.
* '''<tt>edit_posts</tt>''' - Controls whether objects of this post type can be edited.
* '''<tt>edit_others_posts</tt>''' - Controls whether objects of this type owned by other users can be edited. If the post type does not support an author, then this will behave like <tt>edit_posts</tt>.
* '''<tt>publish_posts</tt>''' - Controls publishing objects of this post type.
* '''<tt>read_private_posts</tt>''' - Controls whether private objects can be read.

These four primitive capabilities are checked in core in various locations.

There are also seven other primitive capabilities which are not referenced directly in core, except in <tt>[[Function_Reference/map_meta_cap | map_meta_cap()]]</tt>, which takes the three aforementioned meta capabilities and translates them into one or more primitive capabilities that must then be checked against the user or role, depending on the context.
* '''<tt>read</tt>''' - Controls whether objects of this post type can be read.
* '''<tt>delete_posts</tt>''' - Controls whether objects of this post type can be deleted.
* '''<tt>delete_private_posts</tt>''' - Controls whether private objects can be deleted.
* '''<tt>delete_published_posts</tt>''' - Controls whether published objects can be deleted.
* '''<tt>delete_others_posts</tt>''' - Controls whether objects owned by other users can be   can be deleted. If the post type does not support an author, then this will behave like delete_posts.
* '''<tt>edit_private_posts</tt>''' - Controls whether private objects can be edited.
* '''<tt>edit_published_posts</tt>''' - Controls whether published objects can be edited.

These additional capabilities are only used in <tt>map_meta_cap()</tt>. Thus, they are only assigned by default if the post type is registered with the <tt>'map_meta_cap'</tt> argument set to <tt>true</tt> (default is <tt>false</tt>).

== Return ==

; <tt>(object)</tt> : Object with all capabilities as member variables

==Change Log==

* Since: [[Version 3.0|3.0]]

==Source File==

<tt>get_post_type_capabilities()</tt> is located in {{Trac|wp-includes/post.php}}.

== Related ==

{{Post Type Tags}}

{{Tag Footer}}

{{Stub}}

[[Category:Functions]]