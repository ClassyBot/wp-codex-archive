{{#dotorgredirect:https://developer.wordpress.org/reference/functions/esc_js/}}

== Description ==

Escape single quotes, htmlspecialchar " < > &, and fix line endings.
Escapes text strings for echoing in JS. It is intended to be used for inline JS (in a tag attribute, for example onclick="…"). Note that the strings have to be in single quotes. The filter ‘js_escape’ is also applied here. If you're not working with inline JS in HTML event handler attributes, a more suitable function to use is [https://developer.wordpress.org/reference/functions/wp_json_encode/ wp_json_encode], which is built-in to WordPress.

== Usage ==
%%%<?php esc_js( $text ) ?>%%%
== Parameters ==

{{Parameter|$text|string|Text to escape}}

== Return Values ==

{{Return||string|Escaped js string.}}

== Examples ==
<!-- Need creative examples. Feel free to link to external examples. -->
Example of an input tag within a form displayed on the front-end of the site, generated from a widget. The first php segment is using esc_attr as it is an html attribute of input, while the next php segments is using esc_js within inline Javascript.

<pre>
<input type="text" value="<?php echo esc_attr( $instance['input_text'] ); ?>" id="subbox" onfocus="if ( this.value == '<?php echo esc_js( $instance['input_text'] ); ?>') { this.value = ''; }" onblur="if ( this.value == '' ) { this.value = '<?php echo esc_js( $instance['input_text'] ); ?>'; }" name="email" /></pre>

As mentioned above, json_encode is suitable if you're not dealing with escaping strings inside of HTML event handler attributes (json_encode includes the string-delimiting quotes for you):

<pre>var title = <?php echo json_encode( $instance['title'] ) ?>;</pre>

== Change Log ==

Since: [[Version 2.8|2.8.0]]

== Source File ==

<tt>esc_js()</tt> is located in {{Trac|wp-includes/formatting.php}}

== Related ==

{{Esc Tags}}

{{Tag Footer}}

[[Category:Functions]]