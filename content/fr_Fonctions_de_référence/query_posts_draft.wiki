{{Languages|
{{en|Function Reference/query posts}}
{{it|Riferimento funzioni/query posts}}
{{fr|Fonctions_de_référence/query posts}}
{{ja|テンプレートタグ/query_posts}}
{{zh-hans|函数参考/query posts}}
{{pt-br|Referência de Função/query posts}}
}}
__TOC__
==Description==

<tt>query_posts()</tt> est le plus simple, mais non préféré ou plus efficace, moyen d'altérer la requête de base que WordPress utilise pour afficher les articles. Cela fonctionne en mettant la requête de base d'un coté, et en la remplaçant par une nouvelle requête. Pour nettoyer après un appel à <tt>query_posts</tt>, faites un appel à <tt>wp_reset_query</tt>, et la requête originale sera restaurée.

Il est ''''fortement'''' recommandé d'utiliser l'action [[Plugin_API/Action_Reference/pre_get_posts|pre_get_posts]] à la place,et d'altérer la requête de base en vérifiant [[Function_Reference/is_main_query|is_main_query]]

Par exemple, sur une page d'accueil, vous devriez normalement voir les 10 derniers articles. Si vous ne voulez en afficher que 5 (et ne pas se soucier de pagination), vous pouvez utiliser query_posts() comme ceci :
<pre>
query_posts( 'posts_per_page=5' );
</pre>

Voici le code similaire utilisant [[Plugin_API/Action_Reference/pre_get_posts|pre_get_posts]] dans functions.php :

<pre>
function five_posts_on_homepage( $query ) {
    if ( $query->is_home() && $query->is_main_query() ) {
        $query->set( 'posts_per_page', '5' );
    }
}
add_action( 'pre_get_posts', 'five_posts_on_homepage' );
</pre>
'''Note''': l'action pre_get_posts action ne fonctionne pas pour les requêtes de [[Pages|Page]].

==Caveats==
<tt>query_posts()</tt> is only one way amongst many to query the database and generate a list of posts. Before deciding to use <tt>query_posts()</tt>, be sure to understand the drawbacks.

===Alters Main Loop===
<tt>query_posts()</tt> is meant for altering the main loop. It does so by replacing the query used to generate the main loop content. Once you use <tt>query_posts()</tt>, your post-related global variables and template tags will be altered. Conditional tags that are called after you call <tt>query_posts()</tt> will also be altered - this may or may not be the intended result.

===Secondary Loops===
To create secondary listings (for example, a list of related posts at the bottom of the page, or a list of links in a sidebar widget), try making a new instance of [[Class Reference/WP_Query|WP_Query]] or use [[Function_Reference/get_posts|get_posts()]].

If you must use <tt>query_posts()</tt>, make sure you call <tt>wp_reset_query()</tt> after you're done.

===Pagination===
Pagination won't work correctly, unless you set the 'paged' query var appropriately: [[Pagination#Adding_the_.22paged.22_parameter_to_a_query|adding the paged parameter]]

===Additional SQL Queries===
If you use <tt>query_posts</tt> within a template page, WordPress will have already executed the database query and retrieved the records by the time it gets to your template page (that's how it knew which template page to serve up!). So when you over-ride the default query with <tt>query_posts()</tt>, you're essentially throwing away the default query and its results and re-executing another query against the database.

This is not necessarily a problem, especially if you're dealing with a smaller blog-based site. Developers of large sites with big databases and heavy visitor traffic may wish to consider alternatives, such as modifying the default request directly (before it's called). The [[Plugin_API/Filter_Reference/request|request]] filter can be used to achieve exactly this.

The 'parse_query' and the '[[Plugin_API/Action_Reference/pre_get_posts|pre_get_posts]]' filters are also available to modify the internal $query object that is used to generate the SQL to query the database.

==Usage==
%%%<?php
// The Query
query_posts( $args );

// The Loop
while ( have_posts() ) : the_post();
	echo '<li>';
	the_title();
	echo '</li>';
endwhile;

// Reset Query
wp_reset_query();
?>%%%
Place a call to <tt>query_posts()</tt> in one of your [[Templates|Template]] files before [[The Loop]] begins. The <tt>wp_query</tt> object will generate a new SQL query using your parameters. When you do this, WordPress ignores the other parameters it receives via the URL (such as page number or category). 

===Preserving Existing Query Parameters===

If you want to preserve the original query parameter information that was used to generate the current query, and then add or over-ride some parameters, you can use the <tt>$query_string</tt> global variable in the call to <tt>query_posts()</tt>.

For example, to set the display order of the posts without affecting the rest of the query string, you could place the following before [[The Loop]]:

<pre>
global $query_string;
query_posts( $query_string . '&order=ASC' );
</pre>

When using <tt>query_posts()</tt> in this way, the quoted portion of the parameter ''must'' begin with an ampersand (&).

Or alternatively, you can merge the original query array into your parameter array:

<pre>
global $wp_query;
$args = array_merge( $wp_query->query_vars, array( 'post_type' => 'product' ) );
query_posts( $args );
</pre>

===Combining Parameters===

You may have noticed from some of the examples above that you combine parameters with an ampersand (&), like so: 

<pre>
query_posts( 'cat=3&year=2004' );
</pre>

Posts for category 13, for the current month on the main page:

<pre>
if ( is_home() ) {
	query_posts( $query_string . '&cat=13&monthnum=' . date( 'n', current_time( 'timestamp' ) ) );
}
</pre>

At 2.3 this combination will return posts belong to both Category 1 AND 3, showing just two (2) posts, in descending order by the title:

<pre>
query_posts( array( 'category__and' => array(1,3), 'posts_per_page' => 2, 'orderby' => 'title', 'order' => 'DESC' ) );
</pre>

The following returns all posts that belong to category 1 and are tagged "apples"

<pre>
query_posts( 'cat=1&tag=apples' );
</pre>

You can search for several tags using +

<pre>
query_posts( 'cat=1&tag=apples+apples' );
</pre>

==Parameters==

'''Note:''' Parameter details can be found in the [[Class_Reference/WP_Query#Parameters|Parameter section of the WP_Query class article]].

The examples below also work with the WP_Query object.

==Examples==

===Exclude Categories From Your Home Page===

Placing this code in <tt>index.php</tt> file will cause the home page to display posts from all categories ''except'' category ID 3.

<pre>
<?php
if ( is_home() ) {
	query_posts( 'cat=-3' );
}
?>
</pre>

You can also add some more categories to the exclude-list (tested with WP 3.3.1):

<pre>
<?php
if ( is_home() ) {
	query_posts( 'cat=-1,-2,-3' );
}
?>
</pre>

===Retrieve a Particular Post===

To retrieve a particular post, you could use the following:

<pre>
query_posts( 'p=5' );
</pre>

'''Note:''' If the particular post is an attachment, you have to use ''attachment_id'' instead of ''p'':

<pre>
query_posts( 'attachment_id=5' );
</pre>

If you want to use the ''Read More'' functionality with this query, you will need to set the global <tt>$more</tt> variable to 0.

<pre>
<?php
// retrieve one post with an ID of 5
query_posts( 'p=5' );

// set $more to 0 in order to only get the first part of the post
global $more;
$more = 0;

// the Loop
while (have_posts()) : the_post();
	the_content( 'Read the full post &raquo;' );
endwhile;
?>
</pre>

===All Posts in a Category===

The "Blog pages show at most" parameter in Settings > Reading can influence your results.  To overcome this, add the 'posts_per_page' parameter.  For example:

<pre>
query_posts( array ( 'category_name' => 'my-category-slug', 'posts_per_page' => -1 ) );
</pre>

This will returns ALL posts from the category.

However, for subcategories (or child categories), 'The Category Name' doesn't always work. Rather use 'category-slug' instead. See [[Function_Reference/is_category]].

<pre>
if (is_category('category-slug')): 

	 query_posts(array('category_name' => 'my-category-slug', 'posts_per_page' => -1 )); 

endif; 
</pre>

===Syndication Feeds===

The "Syndication feeds show the most recent" or '<tt>posts_per_rss</tt>' parameters in Settings > Reading will overwrite any '<tt>posts_per_page</tt>' parameter in a query used in a feed.

To overcome use (for example in a a custom ics feed, where all matching posts are required), use the "posts_limit" filter as follows:

<pre>
if ( isset ( $query->query_vars['feed'] ) and ( $query->query_vars['feed'] == 'ics' ) )
{
	add_filter( 'post_limits', '__return_empty' );
}
</pre>

===Passing variables to query_posts===

You can pass a variable to the query with two methods, depending on your needs. As with other examples, place these above your Loop:

==== Example 1  ====

In this example, we concatenate the query before running it. First assign the variable, then concatenate and then run it. Here we're pulling in a category variable from elsewhere. 

<pre>
// assign the variable as current category
$categoryvariable = $cat;

// concatenate the query
$args = 'cat=' . $categoryvariable . '&orderby=date&order=ASC';

// run the query
query_posts( $args );
</pre>

==== Example 2 ====

In this next example, the double quotes tell PHP to treat the enclosed as an expression. For this example, we are getting the current month and the current year, and telling <tt>query_posts()</tt> to bring us the posts for the current month/year, and in this case, listing in ascending order so we get the oldest post at the top of the page. 

<pre>
$current_year = date('Y');
$current_month = date('m');

query_posts( "cat=22&year=$current_year&monthnum=$current_month&order=ASC" );
</pre>

==== Example 3 ====

This example explains how to generate a complete list of posts, dealing with pagination. We can use the default <tt>$query_string</tt> telling <tt>query_posts()</tt> to bring us a full posts listing.  We can also modify the <tt>posts_per_page</tt> query parameter from -1 to the number of posts you want to show on each page; in this last case, you'll probably want to use [[Template Tags/posts_nav_link|posts_nav_link()]] to navigate the generated archive.

<pre>
query_posts( $query_string . '&posts_per_page=-1' );
</pre>

==== Example 4 ====

If you don't need to use the <tt>$query_string</tt> variable, another method exists that is more clear and readable, in some more complex cases. This method puts the parameters into an array. The same query as in Example 2 above could be done like this:

<pre>
$args = array(
	'cat'      => 22,
	'year'     => $current_year,
	'monthnum' => $current_month,
	'order'    => 'ASC'
);
query_posts( $args );
</pre>

As you can see, with this approach, every variable can be put on its own line, for easier reading.

==== Example 5 ====

It is even possible to use the array style (Example 4) to query multiple taxonomies. Simply supply the taxonomy slug with a string of comma-separated values (each value being one term). In the example below, we will get all movie posts starring either Bruce Campbell ''or'' Chuck Norris.

<pre>
$args = array(
	'post_type'=> 'movie',
	'actor'    => 'Bruce Campbell, Chuck Norris',
	'order'    => 'ASC'
);
query_posts( $args );
</pre>

== Change Log ==

Since: [[Version 1.5|1.5.0]]

==Source File==

<tt>query_posts()</tt> is located in {{Trac|wp-includes/query.php|trunk|89}}.

==Resources==
*For more in-depth discussion of how WordPress generates and handles its queries, review these articles: [[Query Overview]] and [[Custom Queries]]
*Customize the Default Query properly using 'pre_get_posts' - [http://www.billerickson.net/customize-the-wordpress-query/#example-category Bill Erickson - Customize the Wordpress Query] or [http://developer.wordpress.com/2012/05/14/querying-posts-without-query_posts/ John James Jacoby - Querying Posts Without query_posts]
*You don't know Query [http://www.slideshare.net/andrewnacin/you-dont-know-query-wordcamp-netherlands-2012 - Slides from WordCamp Netherlands 2012 by Andrew Nacin]

==Related==

{{Query Tags}}
{{Tag Footer}}

[[Category:Template Tags]]