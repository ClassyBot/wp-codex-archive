{{Languages|
{{en|Installing WordPress}}
{{es|Instalando_Wordpress}}
{{de|WordPress installieren}}
{{bn|ওয়ার্ডপ্রেস ইন্সটল করা}}
{{fr|Installer WordPress}}
{{it|Installare WordPress}}
{{nl|WordPress installeren}}
{{ja|WordPress のインストール}}
{{ko|Installing WordPress}}
{{pt|Instalação do WordPress}}
{{pt-br|Instalando o WordPress}}
{{ru|Установка WordPress}}
{{sk|Inštalácia WordPress}}
{{sr|Инсталација Вордпреса}}
{{th|Installing WordPress}}
{{zh-cn|安装 WordPress}}
{{zh-tw|安裝WordPress}}
}}

__TOC__

WordPress is well-known for its ease of installation. Under most circumstances, installing WordPress is a very simple process and takes less than five minutes to complete. Many web hosts now offer tools (e.g. Fantastico) to automatically install WordPress for you. However, if you wish to install WordPress yourself, the following guide will help. Now with Automatic Upgrade, [[Upgrading WordPress|upgrading]] is even easier.

The following installation guide will help you, whether you go for the ''Famous 5 Minute Installation'', or require the more detailed installation guide.

* [[#Things to Know Before Installing WordPress|Things to Know Before You Begin Installing WordPress]]
* [[#Famous 5-Minute Installation|The Famous 5-Minute Installation]]
* [[#Detailed Instructions|Detailed Installation Instructions]]
* [[#Common_Installation_Problems|Common Installation Problems]]
* [[#Automated Installation|Automated Installation]]
* [[WordPress in Your Language]]
* [[Installing WordPress in Your Language]]
* [[#Installing_Multiple_Blogs|How to Install Multiple Blogs]]
* [[#Installing_WordPress_on_your_own_Computer|How to Install on Your Own Computer]]
* [[#Easy 5 Minute WordPress Installation on Windows|Easy 5 Minute WordPress Installation on Windows]]
* [[#Installing_WordPress_at_AWS|How to Install with Amazon's Web Services (AWS) ]]
* [[#Installing_WordPress_at_DigitalOcean|How to Install at Digital Ocean on Ubuntu 14.04 LTS ]]
* [[#Unattended.2Fautomated_installation_of_WordPress_on_Ubuntu_Server_16.04_LTS|Unattended (automated) installation of WordPress on Ubuntu 16.04 LTS]]
* [[Getting Started with WordPress|Getting Started with WordPress (much more installation info)]]

== Things to Know Before Installing WordPress ==
Before you begin the install, there are a few things you need to have and do.

These are:

* Access to your [[Glossary#Web server|web server]] (via [[Glossary#FTP|FTP]] or [[Glossary#Shell|shell]])
* Ability to [[Installing_WordPress#Step_2:_Create_the_Database_and_a_User|create MySQL databases]]
* A [[Glossary#Text editor|text editor]]
* An [[FTP_Clients|FTP Client]]
* Your web browser of choice

===Things You Need to Do to Install WordPress ===

Begin your installation by:

# Checking to ensure that you and your web host have the [http://wordpress.org/about/requirements/ minimum requirements to run WordPress].
# [http://wordpress.org/download/ Downloading] the most current version of WordPress.
# Unzipping the downloaded file to a folder on your hard drive.
# Creating a [[Editing wp-config.php|secure password for your Secret Key]]
# Keeping this webpage open so you have it handy during the installation.

== Famous 5-Minute Installation ==

Here's the quick version of the instructions for those who are already comfortable with performing such installations. More [[#Detailed_Instructions|detailed instructions]] follow. 

If you are not comfortable with renaming files, step 3 is optional and you can skip it as the install program will create the <tt>wp-config.php</tt> file for you. 

# Download and unzip the WordPress package if you haven't already.
# Create a database for WordPress on your web server, as well as a [[Glossary#MySQL|MySQL]] (or MariaDB) user who has all privileges for accessing and modifying it.
# (Optional) Find and rename <tt>wp-config-sample.php</tt> to <tt>wp-config.php</tt>, then edit the file (see [[Editing wp-config.php]]) and add your database information.
# Upload the WordPress files to the desired location on your web server:
#* If you want to integrate WordPress into the root of your domain (e.g. <tt><nowiki>http://example.com/</nowiki></tt>), move or upload all contents of the unzipped WordPress directory (excluding the WordPress directory itself) into the root directory of your web server.
#* If you want to have your WordPress installation in its own subdirectory on your website (e.g. <tt><nowiki>http://example.com/blog/</nowiki></tt>), create the <tt>blog</tt> directory on your server and upload the contents of the unzipped WordPress package to the directory via FTP.
#* '''''Note:''' If your FTP client has an option to convert file names to lower case, make sure it's disabled.''
# Run the WordPress installation script by accessing the URL in a web browser. This should be the URL where you uploaded the WordPress files.
#* If you installed WordPress in the root directory, you should visit: <tt><nowiki>http://example.com/</nowiki></tt>
#* If you installed WordPress in its own subdirectory called <tt>blog</tt>, for example, you should visit: <tt><nowiki>http://example.com/blog/</nowiki></tt>

That's it! WordPress should now be installed.

== Detailed Instructions ==

=== Step 1: Download and Extract ===

Download and unzip the WordPress package from https://wordpress.org/download/.
* If you will be uploading WordPress to a remote web server, download the WordPress package to your computer with a web browser and unzip the package.
* If you will be using FTP, skip Step 2 and go to the [[Installing_WordPress#Step_3:_Set_up_wp-config.php | next step]] - uploading files is covered later.
* If you have [[Glossary#Shell|shell]] access to your web server, and are comfortable using console-based tools, you may wish to download WordPress directly to your [[Glossary#Web server|web server]] using <tt>wget</tt> (or <tt>lynx</tt> or another console-based web browser) if you want to avoid [[Glossary#FTP|FTPing]]:
** <tt>wget <nowiki>https://wordpress.org/latest.tar.gz</nowiki></tt>
** Then unzip the package using: <br /> <tt>tar -xzvf latest.tar.gz </tt> <br><br>The WordPress package will extract into a folder called <tt>wordpress</tt> in the same directory that you downloaded <tt>latest.tar.gz</tt>.

=== Step 2: Create the Database and a User ===

If you are using a [[Glossary#Hosting provider|hosting provider]], you may already have a WordPress database set up for you, or there may be an automated setup solution to do so. Check your hosting provider's support pages or your control panel for clues about whether or not you'll need to create one manually.

If you determine that you'll need to create one manually, follow the instructions for [[WordPress_Backups#Accessing_phpMyAdmin|accessing phpMyAdmin on various servers]], or follow the instructions for [[#Using Plesk|'''Using Plesk''']], [[#Using_cPanel|'''Using cPanel''']] or [[#Using phpMyAdmin|'''Using phpMyAdmin''']] below.

If you are installing WordPress on your own web server, follow the [[#Using phpMyAdmin|'''Using phpMyAdmin''']] or [[#Using the MySQL Client|'''Using the MySQL Client''']] instructions below to create your WordPress username and database.

If you have only one database and it is already in use, you can install WordPress in it - just make sure to have a distinctive prefix for your tables to avoid over-writing any existing database tables.

==== Using Plesk ====

'''Note''': Plesk recommends all users to install and manage WordPress using the [[#Plesk_WordPress_Toolkit|WordPress Toolkit]]. However, if you wish to install WordPress manually, follow these steps to create a database:
# [https://docs.plesk.com/en-US/onyx/customer-guide/quick-start-with-plesk/log-in-to-plesk.77963/ Log in] to Plesk.
# In the upper right corner of the screen, click '''Databases'''.
#:[[File:plesk_create_db_1.png]]
# Click '''Add Database'''.
#:[[File:plesk_create_db_2.png]]
# Type in the database name.
#:[[File:plesk_create_db_3.png]]
# Type in the database user name and password, and then click '''Ok'''.
#:[[File:plesk_create_db_4.png]]
Once the database has been created, click '''Connection info''' to see the information you will need to connect to the database (database server hostname and port, database name, and the database user name).
[[File:plesk_create_db_5.png]]
[[File:plesk_create_db_6.png]]

==== Using cPanel ====

If your hosting provider supplies the [[Glossary#cPanel|cPanel]] hosting control panel, you may follow these simple instructions to create your WordPress username and database.  A more complete set of instructions for using cPanel to create the database and user can be found in [[Using cPanel]].

# Log in to your [[Glossary#cPanel|cPanel]].
# Click '''MySQL Database Wizard''' icon under the Databases section.
# In '''Step 1. Create a Database''' enter the database name and click Next Step.
# In '''Step 2. Create Database Users''' enter the database user name and the password.  Make sure to use a strong password. Click Create User.
# In '''Step 3. Add User to Database''' click the All Privileges checkbox and click Next Step. 
# In '''Step 4. Complete the task''' note the database name and user.  Write down the values of ''hostname'', ''username'', ''databasename'', and the password you chose. (Note that ''hostname'' will usually be '''localhost'''.)

==== Using Lunarpages.com's custom cPanel (LPCP) ====

Lunarpages has developed their own version of cPanel. 

# Log in to your account.
# Go to Control Panel.
# Click on the button on the left panel labeled 'Go to LPCP'.
# Go to MySQL Manager.
# Add the user name and database name but leave the host name as the default IP number.
# Note the IP address of the database on the right which is different from the default IP number of the host indicated in the above step.
# When modifying the <tt>wp-config.php</tt> file, use the DB IP number, not 'LOCALHOST'.
# When modifying the <tt>wp-config.php</tt> file, be sure to use the full name of the database and user name, typically 'accountname_nameyoucreated'.
# Refer to http://wiki.lunarpages.com/Create_and_Delete_MySQL_Users_in_LPCP for more info.

==== Using phpMyAdmin ====

If your web server has [[Glossary#phpMyAdmin|phpMyAdmin]] installed, you may follow these instructions to create your WordPress username and database. If you work on your own computer, on most Linux distributions you can install PhpMyAdmin automatically.

'''''Note:''' These instructions are written for phpMyAdmin 4.4; the phpMyAdmin user interface can vary slightly between versions.''

# If a database relating to WordPress does not already exist in the '''Database''' dropdown on the left, create one:
## Choose a name for your WordPress database: '<tt>wordpress</tt>' or '<tt>blog</tt>' are good, but most hosting services (especially shared hosting) will require a name beginning with your username and an underscore, so, even if you work on your own computer, we advise that you check your hosting service requirements so that you can follow them on your own server and be able to transfer your database without modification. Enter the chosen database name in the '''Create database''' field and choose the best collation for your language and encoding. In most cases it's better to choose in the "utf8_" series and, if you don't find your language, to choose "utf8mb4_general_ci" (Reference: [https://make.wordpress.org/core/2015/04/02/the-utf8mb4-upgrade/]).

[[File:phpMyAdmin_create_database.jpg]]

# Click the '''phpMyAdmin''' icon in the upper left to return to the main page, then click the '''Users''' tab. If a user relating to WordPress does not already exist in the list of users, create one: 
[[File:users.jpg|600px]]
## Click '''Add user'''.
## Choose a username for WordPress ('<tt>wordpress</tt>' is good) and enter it in the '''User name''' field. (Be sure '''Use text field:''' is selected from the dropdown.)
## Choose a secure password (ideally containing a combination of upper- and lower-case letters, numbers, and symbols), and enter it in the '''Password''' field. (Be sure '''Use text field:''' is selected from the dropdown.) Re-enter the password in the '''Re-type''' field.
## Write down the username and password you chose.
## Leave all options under '''Global privileges''' at their defaults.
## Click '''Go'''.
## Return to the '''Users''' screen and click the '''Edit privileges''' icon on the user you've just created for WordPress. 
## In the '''Database-specific privileges''' section, select the database you've just created for WordPress under the '''Add privileges to the following database''' dropdown, and click '''Go'''. 
## The page will refresh with privileges for that database. Click '''Check All''' to select all privileges, and click '''Go'''.
## On the resulting page, make note of the host name listed after '''Server:''' at the top of the page. (This will usually be '''localhost'''.)

[[File:phpMyAdmin_server_info_4.4.jpg]]

==== Using the MySQL Client ====

You can create MySQL/MariaDB users and databases quickly and easily by running mysql from the shell. The syntax is shown below and the dollar sign is the command prompt:

<pre>
$ mysql -u adminusername -p
Enter password:
Welcome to the MySQL monitor.  Commands end with ; or \g.
Your MySQL connection id is 5340 to server version: 3.23.54
 
Type 'help;' or '\h' for help. Type '\c' to clear the buffer.
 
mysql> CREATE DATABASE databasename;
Query OK, 1 row affected (0.00 sec)
 
mysql> GRANT ALL PRIVILEGES ON databasename.* TO "wordpressusername"@"hostname"
    -> IDENTIFIED BY "password";
Query OK, 0 rows affected (0.00 sec)
  
mysql> FLUSH PRIVILEGES;
Query OK, 0 rows affected (0.01 sec)

mysql> EXIT
Bye
$ 
</pre>

The example shows:
* that <tt>root</tt> is also the ''adminusername''. It is a safer practice to choose a so-called "mortal" account as your mysql admin, so that you are not entering the command "mysql" as the root user on your system. (Any time you can avoid doing work as root you decrease your chance of being exploited.) The name you use depends on the name you assigned as the database administrator using mysqladmin. 
* <tt>wordpress</tt> or <tt>blog</tt> are good values for ''databasename''.
* <tt>wordpress</tt> is a good value for ''wordpressusername'' but you should realize that, since it is used here, the entire world will know it, too.
* ''hostname'' will usually be <tt>localhost</tt>. If you don't know what this value should be, check with your system administrator if you are not the admin for your WordPress host.  If you are the system admin, consider using a non-root account to administer your database.
* ''password'' should be a difficult-to-guess password, ideally containing a combination of upper- and lower-case letters, numbers, and symbols. One good way of avoiding the use of a word found in a dictionary is to use the first letter of each word in a phrase that you find easy to remember.

If you need to write these values somewhere, avoid writing them in the system that contains the things protected by them. You need to remember the value used for ''databasename'', ''wordpressusername'', ''hostname'', and ''password''. Of course, since they are already in (or will be shortly) your wp-config.php file, there is no need to put them somewhere else, too.

<!-- 
==== Using Plesk ====
See: [http://www.tamba2.org.uk/wordpress/plesk/ Plesk 7 at tamba2.org]
 -->

==== Using DirectAdmin ====
a. If you're a regular User of a single-site webhosting account, you can log in normally. Then click '''MySQL Management'''. (If this is not readily visible, perhaps your host needs to modify your "package" to activate MySQL.) Then follow part "c" below.

b. Reseller accounts Admin accounts may need to click '''User Level'''. They must first log in as Reseller if the relevant domain is a Reseller's primary domain... or log in as a User if the domain is not a Reseller's primary domain. If it's the Reseller's primary domain, then when logged in as Reseller, simply click '''User Level'''. However if the relevant domain is not the Reseller's primary domain, then you must log in as a User. Then click '''MySQL Management'''. (If not readily visible, perhaps you need to return to the Reseller or Admin level, and modify the "Manage user package" or "Manage Reseller package" to enable MySQL.)

c. In MySQL Management, click on the small words: '''Create new database'''. Here you are asked to submit two suffixes for the database and its username. For maximum security, use two different sets of 4-6 random characters. Then the password field has a Random button that generates an 8-character password. You may also add more characters to the password for maximum security. Click '''Create'''. The next screen will summarize the database, username, password and hostname. Be sure to copy and paste these into a text file for future reference.

=== Step 3: Set up wp-config.php ===

You can either create and edit the <tt>wp-config.php</tt> file yourself, or you can skip this step and let WordPress try to do this itself [[Installing_WordPress#Step_5:_Run_the_Install_Script|when you run the installation script (step 5)]] (you’ll still need to tell WordPress your database information).

(For more extensive details, and step by step instructions for creating the configuration file and your secret key for password security, please see [[Editing wp-config.php]].)

Return to where you extracted the WordPress package in Step 1, rename the file <tt>wp-config-sample.php</tt> to <tt>wp-config.php</tt>, and open it in a text editor.

[[Editing_wp-config.php#Configure_Database_Settings|Enter your database information]] under the section labeled

  // ** MySQL settings - You can get this info from your web host ** //

; DB_NAME : The name of the database you created for WordPress in Step 2.
; DB_USER : The username you created for WordPress in Step 2.
; DB_PASSWORD : The password you chose for the WordPress username in Step 2.
; DB_HOST : The hostname you determined in Step 2 (usually <tt>localhost</tt>, but not always; see [[Editing_wp-config.php#Possible_DB_HOST_values|some possible DB_HOST values]]). If a port, socket, or pipe is necessary, append a colon (<tt>:</tt>) and then the relevant information to the hostname.
; DB_CHARSET : The database character set, normally should not be changed (see [[Editing wp-config.php]]).
; DB_COLLATE : The database collation should normally be left blank (see [[Editing wp-config.php]]).

[[Editing_wp-config.php#Security_Keys|Enter your secret key values]] under the section labeled 

   * Authentication Unique Keys.

Save the <tt>wp-config.php</tt> file.

=== Step 4: Upload the files ===

Now you will need to decide where on your domain you'd like your WordPress-powered site to appear:
* In the root directory of your website. (For example, <tt><nowiki>http://example.com/</nowiki></tt>)
* In a subdirectory of your website. (For example, <tt><nowiki>http://example.com/blog/</nowiki></tt>)

'''''Note:''' The location of your root web directory in the filesystem on your [[Glossary#Web server|web server]] will vary across hosting providers and operating systems. Check with your [[Glossary#Hosting provider|hosting provider]] or system administrator if you do not know where this is.''

==== In the Root Directory ====

* If you need to upload your files to your web server, use an [[Glossary#FTP|FTP]] client to upload all the ''contents'' of the <tt>wordpress</tt> directory (but not the directory itself) into the root directory of your website.
* If your files are already on your web server, and you are using [[Glossary#Shell|shell]] access to install WordPress, move all of the ''contents'' of the <tt>wordpress</tt> directory (but not the directory itself) into the root directory of your website.

==== In a Subdirectory ====

* If you need to upload your files to your web server, rename the <tt>wordpress</tt> directory to your desired name, then use an [[Glossary#FTP|FTP]] client to upload the directory to your desired location within the root directory of your website.
* If your files are already on your web server, and you are using [[Glossary#Shell|shell]] access to install WordPress, move the <tt>wordpress</tt> directory to your desired location within the root directory of your website, and rename the directory to your desired name.

'''''Note:''' If your FTP client has an option to convert file names to lower case, make sure it's disabled.''

=== Step 5: Run the Install Script ===

Point a web browser to start the installation script.

* If you placed the WordPress files in the root directory, you should visit: <tt><nowiki>http://example.com/wp-admin/install.php</nowiki></tt>
* If you placed the WordPress files in a subdirectory called <tt>blog</tt>, for example, you should visit: <tt><nowiki>http://example.com/blog/wp-admin/install.php</nowiki></tt>

==== Setup configuration file ====

If WordPress can't find the <tt>wp-config.php</tt> file, it will tell you and offer to try to create and edit the file itself. (You can also do this directly by loading <tt>wp-admin/setup-config.php</tt> in your web browser.) WordPress will ask you the database details and write them to a new <tt>wp-config.php</tt> file. If this works, you can go ahead with the installation; otherwise, go back and [[#Step_3:_Set_up_wp-config.php|create, edit, and upload the <tt>wp-config.php</tt> file yourself (step 3)]].

[[Image:install-step3.png|600px]]

==== Finishing installation ====

The following screenshots show how the installation progresses. Notice that in entering the details screen, you enter your site title, your desired user name, your choice of a password (twice), and your e-mail address. Also displayed is a check-box asking if you would like your blog to appear in search engines like Google and Technorati. Leave the box unchecked if you would like your blog to be visible to everyone, including search engines, and check the box if you want to block search engines, but allow normal visitors. Note all this information can be changed later in your [[Administration_Screens|Administration Screens]].

[[Image:install-step5.png|600px]]

'''Note:  You should not  use "admin" as a user id as shown above!'''

If you successfully install the WordPress, login prompt will be displayed.

==== Install script troubleshooting ====

* If you get an error about the database when you run the install script:
** Go back to [[#Step_2:_Create_the_Database_and_a_User|Step 2]] and [[#Step_3:_Set_up_wp-config.php|Step 3]], and make sure you entered all the correct database information into <tt>wp-config.php</tt>.
** Make sure you granted your WordPress user permission to access your WordPress database in '''Step 3'''.
** Make sure the database server is running.

== Common Installation Problems ==

The following are some of the most common installation problems.  For more information and troubleshooting for problems with your WordPress installation, check out [[FAQ Installation]] and [[FAQ Troubleshooting]].

'''I see a directory listing rather than a web page.'''

The web server needs to be told to view <tt>index.php</tt> by default. In Apache, use the <tt>DirectoryIndex index.php</tt> directive. The simplest option is to create a file named <tt>.htaccess</tt> in the installed directory and place the directive there. Another option is to add the directive to the web server's configuration files.

'''I see lots of <tt>Headers already sent</tt> errors. How do I fix this?'''

You probably introduced a syntax error in editing <tt>wp-config.php</tt>.
# Download <tt>wp-config.php</tt> (if you don't have [[Glossary#Shell|shell]] access).
# Open it in a [[Glossary#Text editor|text editor]].
# Check that the first line contains nothing but <tt><?php</tt>, and that there is '''no''' text before it (not even whitespace).
# Check that the last line contains nothing but <tt>?></tt>, and that there is '''no''' text after it (not even whitespace).
# If your text editor saves as Unicode, make sure it adds '''no byte order mark (BOM)'''.  Most Unicode-enabled text editors do not inform the user whether or not it adds a BOM to files; if so, try using a different text editor.
# Save the file, upload it again if necessary, and reload the page in your browser.

'''My page comes out gibberish. When I look at the source I see a lot of "<tt><?php ?></tt>" tags.'''

If the <tt><?php ?></tt> tags are being sent to the browser, it means your [[Glossary#PHP|PHP]] is not working properly. All PHP code is supposed to be executed ''before'' the server sends the resulting [[Glossary#HTML|HTML]] to your web browser. (That's why it's called a ''pre''processor.) Make sure your web server meets the requirements to run WordPress, that PHP is installed and configured properly, or contact your hosting provider or system administrator for assistance.

'''I keep getting an <tt>Error connecting to database</tt> message but I'm sure my configuration is correct.'''

Try resetting your MySQL/MariaDB password manually. If you have access to MySQL/MariaDB via shell, try issuing:

 SET PASSWORD FOR '<var>wordpressusername</var>'@'<var>hostname</var>' = OLD_PASSWORD('<var>password</var>');

If you are using a version of MySQL prior to 4.1, use <tt>PASSWORD</tt> instead of <tt>OLD_PASSWORD</tt>. If you do not have shell access, you should be able to simply enter the above into an SQL query in phpMyAdmin. Failing that, you may need to use your host's control panel to reset the password for your database user.

'''I keep getting an <tt>Your PHP installation appears to be missing the MySQL extension which is required by WordPress</tt> message but I'm sure my configuration is correct.'''

Check to make sure that your configuration of your web-server is correct and that the MySQL plugin is getting loaded correctly by your web-server program.  Sometimes this issue requires everything in the path all the way from the web-server down to the MySQL/MariaDB installation to be checked and verified to be fully operational.  Incorrect configuration files or settings are often the cause of this issue.

'''My image/MP3 uploads aren't working.'''

If you use the Rich Text Editor on a blog  that's installed in a subdirectory, and drag a newly uploaded image into  the editor  field, the image may vanish a couple seconds later. This is due to a problem with TinyMCE (the rich text editor) not getting enough information during the drag operation to construct the path to the image or other file  correctly. The solution is to  NOT drag uploaded images into the editor. Instead, click and  hold on the image and select '''Send to Editor'''.

==Automated Installation==
Although WordPress is very easy to install, you can use one of the one-click autoinstallers typically available from hosting companies. The most popular autoinstallers, [[#Plesk_WordPress_Toolkit|WordPress Toolkit]], [[#Cloudron|Cloudron]], [[#Fantastico|Fantastico]], [[#Installatron|Installatron]], and [[#Softaculous|Softaculous]] are described here.

=== Plesk WordPress Toolkit ===
The WordPress Toolkit helps Plesk users install and manage WordPress. It gives you two installation options:
* '''Quick''' (recommended) - a quick, three-click option delivering a fully functional and ready to go WordPress installation in under a minute. The installation is configured with the default settings and uses the latest WordPress version.
* '''Custom''' - this option enables you to select the desired WordPress version and tinker with the installation settings while still taking care of all drudgery.
Note that you are still responsible for making sure that your domain meets the requirements for WordPress installation (for example, that a supported PHP version is [https://docs.plesk.com/en-US/current/customer-guide/websites-and-domains/hosting-settings/web-scripting-settings/php-settings.70742/ configured]).

To perform a ''quick'' install, follow these steps:
# [https://docs.plesk.com/en-US/onyx/customer-guide/quick-start-with-plesk/log-in-to-plesk.77963/ Log in] to Plesk.
# In the upper right corner of the screen, click '''WordPress'''.
#:[[File:WP_toolkit_1.png]]
# Click '''Install''' > '''Install (Quick)'''.
#:[[File: qinstall.PNG]]
# The installation has started.
#:[[File: qinstall2.PNG]]
# In a few seconds, the installation will be finished. Click '''Log In''' to type your first post!

To perform a ''custom'' install, follow these steps:
# [https://docs.plesk.com/en-US/onyx/customer-guide/quick-start-with-plesk/log-in-to-plesk.77963/ Log in] to Plesk.
# In the upper right corner of the screen, click '''WordPress'''.
#:[[File:WP_toolkit_1.png]]
# Click '''Install''' > '''Install (Custom)''' .
#:[[File:cinstall.PNG]]
# In the opened '''Installation of WordPress''' window, select the desired WordPress version. 
#:[[File:cinstall3.png]]
# Fill in all the required fields (marked with an asterisk).
# Make any changes you wish to the default settings and click '''Install''' once you’re done.
# The installation has started.
#:[[File:qinstall2.PNG]]
# In a few seconds, the installation will be finished. Click '''Log In''' to type your first post!
Regardless of the installation type you chose, the WordPress Toolkit can make managing your WordPress installation easier. Read the [https://docs.plesk.com/en-US/current/customer-guide/websites-and-domains/wordpress-toolkit.73391/ documentation] for more information.

=== Cloudron ===

[https://cloudron.io Cloudron] is a complete solution for running apps on your server and keeping them up-to-date and secure. You can install one or more instances of WordPress and each installation gets a free SSL cert, is backed up and kept up-to-date automatically. You can try it out at the [https://my-demo.cloudron.me demo instance] (username: cloudron password: cloudron).

[[File:cloudronbutton32.png|link=https://cloudron.io/button.html?app=org.wordpress.cloudronapp]]

=== Fantastico ===
# Log in to your cPanel account and click on the '''Fantastico''' (or Fantastico Deluxe) option.
# Once you enter Fantastico, on the left hand side there is a Blogs category under which you will find WordPress. Click on it.
# Click on the '''New Installation''' link in the WordPress Overview.
# Fill in the various details and click '''Submit'''.
# That's it, you are done!

[[File:fant.jpg]]

* [http://www.netenberg.com/fantastico.php Fantastico Home Page]

=== Installatron ===

Installatron is a one-click web application installer that enables WordPress and other top web applications to be instantly installed and effortlessly managed. WordPress installations managed by Installatron can be updated (manually or automated), cloned, backed up and restored, edited to change installation parameters, and more.

Many web hosting providers include Installatron through their web hosting control panel. If Installatron is not available from your provider, you can use Installatron directly from Installatron.com.

Here's how to install WordPress through your web hosting provider's control panel:

# Log in to your web host's control panel, navigate to "Installatron," click '''WordPress''', and choose the '''Install this application''' option.
# Change any of the install prompts to customize the install. For example, you can choose a different language for WordPress. 
# Click the '''Install''' button to begin the installation process. You will be redirected to a progress page where you can watch as WordPress is installed within a few seconds to your website.

Here's how to install WordPress using Installatron.com:

# Navigate to [http://installatron.com/wordpress Installatron WordPress] and choose the '''Install this application''' option.
# Enter your hosting account's FTP or SSH account information, and then enter MySQL/MariaDB database information for a created database. For increased security, create a separate FTP account and MySQL/MariaDB database for your WordPress installation. 
# Change any of the install prompts to customize the install. For example, you can choose a different language for WordPress. 
# Click the '''Install''' button to begin the installation process. You will be redirected to a progress page where you can watch as WordPress is installed within a few seconds to your website.

* [http://www.installatron.com Installatron Home Page]

=== Softaculous ===
# Log in to your host and look for Software/Services.
# In Softaculous, there is a Blogs category. Collapse the category and WordPress will be there. Click on it.
# You will see an Install TAB. Click it.
# Fill in the various details and submit.
# That's it, you are done!

[[File:soft.jpg]]

* [http://www.softaculous.com Softaculous Home Page]

== Installation Instructions in Other Languages ==

For installation instructions in other languages, see [[WordPress in Your Language]].

== Installing Multiple Blogs ==

* Detailed information about [[Installing Multiple Blogs]] is available.
* [http://code.tutsplus.com/tutorials/clone-wordpress-in-linux--cms-25059 Clone a WordPress Blog] Clone existing installations in a minute with this simple bash script for Linux.

== Installing WordPress on your own Computer ==

=== Local Installation Instructions ===
Use these instruction for setting up a local server environment for testing and development.

Installing WordPress locally is usually meant for the purpose of development. Those interested in development should follow the instructions below and download WordPress locally. 

* [http://ampps.com/download AMPPS]: Free WAMP/MAMP/LAMP stack, with inbuilt Softaculous Installer. Can 1 click install and upgrade WordPress and others as well. 
* [http://serverpress.com/products/desktopserver DesktopServer Limited]: Free and paid Windows/Macintosh server, creates multiple virtual servers with fictitious top level domains (i.e. www.example.dev) specifically for working on multiple WordPress projects.
* [https://itunes.apple.com/us/app/bitnami-stack-for-wordpress/id588981362?mt=12 Mac App Store 1-click install for WordPress] Installs a free, self-contained all-in-one bundle of WordPress and everything it needs to run: MySQL/MariaDB, Apache and PHP
* [[Installing WordPress Locally on Your Mac With MAMP]]
* [[User:Beltranrubo/BitNami]] Free all-in-one installers for OS X, Windows and Linux. There are also available installers for WordPress Multisite [[User:Beltranrubo/BitNami_Multisite]] using different domains or subdomains.
* [https://local.getflywheel.com/ Local by Flywheel] creates a local installation on Mac or Windows with just a few clicks.

=== Software Appliance - Ready-to-Use ===

You may find that using a pre-integrated [http://en.wikipedia.org/wiki/Software_appliance software appliance] is a great way to get up and running with WordPress, especially in combination with virtual machine software (e.g., VMWare, VirtualBox, Xen HVM, KVM).

Another software that can be used is Parallels, which you would have to pay for unlike virtual machine software. It allows you to run both Mac and Windows on your machine. 

A ''software appliance'' allows users to altogether skip manual installation of WordPress and its dependencies, and instead deploy a self-contained system that requires little to no setup, in just a couple of minutes.

* [http://www.turnkeylinux.org/wordpress TurnKey WordPress Appliance]: a free Debian-based  appliance that just works. It bundles a collection of popular WordPress plugins and features a small footprint, automatic security updates, SSL support and a Web administration interface. Available as ISO, various virtual machine images, or launch in the cloud.

* [http://bitnami.org/stack/wordpress BitNami WordPress Appliance]: free WordPress appliances based on Ubuntu or Open Suse. Native installer and Cloud images also available. There are also virtual machines for WordPress Multisite already configured.

* [https://sourceforge.net/projects/usharesoftvapps/files/uss-wordpress UShareSoft WordPress Appliance]: free WordPress appliance for many of the major virtualization and cloud platforms (Cloud.com, Xen, VMware, OVF, Abiquo)

=== Unattended/automated installation of WordPress on Ubuntu Server 16.04 LTS ===

Unattended installation of WordPress on Ubuntu Server
[https://peteris.rocks/blog/unattended-installation-of-wordpress-on-ubuntu-server/]

You can follow this guide by copy & pasting commands in a terminal to set up WordPress on a fresh Ubuntu Server 16.04 installation with nginx, PHP7, MySQL plus free SSL from LetsEncrypt. 

You will not be prompted to enter any credentials or details like in other guides, everything is automated. You can even skip the installation wizard.

=== Installation of WordPress on Ubuntu Server 18.04 LTS ===
[https://blog.bvzzdesign.com/2018/05/19/installing-wordpress-4-9-6-to-ubuntu-18-04-lts-with-nginx-mysql-and-php-7-2-and-setting-ssl-for-https-connections-with-letsencrypt/ Installation of WordPress on Ubuntu Server]

This install tutorial assumes you have terminal access and are comfortable inputting commands 
This tutorial assumes that

# you have a server or VPS installed with ubuntu 18.04
# you have access to a root terminal on the server
# you are comfortable with entering commands on this terminal
# you have never installed WordPress before

if you qualify for all of these, you are ready to install WordPress! if not, you can head over to this guide on how to install WordPress for regular people.

==== Variables ====

<pre>WP_DOMAIN</pre> is going to be the [https://en.wikipedia.org/wiki/Fully_qualified_domain_name fully qualified domain name] for your site, which an example is provided. You should also choose a strong password for your <pre>WP_ADMIN_PASSWORD</pre>.

<pre> 
WP_DOMAIN="blog.bvzzdesign.com"
WP_ADMIN_USERNAME="admin"
WP_ADMIN_PASSWORD="admin"
WP_ADMIN_EMAIL="no@spam.org"
WP_DB_NAME="wordpress"
WP_DB_USERNAME="wordpress"
WP_DB_PASSWORD="wordpress"
WP_PATH="/var/www/wordpress"
MYSQL_ROOT_PASSWORD="root"
</pre>

==== Software Dependencies ====

now its time for us to install our software, for this we used nginx, PHP and MySQL. For those of you that prefer Apache, I will refer you to [https://www.nginx.com/blog/nginx-vs-apache-our-view/ NGINX vs. Apache: Our View of a Decade-Old Question]. For those of you who still prefer Apache, stay tuned for a future tutorial or refer to [https://www.digitalocean.com/community/tutorials/how-to-install-wordpress-with-lamp-on-ubuntu-16-04#step-1-create-a-mysql-database-and-user-for-wordpress How To Install WordPress with LAMP on Ubuntu 16.04 ].

By default <pre>mysql-server</pre> is going to ask for the root password, and we automate that with <pre>debconf-set-selections</pre>.

<pre> 
echo "mysql-server-5.7 mysql-server/root_password password $MYSQL_ROOT_PASSWORD" | sudo debconf-set-selections
echo "mysql-server-5.7 mysql-server/root_password_again password $MYSQL_ROOT_PASSWORD" | sudo debconf-set-selections
sudo apt install -y nginx mysql-server
</pre>

> there are some server configurations that have issues installing nginx, if you get errors on your nginx install running <pre>sudo service apache2 stop</pre> will fix those issues most of the time. Also, it may be fitting to your use case to disable apache at boot which can be achieved with <pre>sudo systemctl disable apache2.service</pre> or configure apache2 to listen on a different port

now let's install PHP 7.2 

first, we are going to add the apt repository and update it

<pre>
sudo apt-get install software-properties-common
sudo add-apt-repository ppa:ondrej/php
sudo add-apt-repository ppa:ondrej/nginx-mainline
sudo apt update
</pre>

next, we will run the command to install PHP 7.2 and the related modules.

<pre>
sudo apt install php7.2-fpm php7.2-common php7.2-mbstring php7.2-xmlrpc php7.2-soap php7.2-gd php7.2-xml php7.2-intl php7.2-mysql php7.2-cli php7.2-zip php7.2-curl
</pre>

after installing the modules be sure to restart nginx and php7.2-fpm services to reload PHP configurations

<pre>
sudo systemctl restart nginx.service
sudo systemctl restart php7.2-fpm.service
</pre>

==== Configure nginx ====

first, we are going to create paths for our websites source code to be stored, and for our log files

<pre> 
sudo mkdir -p $WP_PATH/public $WP_PATH/logs
</pre>

and then we are going to create our config file for nginx, in this tutorial we use the <pre>tee</pre> command because later on, we are going to learn how to automate this process. if you prefer to edit this file by hand using a text editor, such as <pre>vim</pre> or <pre>nano</pre>, simply

<pre> 
sudo nano /etc/nginx/sites-available/blog.bvzzdesign.com
</pre>

and then add the data by hand. otherwise copy and paste
<pre>
sudo tee /etc/nginx/sites-available/$WP_DOMAIN &lt;&lt;EOF
server {
listen 80;
listen [::]:80;
server_name $WP_DOMAIN www.$WP_DOMAIN;

root $WP_PATH/public;
index index.php;

access_log $WP_PATH/logs/access.log;
error_log $WP_PATH/logs/error.log;

location / {
try_files \$uri \$uri/ /index.php?\$args;
}

location ~ \.php\$ {
include snippets/fastcgi-php.conf;
fastcgi_pass unix:/run/php/php7.2-fpm.sock;
}
}
EOF
</pre>

now we are going to make a [symlink](https://en.wikipedia.org/wiki/Symbolic_link) from our newly created file located at <pre>/etc/nginx/sites-available/$WP_DOMAIN</pre> to <pre>/etc/nginx/sites-enabled</pre>.

<pre>
sudo ln -s /etc/nginx/sites-available/$WP_DOMAIN /etc/nginx/sites-enabled/
</pre>

let's test our configuration for errors

<pre>
sudo nginx -t
</pre>

and then restart the <pre>systemd</pre> service

<pre>
sudo service nginx restart
</pre>

''' oh no something went wrong! '''

If you have some issues with nginx, never fear! There are plenty of ways to debug

* Check the nginx process logs by typing: <pre>sudo journalctl -u nginx</pre>
* Check the nginx access logs by typing: <pre>sudo less /var/log/nginx/access.log</pre>
* Check the nginx error logs by typing: <pre>sudo less /var/log/nginx/error.log</pre>
* Check nginx configuration fiels by typing: <pre>sudo nginx -t</pre>

==== Configure MySQL ====
we are now going to create a user and database for wordpress
<pre>
mysql -u root -p$MYSQL_ROOT_PASSWORD <<EOF
CREATE USER '$WP_DB_USERNAME'@'localhost' IDENTIFIED BY '$WP_DB_PASSWORD';
CREATE DATABASE $WP_DB_NAME;
GRANT ALL ON $WP_DB_NAME.* TO '$WP_DB_USERNAME'@'localhost';
EOF
</pre>

ignore the warning that it is insecure to use passwords on the command line, and if you are curious on why that warning appears, refer to this post on [https://serverfault.com/questions/862080/how-is-using-a-mysql-password-from-the-command-line-insecure serverfault].

==== Install Certbot and Generate an SSL Certificate ====

The first step to using Let's Encrypt to obtain an SSL certificate is to install the Certbot software on your server.

Certbot is in very active development, so the Certbot packages provided by Ubuntu tend to be outdated. However, the Certbot developers maintain a Ubuntu software repository with up-to-date versions, so we'll use that repository instead.

First, add the repository.

<pre> 
sudo add-apt-repository ppa:certbot/certbot
</pre>
now we update the package list to pick up the new repository's package info

<pre> 
sudo apt-get update
</pre>

and now let's install certbot

<pre>
sudo apt install python-certbot-nginx
</pre>

now that certbot is installed, let's use certbot to install our SSL certificate for our domain

<pre>
sudo certbot --nginx -d $WP_DOMAIN
</pre>

certbot will then prompt you with a message asking for your email address used for urgent renewal and security notices
<pre>
Enter email address (used for urgent renewal and security notices) (Enter 'c' to
cancel): no@spam.com
</pre>

then it will prompt you with a terms of service agreement, press A and then enter to accept

<pre>
-------------------------------------------------------------------------------
Please read the Terms of Service at
https://letsencrypt.org/documents/LE-SA-v1.2-November-15-2017.pdf. You must
agree in order to register with the ACME server at
https://acme-v01.api.letsencrypt.org/directory
-------------------------------------------------------------------------------
(A)gree/(C)ancel:
</pre>

it will then ask you if you would like to share your email with the Electronic Frontier Foundation press y or n and hit enter
<pre>
-------------------------------------------------------------------------------
Would you be willing to share your email address with the Electronic Frontier
Foundation, a founding partner of the Let's Encrypt project and the non-profit
organization that develops Certbot? We'd like to send you email about EFF and
our work to encrypt the web, protect its users and defend digital rights.
-------------------------------------------------------------------------------
(Y)es/(N)o:
</pre>

then you will be prompted with an option to redirect all HTTP traffic to https thus removing HTTP traffic, normally I choose option 1 in this situation, but this is heavily dependent on your use case

<pre>
Please choose whether or not to redirect HTTP traffic to HTTPS, removing HTTP access.
-------------------------------------------------------------------------------
1: No redirect - Make no further changes to the webserver configuration.
2: Redirect - Make all requests redirect to secure HTTPS access. Choose this for
new sites, or if you're confident your site works on HTTPS. You can undo this
change by editing your web server's configuration.
-------------------------------------------------------------------------------
Select the appropriate number [1-2] then [enter] (press 'c' to cancel):
</pre>

after you hit enter, the configuration will be updated and you should see a success message similar to this

<pre>
IMPORTANT NOTES:
- Congratulations! Your certificate and chain have been saved at
/etc/letsencrypt/live/example.com/fullchain.pem. Your cert will
expire on 2017-10-23. To obtain a new or tweaked version of this
certificate in the future, simply run certbot again with the
"certonly" option. To non-interactively renew *all* of your
certificates, run "certbot renew"
- Your account credentials have been saved in your Certbot
configuration directory at /etc/letsencrypt. You should make a
secure backup of this folder now. This configuration directory will
also contain certificates and private keys obtained by Certbot so
making regular backups of this folder is ideal.
- If you like Certbot, please consider supporting our work by:

Donating to ISRG / Let's Encrypt: https://letsencrypt.org/donate
Donating to EFF: https://eff.org/donate-le
</pre>
now let make sure that our auto-renewal is functional on our certbot script

<pre>
sudo certbot renew --dry-run
</pre>

If you see no errors, then congratulations you now have successfully installed an SSL certificate that will automatically renew


==== Installing WordPress ====

now that our system is configured for WordPress, we are ready to install it.

let's start with recreating the directory that will contain our source code, with a new directory with the correct permissions, and then change our working directory to that directory

<pre>
sudo rm -rf $WP_PATH/public/ # !!!
sudo mkdir -p $WP_PATH/public/
sudo chown -R $USER $WP_PATH/public/
cd $WP_PATH/public/
</pre>

now we will download WordPress with wget, unarchive it, and remove the archive
<pre>
wget https://wordpress.org/latest.tar.gz
tar xf latest.tar.gz --strip-components=1
rm latest.tar.gz
</pre>
we are now going to edit some configuration files using sed and echo

<pre>
mv wp-config-sample.php wp-config.php
sed -i s/database_name_here/$WP_DB_NAME/ wp-config.php
sed -i s/username_here/$WP_DB_USERNAME/ wp-config.php
sed -i s/password_here/$WP_DB_PASSWORD/ wp-config.php
echo "define('FS_METHOD', 'direct');" >> wp-config.php
</pre>

next lets change the ownership back to www-data to the directory that our source code is located
<pre>
sudo chown -R www-data:www-data $WP_PATH/public/
</pre>

finally we can update our username and password with a curl command
<pre>
curl "http://$WP_DOMAIN/wp-admin/install.php?step=2" \
--data-urlencode "weblog_title=$WP_DOMAIN"\
--data-urlencode "user_name=$WP_ADMIN_USERNAME" \
--data-urlencode "admin_email=$WP_ADMIN_EMAIL" \
--data-urlencode "admin_password=$WP_ADMIN_PASSWORD" \
--data-urlencode "admin_password2=$WP_ADMIN_PASSWORD" \
--data-urlencode "pw_weak=1"
</pre>

or do it manually by navigating to the domain name that you have set up

congratulations! you now have a working WordPress website!

=== WAMP ===

If you don't have IIS on your computer or don't want to use it, you could use a WAMP Stack :
* [http://www.wampserver.com/en/download.php WAMP Server] or [http://sourceforge.net/projects/wampserver/ WAMP Server at SourceForge] 
* [http://ampps.com/download AMPPS WAMPStack] - has Softaculous WordPress Installer
* [http://easyphp.org/ EasyPHP] - Has WordPress installer plugin
* [http://bitnami.org/stack/wampstack BitNami WAMPStack] - Has WordPress stack
* [http://www.apachefriends.org/ XAMPP WAMPStack]

These stacks can be downloaded freely and set up all the bits you need on your computer to run a website.  Once you have downloaded and installed WAMP, you can point your browser at [http://localhost/ localhost] and use the link to phpmyadmin to create a database. 

Then, in order to install WordPress, download the zip file, and extract it into the web directory for your WAMP installation (this is normally installed as c:\wamp\www). Finally visit http://localhost/wordpress to start the WordPress install. (Assuming you extracted into c:\wamp\www\wordpress).

Tip: If you want to use anything other than the default permalink structure on your install, make sure you enable the mod_rewrite module in WAMP. This can be enabled by clicking on the WAMP icon in the taskbar, then hover over Apache in the menu, then Apache modules and ensure that the rewrite_module item has a checkmark next to it.

== Installing WordPress at popular Hosting Companies ==
=== Installing WordPress at Atlantic.Net === 
* [https://www.atlantic.net/community/howto/install-wordpress-ubuntu-14/ Install WordPress On A Ubuntu 14.04 LTS]

You can also install WordPress on Ubuntu with one click [https://www.atlantic.net/cloud-hosting/wordpress-hosting/ WordPress Hosting] on Atlantic.Net.
=== Installing WordPress at AWS ===

* [https://github.com/aws-quickstart/quickstart-bitnami-wordpress Official WordPress High Availability Quickstart] Best practices quickstart for deploying WordPress on AWS, co-authored with Amazon
* [https://aws.amazon.com/marketplace/pp/B00NN8Y43U WordPress packaged by Bitnami] Ready to run one-click images of WordPress plus all of its dependencies (Apache, MySQL, PHP)
* [https://aws.amazon.com/marketplace/pp/B00NN8XE6S  WordPress Multisite packaged by Bitnami] Ready to run one-click images of WordPress plus all of its dependencies (Apache, MySQL, PHP) configured for multisite operation
* [https://aws.amazon.com/marketplace/pp/B00PV0ALEY/ Installatron WordPress] Installatron WordPress is a pre-configured and ready-to-launch image that contains a WordPress website and Installatron's WordPress management tools.
* [http://www.slideshare.net/harishganesan/scaling-wordpress-in-aws-amazon-ec2 Architecting a Highly Scalable WordPress Site in AWS] A guide for building a more expensive, highly scalable AWS implementation using Amazon's Relational Data Store (RDS) et al.

=== Installing WordPress at DigitalOcean ===

* [https://www.digitalocean.com/community/tutorials/how-to-install-wordpress-on-ubuntu-14-04 How to install WordPress on Ubuntu 14.04]

=== Installing WordPress at Linode === 
* [https://www.linode.com/docs/websites/cms/manage-web-content-with-wordpress Manage Web Content with WordPress] Install WordPress on a Debian Server with a LAMP Stack 

You can also install WordPress on Ubuntu with one click using this [https://www.linode.com/stackscripts/view/12 StackScript] on Linode.

=== Installing WordPress at iPage Hosting === 

* [http://istartblogging.com/#express-blog-install  This is a great step by step tutorial by IStartBlogging] on how to setup your blog the smart way with iPage Hosting. 

In less than 5 minutes from now, you will have your blog ready on your domain. You will install WordPress on your own domain as an Automated Process with ONE Click WordPress Installation feature from iPage hosting.

=== Installing WordPress at Microsoft Azure ===

* [https://azure.microsoft.com/en-us/marketplace/partners/wordpress/wordpress/ Installing WordPress on Microsoft Azure] is as simple as a few clicks. A hosting space and MySQL database will be created and configured, so you're ready to start creating within a matter of seconds.

* Running into some issues and need to troubleshoot your WordPress site on Azure? Follow this handy [https://azure.microsoft.com/en-us/blog/wordpress-troubleshooting-techniques-on-azure-websites/ Troubleshooting guide for WordPress on Azure]

* There is a full listing of resources on how to [https://azure.microsoft.com/en-us/documentation/articles/develop-wordpress-on-app-service-web-apps/ learn more about WordPress on Microsoft Azure]!

== Installing through wp-cli ==
[[wp-cli]] is a great command line tool with which you can easily install and update WordPress and themes and extensions.

== Moving an Existing WordPress Blog ==

* [http://codex.wordpress.org/Moving_WordPress Moving WordPress] The WordPress codex guide to migrating your WordPress blog.
* [http://www.agileweboperations.com/migrate-your-wordpress-blog-to-a-bitnami-ec2-instance Migrating a WordPress blog to Amazon]. A technical tutorial on moving your WordPress blog to Bitnami's AWS configuration.

[[Category:Installation]]
[[Category:Getting Started]]
[[Category:Troubleshooting]]
[[Category:UI Link]]