==Role of WP_Customize_Widgets==
<tt>WP_Customize_Widgets</tt> is WordPress' class for implementing widget management via the [[Theme_Customization_API|Theme Customization API]] for [[Version 3.9|WordPress 3.9]] and newer. 

This live preview and management of widgets via the Customizer serves as a secondary option to the traditional widget management workflow already in place.

==Usage==
WordPress instantiates the class via [[Class_Reference/WP_Customize_Manager|WP_Customize_Manager]] and works by adding a new Customizer section for each of the active sidebars visible in the Customizer preview.

== Methods and Properties ==

=== Properties ===

; <tt>$manager</tt>
: [[Class_Reference/WP_Customize_Manager|WP_Customize_Manager]] instance.

; <tt>$core_widget_id_bases</tt>
: (array) All id_bases for widgets defined in core.

=== Methods ===

; <tt>get_post_value( $name, $default = null )</tt>
: Get an unslashed post value or return a default.

; <tt>setup_widget_addition_previews()</tt>
: Set up widget addition previews.
: Since the widgets get registered on 'widgets_init' before the Customizer settings are set up on 'customize_register', we have to filter the options similarly to how the setting previewer will filter the options later.

; <tt>prepreview_added_sidebars_widgets( $sidebars_widgets )</tt>
: Ensure that newly-added widgets will appear in the widgets_sidebars.

; <tt>prepreview_added_widget_instance( $value = false )</tt>
: Ensure newly-added widgets have empty instances so they will be recognized.

; <tt>remove_prepreview_filters()</tt>
: Remove pre-preview filters.

; <tt>override_sidebars_widgets_for_theme_switch()</tt>
: Override sidebars_widgets for theme switch.

; <tt>filter_customize_value_old_sidebars_widgets_data( $old_sidebars_widgets )</tt>
: Filter old_sidebars_widgets_data customizer setting.

; <tt>filter_option_sidebars_widgets_for_theme_switch( $sidebars_widgets )</tt>
: Filter sidebars_widgets option for theme switch.

; <tt>customize_controls_init</tt>
: Make sure all widgets get loaded into the Customizer.

; <tt>schedule_customize_register()</tt>
: Ensure widgets are available for all types of previews.

; <tt>customize_register()</tt>
: Register customizer settings and controls for all sidebars and widgets.

; <tt>get_setting_id( $widget_id )</tt>
: Convert a widget_id into its corresponding customizer setting ID (option name).

; <tt>is_wide_widget( $widget_id )</tt>
: Determine whether the widget is considered "wide".

; <tt>parse_widget_id( $widget_id )</tt>
: Convert a widget ID into its id_base and number components.

; <tt>parse_widget_setting_id( $setting_id )</tt>
: Convert a widget setting ID (option path) to its id_base and number components.

; <tt>print_styles()</tt>
: Print styles.

; <tt>print_scripts()</tt>
: Print scripts.

; <tt>enqueue_scripts</tt>
: Enqueue scripts.

; <tt>output_widget_control_templates()</tt>
: Render the widget form control templates into the DOM.

; <tt>print_footer_scripts()</tt>
: Print footer scripts.

; <tt>get_setting_args( $id, $overrides = array() )</tt>
: Get common arguments to supply when constructing a Customizer setting.

; <tt>sanitize_sidebar_widgets( $widget_ids )</tt>
: Make sure that sidebar widget arrays only ever contain widget IDS. Used as the 'sanitize_callback' for each $sidebars_widgets setting.

; <tt>get_available_widgets()</tt>
: Build up an index of all available widgets for use in Backbone models.

; <tt>get_widget_control( $args )</tt>
: Get the widget control markup.

; <tt>customize_preview_init()</tt>
: Add hooks for the customizer preview.

; <tt>preview_sidebars_widgets( $sidebars_widgets )</tt>
: When previewing, make sure the proper previewing widgets are used.

; <tt>customize_preview_enqueue()</tt>
: Enqueue scripts for the Customizer preview.

; <tt>print_preview_css</tt>
: Insert default style for highlighted widget at early point so theme stylesheet can override.

; <tt>export_preview_data()</tt>
: At the very end of the page, at the very end of the wp_footer, communicate the sidebars that appeared on the page.

; <tt>tally_rendered_widgets( $widget )</tt>
: Keep track of the widgets that were rendered.

; <tt>tally_sidebars_via_is_active_sidebar_calls( $is_active, $sidebar_id )</tt>
: Tally the sidebars rendered via is_active_sidebar().

; <tt>tally_sidebars_via_dynamic_sidebar_calls( $has_widgets, $sidebar_id )</tt>
: Tally the sidebars rendered via dynamic_sidebar().

; <tt>sanitize_widget_instance( $value )</tt>
: Sanitize a widget instance.

; <tt>sanitize_widget_js_instance( $value )</tt>
: Convert widget instance into JSON-representable format.

; <tt>sanitize_sidebar_widgets_js_instance( $widget_ids )</tt>
: Strip out widget IDs for widgets which are no longer registered.

; <tt>call_widget_update( $widget_id )</tt>
: Find and invoke the widget update and control callbacks.

; <tt>wp_ajax_update_widget()</tt>
: Update widget settings asynchronously.

; <tt>capture_filter_pre_update_option( $new_value, $option_name, $old_value )</tt>
: Pre-filter captured option values before updating.

; <tt>capture_filter_pre_get_option( $value )</tt>
: Pre-filter captured option values before retrieving.

==Hooks==

* '''<tt>customizer_widgets_section_args</tt>'''
* '''<tt>is_wide_widget_in_customizer</tt>'''
* '''<tt>widget_customizer_setting_args</tt>'''

== Source File ==
<tt>WP_Customize_Widgets</tt> is located in {{Trac|wp-includes/class-wp-customize-widgets.php}}.


==Related==
{{Class Footer}}

[[Category:Classes]]