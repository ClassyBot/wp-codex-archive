{{Languages|
{{en|Functions File Explained}}
{{ja|Functions File Explained}}
}}

One way to change the default behaviors of WordPress is using a file named <tt>functions.php</tt>. It goes in your [[Using Themes|Theme's]] folder.

The functions file behaves like a [[Plugins|WordPress Plugin]], adding features and functionality to a WordPress site through PHP code. You can use it to call native PHP functions, WordPress functions, or to define your own functions.

Alternatively, you can place your custom PHP code into your own WordPress Plugin, or simply use a "functionality" plugin such as the [https://wordpress.org/plugins/code-snippets/ Code Snippets] plugin to manage your custom PHP snippets.

There are differences between using a plugin and a functions.php file.

A WordPress Plugin:

* Executes only when individually activated via the Plugins panel.
* Applies to all themes.
* Requires specific unique Header text.
* Is stored in <tt>wp-content/plugins</tt>, usually in a subdirectory.

A functions file:

* Executes only when in the currently activated theme's directory.
* Applies only to that theme. If the Theme is changed, the functionality is unused.
* Requires no unique Header text.
* Is stored with each Theme in the Theme's subdirectory in <tt>wp-content/themes</tt>.

Each theme has its own functions file, but only the <tt>functions.php</tt> in the active Theme affects how your site publicly displays. If your theme already has a functions file, you can add code to it. If not, you can create a plain-text file named <tt>functions.php</tt> to add to your theme's directory.

A [[Child_Themes|Child Theme]] can have its own <tt>functions.php</tt>. This child functions file can be used to augment or [[Child_Themes#Using_functions.php|replace]] the parent theme's functions.

With a functions file you can:

* Use [[Plugin_API#Hooks.2C_Actions_and_Filters|WordPress Hooks]], that vast collection of [[Plugin API/Action Reference|WordPress actions]] and [[Plugin API/Filter Reference|filters]] that can alter almost everything WordPress does. For example, with the <tt>[[Plugin API/Filter Reference/excerpt length|excerpt_length]]</tt> filter you can change your [[Function Reference/the excerpt#Control_Excerpt_Length_using_Filters|Post Excerpt]] length (from default of 55 words). 
* Enable WordPress features such as <tt>[[Function Reference/add theme support|add_theme_support()]]</tt> to turn on [[Post Thumbnails]], [[Post Formats]], and [[Navigation Menus]]. 
* Define functions you wish to re-use in multiple theme [[Stepping_Into_Templates|template]] files.

'''Beware:''' if a WordPress Plugin calls the same function, or filter, as you do in your functions file, the results can be unexpected -- even site-disabling.

Search the web for "WordPress functions.php" to find suggestions to enhance the functionality of your WordPress site. 

== Resources ==

* [https://wordpress.org/plugins/code-snippets/ The Code Snippets functionality plugin]
* [https://css-tricks.com/wordpress-functionality-plugins/ WordPress functionality plugins explained]
* [http://justintadlock.com/archives/2011/02/02/creating-a-custom-functions-plugin-for-end-users Creating a custom functions plugin]  (quick tutorial)
* [https://www.smashingmagazine.com/2011/09/how-to-create-a-wordpress-plugin/ Creating a WordPress plugin] (in-depth guide, examples)
* Order of execution of Functions file: [http://wordpress.stackexchange.com/questions/26537/between-functions-php-widgets-and-plugins-which-is-loaded-first Between functions.php, widgets and plugins, which is loaded first?]


[[Category:WordPress Lessons]]
[[Category:Design and Layout]]
[[Category:Templates]]


[[Category:New_page_created]]