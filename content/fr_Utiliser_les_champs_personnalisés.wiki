{{French Header}}
__TOC__
WordPress a la particularité de permettre aux utilisateurs d'assigner des champs personnalisables à un article. Ces informations supplémentaires arbitraires sont aussi connues sous le nom de ''meta-données''. Ces ''meta-données'' peuvent contenir des informations telles que :

* '''Humeur: Content'''
* '''Lecture actuelle: Cendrillon'''
* '''J'écoute: Rock Around the Clock'''
* '''Météo: Chaud et humide'''

Avec un peu de programmation supplémentaire, il est possible de gérer des actions plus complexes, comme utiliser une '''meta-donnée''' pour garder en mémoire une date d'expiration de l'article.

Ces meta-données sont gérées avec des paires '''clé/valeur'''. La '''clé''' correspond au nom de la méta-donnée. La '''valeur''' représente l'information que doit porter la méta-donnée dans la liste des informations associées à chaque article qui porte cette méta-donnée.

Il est possible d'associer plusieurs fois la même '''clé''' pour un même article. Par exemple, si vous lisez deux livres en même temps (peut-être un livre technique pour votre travail et un roman à la maison), vous pouvez créer une clé "lecture" que vous utilisez deux fois sur le même article, une pour chaque livre.

Voici un exemple de la façon dont ces informations peuvent apparaitre dans votre article :

<div style="border:1px solid blue; width:50%; margin: 20px; padding:20px">'''Lectures actuelles''': ''Calvin et Hobbes''
'''Humeur du jour''': ''Content et heureux''
</div>

==Utilisation==

Basé sur l'exemple ci-dessus, mettons-le en application. Nous allons ajouter deux champs personnalisables, le premier sera appelé "Lectures" et le second "Humeur du jour". Les instructions suivantes vous montreront comment ajouter ces informations à un article en utilisant les champs personnalisables.

# A partir de la page [[fr:Panneaux_Administration#.C3.89crire_un_Article|Écrire]], choisissez '''Édition avancée'''. Si vous utilisez l'écran d''''édition simple''', cherchez un bouton à côté du bouton '''Publier''' dont le libellé est '''Édition avancée &raquo;'''. Cliquez sur ce bouton et allez à l'écran d'édition avancée.
# Après avoir rédigé votre article, allez en bas de la section '''édition avancée''' et cherchez une zone appelée '''Champs personnalisables'''.
# Pour créer un nouveau '''champ personnalisable''' appelé "Lectures", tapez le texte "Lectures" dans la zone de texte '''clé'''.
# Cette nouvelle '''clé''' doit avoir une valeur associée, qui dans notre cas correspond au nom du livre que nous sommes en train de lire : "Calvin et Hobbes". Tapez "Calvin et Hobbes" dans la zone ''Valeur''.
# Cliquez sur le bouton '''Ajouter Champ Personnalisé''' pour sauvegarder ces informations pour cet article.

Pour ajouter votre "Humeur du jour", répétez le processus avec "Humeur du jour" dans la clé et la description de votre humeur dans la zone '''valeur''' puis cliquez sur '''Sauvegarder''' pour enregistrer cette information en même temps que l'article.

Sur votre article suivant, vous pouvez ajouter un nouveau livre et votre humeur à vos méta-données. Dans la section '''Champs personnalisables''', la zone '''clé''' contient maintenant une liste déroulante avec les clés saisies sur les articles précédents. Choissisez "Lectures" et saisissez le titre de votre nouveau livre dans la zone '''valeur'''. Cliquez sur '''Ajouter Champ personnalisable''' et répétez l'opération pour ajouter votre "Humeur du jour".

Il suffit de créer '''une seule fois''' une clé, ensuite vous pouvez assigner une valeur à cette clé pour tous vos articles, si vous le souhaitez. Vous pouvez aussi assigner plus d'une '''valeur''' à une clé pour le même article. C'est très pratique pour les personnes qui lisent plus d'un livre à la fois.

==Afficher les champs personnalisables==

Une fois les champs personnalisables créés, il faut les afficher afin que tout le monde puisse voir vos lectures et votre humeur du jour. Pour afficher le champ personnalisable de chaque article, il faut utiliser la balise de modèle <tt>[[Template_Tags/the_meta|the_meta()]]</tt> (en anglais). Cette balise doit être placée à l'intérieur de [[The Loop|la Boucle]] (en anglais) pour fonctionner. La plupart des gens ajoute cette balise <tt>the_meta()</tt> à la fin de leur article ou dans la [[Post Meta Data Section| section méta données de l'article]] (en anglais).

Voici un exemple simple d'utilisation de cette balise :

%%% <?php the_meta(); ?> %%%

à l'affichage de la page, le code devrait ressembler à ceci:

<pre>&lt;ul class='post-meta'&gt;
&lt;li&gt;&lt;span class='post-meta-key'&gt;Lectures:&lt;/span&gt; Calvin et Hobbes&lt;/li&gt;
&lt;li&gt;&lt;span class='post-meta-key'&gt;Humeur du jour:&lt;/span&gt; Content et Heureux&lt;/li&gt;
&lt;/ul&gt;</pre>

La balise de modèle met automatiquement toutes les meta-données personnalisées dans une liste dont la classe CSS s'appelle <tt>post-meta</tt>. La '''clé''' est placée dans une balise HTML <tt>span</tt> de classe CSS <tt>post-meta-key</tt> ainsi vous pouvez l'habiller via la feuille de style. Toutes ces données sont présentées dans une liste à puce.

Pour habiller la liste <tt>post-meta</tt>, changez les caractéristiques dans la feuille de style. Pour l'instant, ajoutons quelques effets à notre exemple. Les éléments de la feuille de style peuvent ressembler à ceci:

<pre>.post-meta {font-variant: small-caps; color: maroon; }
.post-meta-key {color: green; font-weight: bold; font-size: 110%; }</pre>

<div style="border:1px solid blue; width:50%; margin: 20px; padding:20px">
* <span style="font-size:110%; color: green; font-weight:bold; font-variant: small-caps">Lectures</span>: <span style="font-style:italic; color: maroon; font-variant: small-caps">Calvin et Hobbes</span>
* <span style="font-size:110%; color: green; font-weight:bold; font-variant: small-caps">Humeur du jour</span>: <span style="font-style:italic; color: maroon; font-variant: small-caps">Content et Heureux</span>
</div>

Il y a aussi WordPress Plugins de [http://wordpress.org/extend/plugins/ Official WordPress Plugin Directory] (en anglais) qui ajoutent des fonctions utiles pour l'affichage de ces méta-données. Recherchez  [http://www.google.com/search?hl=en&q=custom+fields+plugin+wordpress&btnG=Google+Search Custom Field plugins sur Google] et vous en trouverez encore plus.

==Champs personnalisables : Techniques Avancées==

Ci-dessous vous trouverez des techniques avancées pour utiliser et paramétrer les méta-données et champs personnalisables.

===Récupérer les champs personnalisables===
Pour récupérer les méta-données, utilisez la fonction PHP <tt>get_post_meta()</tt>:

%%% get_post_meta($post_id, $clé, $unique); %%%

*<tt>$post_id</tt> est le numéro identifiant l'article dont vous voulez récupérer les méta-données. Utilisez <tt>$post->ID</tt> pour obtenir ce numéro d'identifiant.
*<tt>$clé</tt> est la chaine de caractère qui contient le nom de la méta-donnée dont vous voulez récupérer la valeur.
*<tt>$unique</tt> peut être soit <tt>true</tt> (vrai) ou <tt>false</tt> (faux). Si la valeur est vrai, la fonction renverra un résultat simple sous la forme d'une '''chaîne de caractère'''. Si la valeur est fausse ou non précisée, la fonction renverra un '''tableau''' de champs personnalisables.

====Détails d'implémentation====
Les méta-informations des articles sont stockées dans une table particulière, <tt>$wpdb->postmeta</tt>. Cette table contient quatre champs:

:<tt>meta_id</tt>: Identifiant unique pour chaque entrée<br />
:<tt>post_id</tt>: L'identifiant de l'article pour cette méta-donnée<br />
:<tt>meta_key</tt>: Le nom de la '''clé'''<br />
:<tt>meta_value</tt>: La valeur associée à cette clé<br />

Les valeurs de cette table sont stockées dans un tableau multi-dimensionnel structuré appelé <tt>$post_meta_cache</tt>, après la récupération des articles dans le tableau <tt>$posts</tt> dans <tt>wp-blog-header.php</tt>. Cette variable ne contient que les valeurs associées aux articles récupérés pour la page courante. La structure de ce tableau se présente comme ceci:

  [
    postid1 => [
      [
        clé1 => [valeur1, valeur2, ...],
        clé2 => [valeur1, valeur2, ...],
        ...
      ],
    postid2 => [ ... ],
    ...
  ]

Ainsi, pour récupérer les valeurs de "Lectures" pour l'article 256, vous devrez utilisez le code PHP suivant:

%%% // Fetch an array of values for what I'm reading: %%%
%%% $readinglist = $post_meta_cache[256]['Lectures']; %%%

:Ne pas oublier que <tt>$readinglist</tt> contient un tableau et non une chaîne de caractères.
:A partir de WordPress 2.1, $post_meta_cache n'est plus prérempli. Vous pouvez récupérer les valeurs grâce aux fonctions mentionnées plus bas.

===Fonctions PostMeta===

====Fonctions internes====

Ces fonctions sont faites pour être appelées à l'intérieur de la boucle WordPress, et retournent toutes des tableaux.

;<tt>get_post_custom()</tt>: Récupère toutes les paires clé/valeur pour l'article courant.
;<tt>get_post_custom_keys()</tt>: Récupère la liste de toutes les clés pour l'article courant.
;<tt>get_post_custom_values($clé)</tt>: Récupère la liste des valeurs pour une clé particulière pour l'article courant.
;<tt>get_post_meta($post_id, $key, $single = false)</tt>: WordPress 1.5 et plus, cette fonction récupère les informations sans passer par le cache (<tt>$post_meta_cache</tt>). Cette fonction requiert le numéro de l'article et la clé à récupérer pour un usage en PHP. A noter que si le paramètre <tt>$single</tt> est passé avec la valeur TRUE, la fonction renvoie le premier résultat sous forme d'une chaîne et non un tableau.

====Fonctions de thème====

Au moment de la rédaction de cette page, il n'existe qu'une fonction de thème.

;<tt>[[Template Tags/the_meta|the_meta()]]</tt>: Affiche une liste à puce contenant les méta-données avec la classe CSS ''post-meta'' pour l'élement UL et la classe CSS ''post-meta-key'' pour chaque élément LI.

Nous esperons que les développeurs indépendants vont fournir beaucoup d'usages intéressants pour ces méta-données sous la forme de plugins. La fonction de thème <tt>the_meta()</tt> n'est qu'un exemple très simple.

[[fr:Accueil|Retour à la Page d'Accueil]]

[[Category:Getting Started]]
[[Category:Design and Layout]]
[[Category:WordPress Lessons]]
[[Category:Advanced Topics]]