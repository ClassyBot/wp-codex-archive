==Description==
Since <b>version [[Version_3.4|3.4]]</b>, the <code>image_resize_dimensions</code> filter is used to filter the thumbnail and alternative sizes dimensions of image assets during resizing operations. This enables the override of WordPress default behavior on image resizing, including the thumbnail cropping.

A plugin (or theme) can register as an image resizing filter with the code:

<code><?php add_filter( 'image_resize_dimensions', 'filter_function_name', 10, 5 ) ?></code>

Where 'filter_function_name' is the function WordPress should call when the image resizing is being executed. Note that the filter function <b>must</b> return an array matching the parameters to <code>imagecopyresampled()</code>, <b>or</b> <code>false</code> if the resizing is impossible, or should not occur, <b>or</b> <code>null</code> to fallback to WordPress default behavior.

'''filter_function_name''' should be unique function name. It cannot match any other function name already declared.

== Parameters ==
{{Parameter|$payload |null|Variable to be filtered.}}
{{Parameter|$orig_w |integer|Original image width in pixels.}}
{{Parameter|$orig_h |integer|Original image height in pixels.}}
{{Parameter|$dest_w |integer|Destination image width in pixels.}}
{{Parameter|$dest_h |integer|Destination image height in pixels.}}
{{Parameter|$crop |boolean|Flag to enable image croping.}}

== Example ==
This example filters the image resizing dimensions to force WordPress to crop thumbnails by keeping the top of the image, instead of the default center.
<pre>
add_filter( 'image_resize_dimensions', 'custom_image_resize_dimensions', 10, 6 );
function custom_image_resize_dimensions( $payload, $orig_w, $orig_h, $dest_w, $dest_h, $crop ){

	// Change this to a conditional that decides whether you 
	// want to override the defaults for this image or not.
	if( false )
		return $payload;

	if ( $crop ) {
		// crop the largest possible portion of the original image that we can size to $dest_w x $dest_h
		$aspect_ratio = $orig_w / $orig_h;
		$new_w = min($dest_w, $orig_w);
		$new_h = min($dest_h, $orig_h);

		if ( !$new_w ) {
			$new_w = intval($new_h * $aspect_ratio);
		}

		if ( !$new_h ) {
			$new_h = intval($new_w / $aspect_ratio);
		}

		$size_ratio = max($new_w / $orig_w, $new_h / $orig_h);

		$crop_w = round($new_w / $size_ratio);
		$crop_h = round($new_h / $size_ratio);

		$s_x = floor( ($orig_w - $crop_w) / 2 );
		$s_y = 0; // [[ formerly ]] ==> floor( ($orig_h - $crop_h) / 2 );
	} else {
		// don't crop, just resize using $dest_w x $dest_h as a maximum bounding box
		$crop_w = $orig_w;
		$crop_h = $orig_h;

		$s_x = 0;
		$s_y = 0;

		list( $new_w, $new_h ) = wp_constrain_dimensions( $orig_w, $orig_h, $dest_w, $dest_h );
	}

	// if the resulting image would be the same size or larger we don't want to resize it
	if ( $new_w >= $orig_w && $new_h >= $orig_h )
		return false;

	// the return array matches the parameters to imagecopyresampled()
	// int dst_x, int dst_y, int src_x, int src_y, int dst_w, int dst_h, int src_w, int src_h
	return array( 0, 0, (int) $s_x, (int) $s_y, (int) $new_w, (int) $new_h, (int) $crop_w, (int) $crop_h );

}
</pre>

==Triggers==
As of [[Version 3.6|WordPress 3.6]] this hook is applied in the following locations:

* {{Trac|wp-includes/class-wp-image-editor-gd.php|trunk|155}} - on line 155
* {{Trac|wp-includes/class-wp-image-editor-imagick.php|trunk|221}} - on line 221
* {{Trac|wp-includes/media.php|trunk|328}} - in <tt>image_resize_dimensions()</tt> on line 328

This hook may also frequently be applied by plugins.

==See Also==
* Article: [[Plugin_API#Create_a_Filter_Function|Creating a Filter Function]]
* Function: [[Function_Reference/add_filter|add_filter()]]
* Function: [[Function_Reference/image_resize_dimensions|image_resize_dimensions()]]

[[Category:Filters]]