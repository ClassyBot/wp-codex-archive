==Description==
This filter allows you to add translations for your Tinymce plugin.

==Example==
<pre>
function my_custom_tinymce_plugin_add_locale($locales) {
    $locales ['My-Custom-Tinymce-Plugin'] = plugin_dir_path ( __FILE__ ) . 'my-custom-tinymce-plugin-langs.php';
    return $locales;
}
add_filter('mce_external_languages', 'my_custom_tinymce_plugin_add_locale');
</pre>
Replace <tt>My-Custom-Tinymce-Plugin</tt> with your identifier of your plugin and make sure the path to <tt>my-custom-tinymce-plugin-langs.php</tt> is correct.

===Translating strings with <tt>mce_external_languages</tt>===
Create a new file, called something like <tt>my-custom-tinymce-plugin-langs.php</tt> and open it. Insert the following code.
<pre>
// This file is based on wp-includes/js/tinymce/langs/wp-langs.php

if ( ! defined( 'ABSPATH' ) )
    exit;

if ( ! class_exists( '_WP_Editors' ) )
    require( ABSPATH . WPINC . '/class-wp-editor.php' );

function my_custom_tinymce_plugin_translation() {
    $strings = array(
        'somestring' => __('My custom Tinymce plugin', 'textdomain'),
    );
    $locale = _WP_Editors::$mce_locale;
    $translated = 'tinyMCE.addI18n("' . $locale . '.my_custom_tinymce_plugin", ' . json_encode( $strings ) . ");\n";

     return $translated;
}

$strings = my_custom_tinymce_plugin_translation();
</pre>
====What the code does====
The code first checks if the file is included by WordPress. If not, it exits. Next, it checks if the class <tt>_WP_Editors</tt> exists. If not, the class is loaded (from {{Trac|wp-includes/class-wp-editor.php}}).

We wrap the translation in a function (this to make sure there are no global variables) called <tt>my_custom_tinymce_plugin_translation</tt> (make sure your function is unique). This is where you can translate your strings with a associative array. The key in this array is also the key you will use later on to get the translation. Then we retrieve the locale for the editor and we build some JavaScript. We use the <tt>tinyMCE.addI18n</tt> JavaScript function to add the translated strings to the editor. Some information about the arguments:
; <tt>"' . $locale . '.my_custom_tinymce_plugin"</tt> : This is the "textdomain" of the translation.  It should look rendered like <tt>"en.my_custom_tinymce_plugin"</tt> (the language, in this case <tt>en</tt>, is set to the value of the variable <tt>$locale</tt>). We use <tt>my_custom_tinymce_plugin</tt> as "textdomain".
; <tt>json_encode( $strings )</tt> : This converts the translated strings to JavaScript.
That bit of JavaScript code is returned by the function. 

You can see that on the last line of the file, our function <tt>my_custom_tinymce_plugin_translation</tt> is called and that the translated strings are saved in the global variable <tt>$strings</tt>. (The variable has to be called <tt>$strings</tt>, or it won't work.

For more examples of a file with translations, see {{Trac|wp-includes/js/tinymce/langs/wp-langs.php}}

===Load the translations===
Next, use the next code to make sure WordPress loads the translations
<pre>
function my_custom_tinymce_plugin_add_locale($locales) {
    $locales ['My-Custom-Tinymce-Plugin'] = plugin_dir_path ( __FILE__ ) . 'my-custom-tinymce-plugin-langs.php';
    return $locales;
}
add_filter('mce_external_languages', 'my_custom_tinymce_plugin_add_locale');
</pre>

===Use the translations in your Javascript===
<pre>
// ed is the current tinymce editor.
ed.getLang('my_custom_tinymce_plugin.somestring'); 
</pre>
This will return the translation of "My custom Tinymce plugin".

==Source==
*{{Trac|wp-includes/class-wp-editor.php}}
*{{Trac|wp-includes/js/tinymce/langs/wp-langs.php}}
*{{Trac|wp-includes/class-wp-editor.php|tags/{{CurrentVersion}}|222}} (for more info about <tt>mce_external_languages</tt>)

== Related ==
{{TinyMCE API}}