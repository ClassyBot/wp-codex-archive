The filter accepts an array of arrays. The outer array has a key that is the name of the schedule or for example 'weekly'. The value is an array with two keys, one is 'interval' and the other is 'display'.

The 'interval' is a number in seconds of when the cron job should run. So for 'hourly', the time is 3600 or 60*60. For weekly, the value would be 60*60*24*7 or 604800. The value of 'interval' would then be 604800.

The 'display' is the description. For the 'weekly' key, the 'display' would be <code>__('Once Weekly')</code>.

'''Why is this important?'''<br />
When scheduling your own actions to run using the WordPress Cron service, you have to specify which interval WordPress should use.  WordPress has its own, limited, default set of intervals, or "schedules", including 'hourly', 'twicedaily', and 'daily'.  This filter allows you to add your own intervals to the default set.

For your plugin, you will be passed an array, you can easily add a weekly schedule by doing something like:
<code>
 function my_add_weekly( $schedules ) {
 	// add a 'weekly' schedule to the existing set
 	$schedules['weekly'] = array(
 		'interval' => 604800,
 		'display' => __('Once Weekly')
 	);
 	return $schedules;
 }
 add_filter( 'cron_schedules', 'my_add_weekly' ); 
</code>
Adding multiple intervals works similarly:
<code>
 function my_add_intervals($schedules) {
 	// add a 'weekly' interval
 	$schedules['weekly'] = array(
 		'interval' => 604800,
 		'display' => __('Once Weekly')
 	);
 	$schedules['monthly'] = array(
 		'interval' => 2635200,
 		'display' => __('Once a month')
 	);
 	return $schedules;
 }
 add_filter( 'cron_schedules', 'my_add_intervals'); 
</code>
Be sure to add your schedule to the passed array, as shown in the example.  If you simply return only your own schedule array then you will potentially delete schedules created by other plugins.

{{Stub}}
[[Category:Filters]]
[[Category:New_page_created]]