== Description ==

<code>quick_edit_custom_box</code> is an action that lets a plugin print inputs for custom columns when quick editing. This action is called one time for each custom column. Custom columns are added with the [[Plugin_API/Filter_Reference/manage_edit-post_type_columns|manage_edit-${post_type}_columns]] filter. To save the data from the custom inputs, hook the [[Plugin API/Action Reference/save_post|save_post]] action.

== Parameters ==
A registered action function is passed the following parameters.

{{Parameter|$column_name|string|The name of the column to edit.}}
{{Parameter|$post_type|string|The type of the posts.}}

Note that the action function is passed neither the post ID nor any existing value for the column.

== Examples ==

=== Creating Inputs ===
<code><pre>add_action( 'quick_edit_custom_box', 'display_custom_quickedit_book', 10, 2 );

function display_custom_quickedit_book( $column_name, $post_type ) {
    static $printNonce = TRUE;
    if ( $printNonce ) {
        $printNonce = FALSE;
        wp_nonce_field( plugin_basename( __FILE__ ), 'book_edit_nonce' );
    }

    ?>
    <fieldset class="inline-edit-col-right inline-edit-book">
      <div class="inline-edit-col column-<?php echo $column_name; ?>">
        <label class="inline-edit-group">
        <?php 
         switch ( $column_name ) {
         case 'book_author':
             ?><span class="title">Author</span><input name="book_author" /><?php
             break;
         case 'inprint':
             ?><span class="title">In Print</span><input name="inprint" type="checkbox" /><?php
             break;
         }
        ?>
        </label>
      </div>
    </fieldset>
    <?php
}
</pre></code>

=== Saving Data ===
Data entered in custom inputs can be saved by hooking the [[Plugin API/Action Reference/save_post|save_post]] action.
<code><pre>add_action( 'save_post', 'save_book_meta' );

function save_book_meta( $post_id ) {
    /* in production code, $slug should be set only once in the plugin,
       preferably as a class property, rather than in each function that needs it.
     */
    $slug = 'book';
    if ( $slug !== $_POST['post_type'] ) {
        return;
    }
    if ( !current_user_can( 'edit_post', $post_id ) ) {
        return;
    }
    $_POST += array("{$slug}_edit_nonce" => '');
    if ( !wp_verify_nonce( $_POST["{$slug}_edit_nonce"],
                           plugin_basename( __FILE__ ) ) )
    {
        return;
    }

    if ( isset( $_REQUEST['book_author'] ) ) {
        update_post_meta( $post_id, 'author', $_REQUEST['book_author'] );
    }
    # checkboxes are submitted if checked, absent if not
    if ( isset( $_REQUEST['inprint'] ) ) {
        update_post_meta($post_id, 'inprint', TRUE);
    } else {
        update_post_meta($post_id, 'inprint', FALSE);
    }
}
</pre></code>

=== Setting Existing Values ===
Populating inputs with existing values takes a bit of trickery. One can't simply access the <code>$post</code> global because when this action is run, <code>$post</code> refers only to the last post (the quick edit inputs are created only once, and cloned as needed when quick editing a column). There are two parts: storing the data on the page and hooking <code>inlineEditPost.edit</code> to set the input values. If the quick-edit columns are also displayed as [[Plugin_API/Filter_Reference/manage_edit-post_type_columns|custom columns]], the data is already in the table. Otherwise, it can be added as hidden elements to an existing custom column.

Hooking <code>inlineEditPost.edit</code> must be done in a JS script, loaded after {{Trac|wp-admin/js/inline-edit-post.js}}. The original method is saved and replaced with a new one which calls the original. This particular technique is a simple example of [http://en.wikipedia.org/wiki/Aspect-oriented_programming aspect-oriented programming].

<ul>
<li>PHP:
<code><pre>/* load script in the footer */
if ( ! function_exists('wp_my_admin_enqueue_scripts') ):
function wp_my_admin_enqueue_scripts( $hook ) {

	if ( 'edit.php' === $hook &&
		isset( $_GET['post_type'] ) &&
		'book' === $_GET['post_type'] ) {

		wp_enqueue_script( 'my_custom_script', plugins_url('scripts/admin_edit.js', __FILE__),
			false, null, true );

	}

}
endif;
add_action( 'admin_enqueue_scripts', 'wp_my_admin_enqueue_scripts' );


/* example of how an existing value can be stored in the table */
add_action( 'manage_book_posts_custom_column' , 'custom_book_column', 10, 2 );
function custom_book_column( $column, $post_id ) {
    switch ( $column ) {
      case 'inprint':
        // the !! means translate the following item to a boolean value
        if ( !!get_post_meta( $post_id , 'inprint' , true ) ) {
            $checked = 'checked';
        } else {
            $checked = '';
        }
        echo "<input type='checkbox' readonly $checked/>";
        break;

      case 'book_author':
        # ...
    }
}
</pre></code></li>

<li><code>scripts/admin_edit.js</code>:
<code><pre>(function($) {

	// we create a copy of the WP inline edit post function
	var $wp_inline_edit = inlineEditPost.edit;

	// and then we overwrite the function with our own code
	inlineEditPost.edit = function( id ) {

		// "call" the original WP edit function
		// we don't want to leave WordPress hanging
		$wp_inline_edit.apply( this, arguments );

		// now we take care of our business

		// get the post ID
		var $post_id = 0;
		if ( typeof( id ) == 'object' ) {
			$post_id = parseInt( this.getId( id ) );
		}

		if ( $post_id > 0 ) {
			// define the edit row
			var $edit_row = $( '#edit-' + $post_id );
			var $post_row = $( '#post-' + $post_id );

			// get the data
			var $book_author = $( '.column-book_author', $post_row ).text();
			var $inprint = !! $('.column-inprint>*', $post_row ).prop('checked');

			// populate the data
			$( ':input[name="book_author"]', $edit_row ).val( $book_author );
			$( ':input[name="inprint"]', $edit_row ).prop('checked', $inprint );
		}
	};

})(jQuery);</pre></code>
</li>
</ul>

=== Complete Code Samples ===
* [http://wpdreamer.com/2012/03/manage-wordpress-posts-using-bulk-edit-and-quick-edit/ Manage WordPress Posts Using Bulk Edit and Quick Edit]

== Change Log ==

* Since [[Version 2.7|2.7]]
* Moved to {{Trac|wp-admin/includes/class-wp-terms-list-table.php}} in [[Version 3.1|3.1]]

== Source File ==

* ([[Version 2.7|2.7]] - [[Version 3.0.6|3.0.6]]) triggered by [[Function Reference/inline_edit_row|inline_edit_row]] and [[Function Reference/inline_edit_term_row|inline_edit_term_row]] in {{Trac|wp-admin/includes/template.php|tags/3.0}}
* ([[Version 3.1|3.1]] -) triggered by [[Class Reference/WP_Posts_List_Table#inline_edit|WP_Posts_List_Table->inline_edit]] in {{Trac|wp-admin/includes/class-wp-posts-list-table.php}}, and by [[Class Reference/WP_Terms_List_Table#inline_edit|WP_Terms_List_Table->inline_edit]] in {{Trac|wp-admin/includes/class-wp-terms-list-table.php}}.

== Related ==

=== Actions ===
* Adding columns to post lists
** [[Plugin API/Action Reference/manage_pages_custom_column|manage_pages_custom_column]]
** [[Plugin API/Action Reference/manage_posts_custom_column|manage_posts_custom_column]]
** [[Plugin API/Action Reference/manage_$post_type_posts_custom_column|manage_${post_type}_posts_custom_column]] 
** [[Plugin API/Action Reference/quick_edit_custom_box|quick_edit_custom_box]]
** [[Plugin API/Action Reference/bulk_edit_custom_box|bulk_edit_custom_box]]
* Saving
** [[Plugin API/Action Reference/edit_post|edit_post]]
** [[Plugin API/Action Reference/save_post|save_post]]
** [[Plugin API/Action Reference/wp_insert_post|wp_insert_post]]

=== Filters ===
* [[Plugin API/Filter Reference/manage_pages_columns|manage_pages_columns]]
* [[Plugin API/Filter Reference/manage_posts_columns|manage_posts_columns]]
* [[Plugin API/Filter Reference/manage_edit-post_type_columns|manage_edit-${post_type}_columns]]
* [[Plugin API/Filter Reference/manage_$post_type_posts_columns|manage_${post_type}_posts_columns]]

[[Category:Actions]]