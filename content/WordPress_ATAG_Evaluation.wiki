{{Oldversion}}
= ATAG assessment of WordPress =

by Joe Clark

This document assesses [http://WordPress.org WordPress] 2.01 alpha against the [http://www.w3.org/TR/ATAG10/ Authoring Tool Accessibility Guidelines 1.0] (ATAG, pronounced “''ay''tag”). You may add this document to the WordPress support wiki and use it in the normal fashion of a wiki, for collaborative editing.

I didn’t link to every single guideline and [http://www.w3.org/TR/ATAG10-TECHS/ technique] in the documents, as that would have doubled the time spent. They are, however, locatable.

== Guideline 1. Support accessible authoring practices ==

 <blockquote class="blue">
<span class="checkpoint">1.1</span> Ensure that the author can produce accessible content in the markup language(s) supported by the tool.
 </blockquote>
Partial pass.
<blockquote class="blue">
=== Techniques ===
* Ensure the tool supports all the structural features of the supported languages.
 </blockquote>
If by “support” you mean there’s a button on the toolbar for it, no. (All you’ve got there are <code>b</code>, <code>i</code>, <code>a</code>, <code>blockquote</code>, <code>del</code>, <code>ins</code>, <code>img</code>, <code>ul</code>, <code>ol</code>, <code>li</code>, and <code>code</code>.) If by “support” you mean the next criterion –
<blockquote class="blue">
* Allow the author to directly edit the source markup (so knowledgeable authors can ensure accessible content).
 </blockquote>
– then yes. I’d give this a partial pass. It’s a clean fail for people who only use the toolbar but a pass for those who write their own HTML. (But those people only debatably need a blogging tool.)
<blockquote class="blue">
* When an extended (superset) or simplified (subset) markup language is supported, ensure that the accessibility features in the base language are still available.
 </blockquote>
WordPress outputs XHTML 1.0 Transitional by default. You don’t get another option out of the box, though obviously it’s hackable to produce Strict or, if you want to go totally nuts, HTML. Not applicable.
<blockquote class="blue">
* Allow the addition of equivalent alternatives for all supported image formats that allow text content, including PNG, SVG, WebCGM, JPEG, and GIF.
 </blockquote>
Prompts you for <code>alt</code> text automatically. Pass for that interpretation. WordPress does not edit PNG or SVG or whatever else, so that’s inapplicable.
<blockquote class="blue">
* Enable the author to produce metadata that can be used to construct an accessible version of the output. For example, when producing image formats that do not allow the inclusion of alternative information within them, use Dublin Core metadata to incorporate description, title information, or “foaf” metadata to identify people depicted in images.
 </blockquote>
I don’t think this comes up in real-world blogging (when do you use “image formats that do not allow the inclusion of alternative information”?), so not applicable. You can use <code>foaf</code> only if you write out your own HTML or use a [http://www.cozy.org/wordpress/foaf-header.html plug-in].
<blockquote class="blue">
* Notify the author, if a given output format is not accessible (so they can decide to use a different format).
 </blockquote>
WordPress doesn’t output inaccessible formats per se; it isn’t an editor for PNG/SVG/PDF or whatever else. Not applicable.
 <blockquote class="blue">
<span class="checkpoint">1.2</span> Ensure that the tool preserves all accessibility information during authoring, transformations, and conversions.
 </blockquote>
It doesn’t throw things away, but early versions had a hard time with certain unusual elements like <code>caption</code>, adding spurious linebreaks that destroyed validation. Pass for current version.
<blockquote class="blue">
=== Techniques ===
* This checkpoint covers systems that digest documents and reconstitute them in standardized formats.
 </blockquote>
Like WordPress.
<blockquote class="blue">
* Ensure that the tool preserves all the elements and attributes defined in the relevant specification(s) even if it is unable to render them in a publishing view or preview mode.
 </blockquote>
Pass.
<blockquote class="blue">
* Allow the author to decide whether or not to preserve unrecognized markup (since it might be related to accessibility).
* Consider explaining automatic changes made by the tool to the author.
 </blockquote>
I don’t know of any, except for the option to “automatically correct invalidly-nested XHTML automatically” (Dashboard → Options → Writing). If you select that, then the tool ''has'' explained it to you. Both checkpoints not applicable, I suppose, since the intent here is to cover actions that the tool takes without your initial approval.
<blockquote class="blue">
* Allow authors to edit document conversion templates to specify the way presentation conventions should be converted into structural markup.
 </blockquote>
Pass.
<blockquote class="blue">
* Ensure that changes to a document’s graphical layout do not reduce readability when rendered serially. For example, confirm the linearized reading order with the author.
 </blockquote>
Irrelevant in the modern world; WordPress doesn’t use tables for layout, and CSS layouts are too complex to be reduced to an issue of linear reading. Not applicable.
<blockquote class="blue">
Some examples of conversion best practice include:
* Avoid transforming text into images. Use style sheets for presentation control, or use an XML application such as Scalable Vector Graphics that keeps the text as text. If this is not possible, ensure that the text is available as equivalent text for the image.
 </blockquote>
Not applicable.
<blockquote class="blue">
* When importing images with associated descriptions into a markup document, make the descriptions available through appropriate markup.
 </blockquote>
I suppose this means <code>longdesc</code>. Fail.
<blockquote class="blue">
* When transforming a table to a list or list of lists, ensure that table headings are transformed into headings and that summary or caption information is retained as rendered content.
 </blockquote>
Not applicable. WordPress doesn’t do that.
<blockquote class="blue">
* When converting linked elements (i.e. footnotes, endnotes, call-outs, annotations, references, etc.) provide them as inline content or maintain two-way linking.
 </blockquote>
From what would you be converting such elements in a blogging tool? Not applicable.
<blockquote class="blue">
* When converting from an unstructured word-processor format to markup, ensure that headings and list items are transformed into appropriate structural markup (appropriate level of heading or type of list, etc.).
 </blockquote>
Fail. If you copy and paste text, you don’t get semantically-correct headings automatically.
<blockquote class="blue">
* When generating a natural language translation of text, produce the simplest and clearest possible use of the new language.
 </blockquote>
Not applicable and, in fact, misguided, pointless, condescending, controlling, and intrusive.
 <blockquote class="blue">
<span class="checkpoint">1.3</span> Ensure that when the tool automatically generates markup it conforms to the W3C’s Web Content Accessibility Guidelines 1.0.
 </blockquote>
On its face, a pass. WordPress uses valid XHTML by default. If you want to get picky, then suddenly we’re talking about semantics and not validation, a concept with no real legs at the time ATAG was written.
Also:
<blockquote class="blue">
<span class="checkpoint">1.4</span> Ensure that templates provided by the tool conform to the Web Content Accessibility Guidelines 1.0.
 </blockquote>
I view these as almost equivalent given that WordPress is all about templates. Templates generate content.
For both the above, WordPress flunks the ''following'' specific techniques when using the toolbar. If you’re writing your own HTML, it’s your own problem.
<blockquote class="blue">
* [http://www.w3.org/TR/WCAG10/wai-pageauth.html#tech-redundant-server-links '''WCAG 1.2''' (P1) Provide redundant text links for server-side image map areas.]
* [http://www.w3.org/TR/WCAG10/wai-pageauth.html#tech-auditory-descriptions '''WCAG 1.3''' (P1) Provide <ins class="ed">[audio]</ins> descriptions for multimedia.]
* [http://www.w3.org/TR/WCAG10/wai-pageauth.html#tech-synchronize-equivalents '''WCAG 1.4''' (P1) Provide synchronized equivalent alternatives for time-based multimedia.]
* [http://www.w3.org/TR/WCAG10/wai-pageauth.html#tech-redundant-client-links '''WCAG 1.5''' (P3) Provide redundant text links for client-side image map areas.]
* '''[http://www.w3.org/TR/WCAG10/wai-pageauth.html#tech-color-convey WCAG 2.1]'''[http://www.w3.org/TR/WCAG10/wai-pageauth.html#tech-color-convey (P1) Ensure information provided with color is also available without color.]
* [http://www.w3.org/TR/WCAG10/wai-pageauth.html#tech-color-contrast '''WCAG 2.2''' (Images: P2, Text: P3) Use sufficient foreground/background contrast.]
* [http://www.w3.org/TR/WCAG10/wai-pageauth.html#tech-logical-headings '''WCAG 3.5''' (P2) Use header elements.]
* [http://www.w3.org/TR/WCAG10/wai-pageauth.html#tech-identify-changes '''WCAG 4.1''' (P1) Identify natural language changes.]
* [http://www.w3.org/TR/WCAG10/wai-pageauth.html#tech-expand-abbr '''WCAG 4.2''' (P3) Specify abbreviation or acronym expansions.]
* [http://www.w3.org/TR/WCAG10/wai-pageauth.html#tech-table-headers '''WCAG 5.1''' (P1) Identify data table row and column headers.]
* [http://www.w3.org/TR/WCAG10/wai-pageauth.html#tech-table-structure '''WCAG 5.2''' (P1) Associate data cells and header cells in complex data tables.]
* [http://www.w3.org/TR/WCAG10/wai-pageauth.html#tech-table-summaries '''WCAG 5.5''' (P3) Provide summaries for tables.]
* [http://www.w3.org/TR/WCAG10/wai-pageauth.html#tech-abbreviate-labels '''WCAG 5.6''' (P3) Provide abbreviations for table header labels.]
* '''[http://www.w3.org/TR/WCAG10/wai-pageauth.html#tech-tab-order WCAG 9.4]'''[http://www.w3.org/TR/WCAG10/wai-pageauth.html#tech-tab-order (P3) Create a logical tab order.]
* [http://www.w3.org/TR/WCAG10/wai-pageauth.html#tech-unassociated-labels '''WCAG 10.2''' (P2) Implicitly associate labels with form controls.]
* [http://www.w3.org/TR/WCAG10/wai-pageauth.html#tech-group-information '''WCAG 12.3''' (P2) Divide large blocks of information into manageable groups.]
* [http://www.w3.org/TR/WCAG10/wai-pageauth.html#tech-associate-labels '''WCAG 12.4''' (P2) Associate labels explicitly with their controls.]
* [http://www.w3.org/TR/WCAG10/wai-pageauth.html#tech-use-metadata '''WCAG 13.2''' (P2) Provide metadata to pages and sites.]
* [http://www.w3.org/TR/WCAG10/wai-pageauth.html#tech-group-links '''WCAG 13.6''' (P3) Group, identify, and provide a way to bypass related links.]
 </blockquote>
''All'' the rest either WordPress passes or are irrelevant or superseded by better practices. The failures listed above may be out of scope for a blogging tool.

== Guideline 2. Generate standard markup ==

 <blockquote class="blue">
<span class="checkpoint"> 2.1</span> Use the latest versions of W3C Recommendations when they are available and appropriate for a task.
 </blockquote>
Pass. XHTML is the current version of (<var></var>)HTML.
<blockquote class="blue">
=== Techniques ===
* When creating documents or markup languages, make full use of W3C Recommendations.... For example, use MathML for mathematical Web content and XHTML, MathML, and DOM scripting to implement dynamic-interactive spreadsheets.
 </blockquote>
Not applicable.
<blockquote class="blue">
* In some cases a W3C Recommendation–formatted version may be offered in addition to a proprietary format. Tools that dynamically generate Web content may use HTTP content negotiation to facilitate this.
 </blockquote>
Not applicable. Also quite incomprehensible.
<blockquote class="blue">
* Do not publish Web content in markup languages that do not allow for equivalent alternative information to be included for media-specific presentations (such as images or video, sound, etc.).
 </blockquote>
Not applicable.
<blockquote class="blue">
* Although markup languages and formats that become W3C Recommendations after an authoring tool’s development cycle permit input are not considered “available” in time, modular design of tools provides for new markup languages and formats to be supported late in the development cycle or even after deployment.
 </blockquote>
This isn’t a technique. It’s advice. Or wishful thinking.
 <blockquote class="blue">
<span class="checkpoint">2.2</span> Ensure that the tool automatically generates valid markup.
 </blockquote>
Pass.
<blockquote class="blue">
=== Techniques ===
* Ensure that the markup produced by the tool, in any of its supported languages, is valid.
 </blockquote>
Pass.
<blockquote class="blue">
* Publish proprietary language specifications or DTD’s on the Web, to allow documents to be validated.
 </blockquote>
Not applicable.
<blockquote class="blue">
* Use namespaces and schemas to make documents that can be automatically transformed to a known markup language.
 </blockquote>
Not applicable, also incomprehensible.
 <blockquote class="blue">
<span class="checkpoint">2.3</span> If markup produced by the tool does not conform to W3C specifications, inform the author.
=== Techniques ===
* To minimally meet this checkpoint, a tool must inform the author that the markup produced does not conform to W3C specifications (e.g. statement on the saving dialog, an alert that is displayed following a save or inline highlighting through the use of style sheets, etc.).
 </blockquote>
Fail, I suppose. If you select “automatically correct invalidly-nested XHTML automatically” in your Options, then this is not applicable. If you don’t, WordPress fails.
<blockquote class="blue">
* If the tool produces inaccessible markup, whether it is valid or not, see ATAG10 4.1 for checking techniques.
 </blockquote>
Not applicable, and also much too general. Really, this is like saying “If you meet all our criteria, we may nonetheless force you to go back and fix all your content.” In a very indirect and impotent way, this criterion is trying to say that a valid document might be [http://sebastienguillon.com/test/xhtml/xhtml11-valide-mais-incorrect-exemple.php nonsemantic or inaccessible], but this isn’t a “technique”; it’s a badly-worded warning about a scenario it cannot quite get straight.

== ''Guideline 3.'' Support the creation of accessible content ==

 <blockquote class="blue">
<span class="checkpoint">3.1</span> Prompt the author to provide equivalent alternative information (e.g., captions,
<ins class="ed">[audio]</ins> descriptions, and collated text transcripts for video).
=== Techniques ===
* Provide a preview mode that displays alternative content.
 </blockquote>
Not applicable. It’s self-contradictory. <code>alt</code> texts are to be [http://www.w3.org/TR/REC-html40/struct/objects.html#adef-alt displayed] if the user agent “cannot display images, forms, or applets.” You can’t “preview” the blog entry, complete with the image you wanted, ''and also'' the <code>alt</code> text; it’s one or the other.
I assume ATAG authors were acting as though IE/Win’s implementation of <code>alt</code> text – errantly displaying it as a tooltip – were actually correct. I assume they thought that you could look at the image and also read the tooltip. Apart from the fact that such a practice is inaccessible to many people, the approach is, quite simply, wrong. (A later checkpoint, [http://www.w3.org/TR/ATAG10-TECHS/imp4#check-notify-on-schedule 4.1], states: “Provide an editing view that shows equivalent alternatives in the main content view to make it clear that they are necessary. This will make it obvious when they are missing.” Again, you can’t show both.)
Advise all authoring-tool manufacturers to ignore this checkpoint.
<blockquote class="blue">
* Prompt the author to provide equivalent alternative information.
 </blockquote>
Pass for images, not applicable for everything else (since WordPress’s toolbar allows for image insertion only).
 <blockquote class="blue">
<span class="checkpoint">3.2</span> Help the author create structured content and separate information from its presentation.
 </blockquote>
Fail, if you want to go through the exhaustive list ATAG uses. WordPress fails on the following criteria:
<blockquote class="blue">
* '''[http://www.w3.org/TR/WCAG10/wai-pageauth.html#tech-color-convey WCAG 2.1]'''[http://www.w3.org/TR/WCAG10/wai-pageauth.html#tech-color-convey (P1) Ensure information provided with color is also available without color.]
* [http://www.w3.org/TR/WCAG10/wai-pageauth.html#tech-color-contrast '''WCAG 2.2''' (Images: P2, Text: P3) Use sufficient foreground/background contrast.]
* [http://www.w3.org/TR/WCAG10/wai-pageauth.html#tech-logical-headings '''WCAG 3.5''' (P2) Use header elements. ]
* [http://www.w3.org/TR/WCAG10/wai-pageauth.html#tech-identify-changes '''WCAG 4.1''' (P1) Identify natural language changes.]
* [http://www.w3.org/TR/WCAG10/wai-pageauth.html#tech-expand-abbr '''WCAG 4.2''' (P3) Specify abbreviation or acronym expansions.]
* [http://www.w3.org/TR/WCAG10/wai-pageauth.html#tech-table-headers '''WCAG 5.1''' (P1) Identify data table row and column headers.]
* [http://www.w3.org/TR/WCAG10/wai-pageauth.html#tech-table-structure '''WCAG 5.2''' (P1) Associate data cells and header cells in complex data tables.]
* [http://www.w3.org/TR/WCAG10/wai-pageauth.html#tech-abbreviate-labels '''WCAG 5.6''' (P3) Provide abbreviations for table header labels.]
* [http://www.w3.org/TR/WCAG10/wai-pageauth.html#tech-order-style-sheets '''WCAG 6.1''' (P1) Organize documents to be read without style sheets.]
** Provide a “draft” view which does not apply styling <ins class="ed">[of dubious merit in 2006, but a failure nonetheless]</ins>.
* '''[http://www.w3.org/TR/WCAG10/wai-pageauth.html#tech-tab-order WCAG 9.4]'''[http://www.w3.org/TR/WCAG10/wai-pageauth.html#tech-tab-order (P3) Create a logical tab order.]
* [http://www.w3.org/TR/WCAG10/wai-pageauth.html#tech-simple-and-straightforward '''WCAG 14.1''' (P1) Use clearest and simplest language appropriate. <ins class="ed">[Still a complete boondoggle.]</ins>]
 </blockquote>
 <blockquote class="blue">
<span class="checkpoint">3.3</span> Ensure that prepackaged content conforms to the Web Content Accessibility Guidelines 1.0.
 </blockquote>
Not applicable. You’re the author; you’re the one creating the content; you’re doing the “prepackaging” of things like images, not WordPress.
 <blockquote class="blue">
<span class="checkpoint"> 3.4</span> Do not automatically generate [atag10.html#def-alt-eq equivalent alternatives]. Do not reuse previously authored alternatives without author confirmation, except when the function is known with certainty.
 </blockquote>
This one’s rather tricky, not to mention self-contradictory. To put it in its most useful case: Don’t give people <code>alt</code> texts automatically. Except yes, go ahead, do that if you’re really sure you’re matching up the right <code>alt</code> text with the right image.
<blockquote class="blue">
=== Techniques ===
* If the author has not specified an alternative equivalent, default to leaving out the relevant attribute, rather than including the attribute with no value or with automatically-generated content.
 </blockquote>
Fail. If you don’t enter an <code>alt</code> text, you get <code>alt=""</code> instead of nothing. (As there is no call for spacer GIFs in WordPress, which would require <code>alt=""</code>, defaulting to that attribute amounts to a failure.)
<blockquote class="blue">
* If human-authored equivalent alternatives may be available for an object..., it is appropriate for the tool to offer these to the author as defaults.
 </blockquote>
Fail. WordPress does not store a repository of e.g. <code>alt</code> texts.
<blockquote class="blue">
* The function of objects is considered to be known with certainty when they are used throughout a Web site in a standard way (e.g., graphical navigation bars). In this case, the objects should have standard alternative information. Where an object has already been used in a document, the tool should offer the alternative information that was supplied for the first or most recent use as a default. If the user changes the alternative content, they might be asked whether all instances of the object should have their alternative content updated with the new value.
 </blockquote>
Not applicable.
 <blockquote class="blue">
<span class="checkpoint">3.5</span> Provide functionality for managing, editing, and reusing [atag10.html#def-alt-eq alternative equivalents] for multimedia objects.
 </blockquote>
Fail.

== ''Guideline 4.'' Provide ways of checking and correcting inaccessible content ==

 <blockquote class="blue">
<span class="checkpoint">4.1</span> Check for and inform the author of accessibility problems.
 </blockquote>
Fail.
 <blockquote class="blue">
<span class="checkpoint">4.2</span> Assist authors in correcting accessibility problems.
 </blockquote>
Fail.
 <blockquote class="blue">
<span class="checkpoint"> 4.3</span> Allow the author to preserve markup not recognized by the tool.
 </blockquote>
Pass.
 <blockquote class="blue">
<span class="checkpoint">4.4</span> Provide the author with a summary of the document’s accessibility status.
 </blockquote>
Fail.
 <blockquote class="blue">
4.5 Allow the author to transform presentation markup that is misused to convey structure into structural markup, and to transform presentation markup used for style into style sheets.
 </blockquote>
Fail.

== ''Guideline 5.'' Integrate accessibility solutions into the overall “look and feel” ==

 <blockquote class="blue">
<span class="checkpoint">5.1</span> Ensure that functionality related to accessible authoring practices is naturally integrated into the overall look and feel of the tool.
 </blockquote>
From what I can tell, pass.
 <blockquote class="blue">
<span class="checkpoint"> 5.2</span> Ensure that accessible authoring practices supporting Web Content Accessibility Guidelines 1.0 Priority 1 checkpoints are among the most obvious and easily initiated by the author.
 </blockquote>
From what I can tell, pass.

== ''Guideline 6.'' Promote accessibility in help and documentation ==

 <blockquote class="blue">
<span class="checkpoint">6.1</span> Document all features that promote the production of accessible content.
 </blockquote>
Fail. You can search the WordPress documentation and [http://codex.wordpress.org/Writing_Posts find], for example, advice to “include <code>ALT</code> and <code>TITLE</code> descriptions on links and images” in order to “be compliant with Web standards for accessibility” (except that <code>alt</code> and <code>title</code> have to be in lower case to be “compliant”). But there is no accessibility section.
Recommend that the documentation homepage create a prominent accessibility section and that actual page list the ATAG techniques’ pair of wordy [http://www.w3.org/TR/ATAG10-TECHS/imp6#check-document-features sample questions] (“Ensure that the help system can answer the following: ‘What features of the tool encourage the production of accessible content?’ and ‘How are these features used?’ ”). Let’s humour them here.
 <blockquote class="blue">
<span class="checkpoint">6.2</span> Ensure that creating accessible content is a naturally integrated part of the documentation, including examples.
 </blockquote>
Bare pass. Many of the ATAG techniques are vastly overblown and unworkable, like “Provide examples of all WCAG 1.0 accessibility requirements (including priority 2 and 3).” We don’t have all day, and we aren’t a reference book for WCAG. We’re a blogging tool. The techniques are so overweening I’m willing to give WordPress a bare pass for having done ''anything'' in this area.
 <blockquote class="blue">
<span class="checkpoint">6.3</span> In a dedicated section, document all features of the tool that promote the production of accessible content.
 </blockquote>
Fail.

== ''Guideline 7.'' Ensure that the authoring tool is accessible to authors with disabilities ==

This one’s rather tricky, as it assumes an application running under an “operating system.”

 <blockquote class="blue">
<span class="checkpoint">7.1</span> Use all applicable operating system and accessibility standards and conventions ....
=== Techniques ===
* Following Standards
 </blockquote>
Apparent pass.
<blockquote class="blue">
* Configurability
** Allow users to create profiles.
** Allow control of timing, colors, sizes, input/output devices and media.
 </blockquote>
Pass for those two.
<blockquote class="blue">
* Allow users to reshape the user interface - customize toolbars, keyboard commands, etc.
 </blockquote>
Fail.
<blockquote class="blue">
* Input Device Independence
** Provide Keyboard access to all functions.
 </blockquote>
Not applicable. Impossible in a browser. (Have we learned nothing from the experience of <code>accesskey</code>?)
<blockquote class="blue">
* Document all keyboard bindings.
 </blockquote>
[http://wordpress.org/docs/reference.php/post#quicktags Pass].
<blockquote class="blue">
* Provide customizable keyboard shortcuts for common functions.
 </blockquote>
Fail.
<blockquote class="blue">
* Provide logical navigation order for the keyboard interface.
 </blockquote>
Pass.
<blockquote class="blue">
* Avoid repetitive keying wherever possible.
 </blockquote>
Too vague to evaluate. Blogging is all about typing; any “keying” for user interface is trivial by comparison.
<blockquote class="blue">
* Provide mouse access to functions where possible.
 </blockquote>
Pass. It’s built into browsers.
<blockquote class="blue">
* Icons, Graphics, Sounds
** Provide graphical (text) equivalents for sound warnings.
** Allow sounds to be turned off.
** Provide text equivalents for all audio.
** Use icons that are resizable or available in multiple sizes.
 </blockquote>
Not applicable.
<blockquote class="blue">
* Provide text equivalents for images/icons.
 </blockquote>
Via the toolbar itself, yes. Pass.
<blockquote class="blue">
* Use customizable (or removable) colors/patterns.
 </blockquote>
The interface is skinnable, so pass.
<blockquote class="blue">
* Ensure high contrast is available (as default setting).
 </blockquote>
Fail. (Zoom layout, anyone?)
<blockquote class="blue">
* Layout <span class="grey">[...]</span>
 </blockquote>
Pass.
<blockquote class="blue">
* User Focus <span class="grey">[...]</span>
 </blockquote>
I think this is a pass. Someone with better understanding of the API will have to check.
<blockquote class="blue">
* Documentation
** Provide documentation for all features of the tool.
 </blockquote>
Fail. Not “all” features are documented. This is perhaps an unattainable goal.
<blockquote class="blue">
* Ensure that help functions are accessible.
 </blockquote>
Pass. They’re normal Web pages.
 <blockquote class="blue">
<span class="checkpoint">7.2</span> Allow the author to change the presentation within editing views without affecting the document markup.
 </blockquote>
Browser-dependent. Most techniques in this checkpoint are inapplicable. The ones that are applicable are a pass. [I loved the bit about “Allow the author to create audio style sheets using a graphical representation rather than an audio one (with accessible representation, of course).” Has any system, anywhere, ever, complied with that? Is any system even in a category or provides a function that would ''oblige'' it to comply?]
 <blockquote class="blue">
<span class="checkpoint"> 7.3</span> Allow the author to edit all properties of each element and object in an accessible fashion.
 </blockquote>
Pass.
 <blockquote class="blue">
<span class="checkpoint">7.4</span> Ensure that the editing view allows navigation via the structure of the document in an accessible fashion.
 </blockquote>
Fail with caveats. Even fails the minimum: “To minimally satisfy this checkpoint, allow navigation from element to element.” If you think that doesn’t make any sense at all, you aren’t alone. Also ''requires'' <code>accesskey</code> to be used. Why don’t we just call this one inapplicable and superseded by common sense?
 <blockquote class="blue">
<span class="checkpoint"> 7.5</span> Enable editing of the structure of the document in an accessible fashion.
 </blockquote>
This one’s so vague I interpret it as a pass.
 <blockquote class="blue">
7.6 Allow the author to search within editing views.
 </blockquote>
Inapplicable and browser-dependent. If you think the list of already-written or draft posts is an “editing view,” then WordPress passes.

----

== Version history ==

; 2006.01.30
: Posted.

==Attribution==
Original document, [http://joeclark.org/access/webaccess/WordPress-ATAG-evaluation.html WordPress-ATAG-evaluation.html] reproduced in Codex by permission of Joe Clark.  See [http://comox.textdrive.com/pipermail/wp-hackers/2006-January/004350.html Hackers discussion].

[[Category:About WordPress]]