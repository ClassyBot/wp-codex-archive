{{Languages|
{{en|Child Themes}}
{{ja|Child Themes}}
{{fr|Thèmes Enfant}}
{{pt-br|Temas Filhos}}
{{ru|Дочерние темы}}
{{sk|Odvodené témy}}
{{zh-hans|子主题}}
}}

Дочерняя тема WordPress — это тема, которая расширяет функционал другой темы, называемой родительской темой, и позволяет вам изменять или дополнять функционал родительской темы. Эта статья рассказывает как создать простую дочернюю тему, и объясняет что вы можете с ней сделать. Как пример родительской темы используется Twenty Ten, новая тема по умолчанию в [[Version_3.0|WordPress 3.0]].

Внимание! Если информация ниже вам покажется сложной для понимания, то можно воспользоваться более актуальным и быстрым способом создания дочерней темы с помощью плагина [https://ru.wordpress.org/plugins/child-theme-configurator/ Child Theme Configurator]


Создать дочернюю тему очень просто. Создайте папку, положите в нее соответствующим образом написанный файл ''style.css'' и дочерняя тема готова! С небольшим понятием о HTML и [[CSS]], вы можете изменить эту ''очень простую дочернюю тему'' — меняя внешний вид и верстку родительской темы, но не меняя ее файлов. Таким образом, когда родительская тема обновляется, ваши изменения сохраняются.

'''По этой причине дочерние темы — рекомендованный способ внесения изменений в тему.'''

С базовым пониманием PHP, [[Шаблоны|шаблонов WordPress]] и [[API плагинов|API плагинов Wordpress]], вы можете с помощью дочерней темы изменить буквально каждый аспект родительской темы, опять же, без каких-либо изменений файлов родительской темы. 

== Структура папки ==

Дочерняя тема размещается в своей собственной папке внутри ''wp-content/themes''. Схема ниже показывает положение дочерней темы относительно ее родительской темы (Twenty Ten) в типичной структуре папок WordPress:

* '''public_html'''
** '''wp-content''' 
*** '''themes''' (папка со всеми темами)
**** '''twentyten''' (папка родительской темы Twenty Ten)
**** '''twentyten-child''' (папка нашей дочерней темы; может быть названа как угодно)
***** '''style.css''' (необходимый файл, должен быть назван ''style.css'')

Эта папка может содержать как ''style.css'', так и дополнительные файлы, относящиеся к теме:

# style.css (обязательно)
# functions.php (опционально)
# файлы шаблона (опционально)
# другие файлы (опционально)

Давайте посмотрим, как все это работает.

== Необходимый файл style.css ==

''style.css'' — единственный '''необходимый''' файл в дочерней теме. Он обеспечивает информационный заголовок, по которому WordPress опознает дочернюю тему, и '''он заменяет style.css родительской темы'''.

Как и с любой темой WordPress, информационный заголовок должен быть в начале файла, единственное отличие — в дочерней теме строка <code>Template:</code> обязательна, чтобы WordPress знал, какая тема является родительской.

Вот пример информационного заголовка файла ''style.css'' дочерней темы:

<pre>
/*
Theme Name:     Twenty Ten Child
Theme URI:      http: //example.com/
Description:    Дочерняя тема для темы Twenty Ten 
Author:         Ваше имя
Author URI:     http: //example.com/about/
Template:       twentyten
Version:        0.1.0
*/
</pre>

Краткое пояснение каждой строки:

* <code>Theme Name</code>.   ('''обязательно''')    '''Название''' дочерней темы.
* <code>Theme URI</code>.    (опционально)          Адрес сайта дочерней темы.
* <code>Description</code>.  (опционально)          Описание дочерней темы. Например: Моя первая дочерняя тема, бугага!
* <code>Author URI</code>.   (опционально)          Адрес сайта автора дочерней темы.
* <code>Author</code>.       (опционально)          Имя автора дочерней темы.
* <code>Template</code>.     ('''обязательно''')    '''Название папки''' родительской темы, регистрозависимое.
** '''ПРИМЕЧАНИЕ'''. При изменении данной строки вы должны переключится на другую тему и обратно на дочернюю тему.
* <code>Version</code>.      (опционально)          Версия дочерней темы. Например: 0.1, 1.0.

Часть после закрывающего <code>*/</code> используется как обычный файл стилей. Здесь вы пишите правила стилей, которые будут применены WordPress. 

Помните, что файл стилей дочерней темы полностью заменяет файл стилей родительской темы. (Файл стилей родительской темы вообще не загружается WordPress.) Поэтому, если вы просто хотите внести несколько небольших изменений во внешний вид родительской темы, а не переписывать ее с нуля — вы должны импортировать файл стилей родительской темы, и затем добавлять изменения. Следующий пример показывает как это сделать, используя директиву <code>@import</code>.

== Пример простой дочерней темы ==

Наша родительская тема для этого примера — Twenty Ten. Нам нравится практически все в ней, кроме цвета текста заголовка сайта, который мы хотим изменить с черного на зеленый. Используя дочернюю тему, мы сделаем это за три простых шага:

# Создаем новую папку в ''wp-content/themes'', и называем ее ''twentyten-child'' (или как-нибудь еще).
# Сохраняем код ниже в файл с именем ''style.css'', и кладем его в созданную папку.
# Переходим во Внешний вид › Темы и активируем нашу новую тему Twenty Ten Child.

<pre>
/*
Theme Name: Twenty Ten Child
Description: Дочерняя тема для темы Twenty Ten 
Author: Ваше имя
Template: twentyten
*/

@import url("../twentyten/style.css");

#site-title a {
    color: #009900;
}
</pre>

Вот что делает выше написанный код, шаг за шагом:

# <code>/*</code> открывает информационный заголовок дочерней темы.
# <code>Theme Name:</code> объявляет название дочерней темы.
# <code>Description:</code> объявляет описание дочерней темы. (Опционально; может быть пропущено.)
# <code>Author:</code> объявляет имя автора дочерней темы. (Опционально; может быть пропущено.)
# <code>Template:</code> объявляет родительскую тему, т.е. название папки родительской темы в правильном регистре.
# <code>*/</code> закрывает информационный заголовок дочерней темы.
# Директива <code>@import</code> подключает файл стилей родительской темы.
# Правило <code>#site-title a</code> задает цвет текста (зеленый) для заголовка сайта, переопределяя соответствующее правило в родительской теме.

=== Примечание для директивы <code>@import</code> ===

Не должно быть никаких других правил CSS выше директивы <code>@import</code>. Если вы поместите другие правила выше этой директивы, она не будет выполнена и файл стилей родительской темы не будет импортирован.

=== Примечание для языков с письмом справа налево ===

Для поддержки языков с письмом справа налево (например, иврита или арабской письменности), добавьте файл '''rtl.css''', содержащий ниже следующий код, в вашу дочернюю тему:

<pre>
/*
Theme Name: Twenty Ten Child
Template: twentyten
*/

@import url("../twentyten/rtl.css");
</pre>

WordPress автоматически загрузит файл rtl.css только если [[Справочник_по_функциям/is rtl|is_rtl()]]. Даже если родительская тема не содержит файла rtl.css, рекомендуется добавить rtl.css в вашу дочернюю тему.

== Использование functions.php ==

В отличие от ''style.css'', файл ''functions.php'' дочерней темы не заменяет собой соответствующий файл родительской темы. Вместо этого, он '''загружается в дополнение к родительскому файлу functions.php'''. (А именно, прямо ''перед'' родительским файлом.)

Таким образом, файл ''functions.php'' дочерней темы предоставляет элегантный, надежный метод изменения функционала родительской темы. Скажем, вы хотите добавить функцию PHP к вашей теме. Быстрее всего открыть ее файл ''functions.php'' и поместить функцию туда. Но это не умный ход: при следующем обновлении вашей темы, ваша функция исчезнет. Вот правильное решение: вы создаете дочернюю тему, добавляете в нее файл ''functions.php'', и помещаете вашу функцию туда. Функция будет делать то же самое, плюс она не будет затронута при будущих обновлениях вашей родительской темы.

Структура файла ''functions.php'' проста: открывающий тег PHP в начале, закрывающий тег PHP в конце, и между ними ваш код. Здесь вы можете определить любое количество ваших функций. Пример ниже показывает элементарный файл ''functions.php'', который делает одну простую вещь: добавляет ссылку на favicon в элемент <code>head</code> HTML страниц.

<pre>
function favicon_link() {
    echo '<link rel="shortcut icon" type="image/x-icon" href="/favicon.ico" />' . "\n";
}
add_action('wp_head', 'favicon_link');
</pre>

СОВЕТ ДЛЯ РАЗРАБОТЧИКОВ ТЕМ. Факт, что файл ''functions.php'' дочерней темы загружается первым, означает что вы можете делать функции своей темы расширяемыми, т.е. заменяемыми посредством дочерней темы, объявляя их условно. Пример:

<pre>
if (!function_exists('theme_special_nav')) {
    function theme_special_nav() {
        //  Ваш код.
    }
}
</pre>

В этом случае, дочерняя тема может переопределить функцию PHP родительской темы просто объявив ее снова.

==== Привязка/вставка файлов в вашу дочернюю тему ====

Когда вам нужно вставить файлы, которые находятся внутри папки вашей дочерней темы, используйте [[Справочник_по_функциям/get_stylesheet_directory|get_stylesheet_directory()]]. Т.к. файл стилей родительской темы заменяется файлом style.css вашей дочерней темы, который находится в корневой папке дочерней темы, get_stylesheet_directory() указывает на папку вашей дочерней темы (а не на папку родительской темы).

Вот пример использования <code>require_once</code>, который показывает, как можно использовать get_stylesheet_directory(), когда подключаемый файл находится в папке дочерней темы.

<pre>
require_once( get_stylesheet_directory(). '/my_included_file.php' );
</pre>

==== Использование форматов записей ====

Дочерняя тема наследует [[Форматы_записей|форматы записей]], определенные в родительской теме. Но, при создании дочерних тем, будьте осторожны, т.к. функция ''add_theme_support('post-formats')'' '''переопределит''' форматы, заданные родительской темой, а не добавит к ней.

== Файлы шаблона ==

[[Шаблоны]] в дочерней теме ведут себя так же, как ''style.css'', '''они заменяют соответствующие файлы''' родительской темы. Дочерняя тема может заменить '''любой''' родительский файл шаблона просто создав файл с таким же именем. (ПРИМЕЧАНИЕ. Файл ''index.php'' может быть заменен только в WordPress версии 3.0 и выше.)

Опять, эта особенность WordPress позволяет вам изменять файлы шаблонов родительской темы без непосредственного их редактирования, так что все изменения сохранятся при обновлении родительской темы.

Вот несколько примеров использования файлов шаблонов в дочерней теме:

* Добавление шаблона, отсутствующего в родительской теме (например, шаблона для страницы карты ссылок, или для одноколоночных страниц, которые можно будет выбрать в свойствах страницы).
* Для добавления более специфичных шаблонов (см. [[Иерархия_шаблонов|иерархию шаблонов]]), чем использует родительская тема (например, шаблон ''tag.php'' для страниц меток вместо обычного ''archive.php'' родительской темы).
* Для замены родительского шаблона (например, создать свой собственный шаблон ''home.php'' для замены родительского ''home.php'').

== Другие файлы ==

В дополнение к файлам ''style.css'', ''functions.php'', файлам шаблонов (''index.php'', ''home.php'' и т.д.), дочерняя тема может использовать любые типы файлов полноценных тем, если они правильно подключены. Например, дочерняя тема может использовать иконки и изображения, которые подключены в файле стилей, файлы JavaScript, дополнительные PHP файлы, вызываемые из [[Шаблоны|шаблонов]] или ''functions.php''.

== Смотрите также ==

* [[Создание тем]]
* [http://wpmag.ru/2013/dochernie-temy-wordpress/ Дочерние темы в WordPress] - с примерами на основе Twenty Twelve
* [http://themeshaper.com/modify-wordpress-themes/ How to Modify WordPress Themes the Smart Way] - статья по дочерним темам (англ.)
* [http://op111.net/53 How to make a child theme for WordPress: A pictorial introduction for beginners] - иллюстрированное представление дочерних тем (англ.)
* [http://aaron.jorb.in/blog/2010/04/05/introducing-thirty-ten/ Introducing Thirty Ten] - гид по созданию дочерней темы для темы Twenty Ten (англ.)

-- [[User:Bruha]]

[[Category:ru:Design and Layout]]
[[Category:ru:UI Link]]<!-- link from wp-admin/update-core.php -->
[[Category:Russian Codex]]