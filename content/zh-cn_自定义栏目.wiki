{{Languages|
{{en|Custom Fields}}
{{es|Using Custom Fields}}
{{nl|Custom Fields}}
{{ja|カスタムフィールドの使い方}}
{{mk|Посебни Полиња}}
{{pt-br|Campos Personalizados}}
{{ru|Произвольные поля}}
{{zh-cn|自定义栏目}}
}}
__TOC__
文章作者可以在 WordPress 中为其文章指定自定义栏目。类似任意的附加信息通常叫做'''属性'''。这些'''属性'''可以是：

* '''心情：'''开心
* '''正在阅读：'''灰姑娘
* '''正在收听：'''加价热潮
* '''天气：'''闷热

通过稍微多写的代码，还可以实现更多操作。比如使用'''属性'''来储存文章的到期时间。

属性的数据结构是'''键—值一一对应'''（key/value pair）。'''键'''就是属性元素的名称；'''值'''是会出现在信息所属的文章的属性列表中的信息。

'''键'''可以在一篇文章中使用多次。比如，当您在阅读两本不同的书的时候（没准一本是上班时间阅读的技术书籍，一本是家中阅读的小说），您可以创建“正在阅读”键，然后在同一文章中使用两次。

这是在您文章中，信息可能的展现形式：

{{zh-cn:Stub}}

<div style="border:1px solid blue; width:50%; margin: 20px; padding:20px">'''Currently  Reading''': ''Calvin and Hobbes''
'''Today's Mood''': ''Jolly and Happy''
</div>

== 函数参考 ==

{| cellspacing="10" width="100%"
|- valign="top"
| width="50%" |

{| class="widefat"
|- style="background:#464646; color:#d7d7d7;"
! '''添加, 更新, 删除'''
|-
|
* <tt>[[Function Reference/add post meta | add_post_meta()]]</tt>
* <tt>[[Function Reference/update_post_meta | update_post_meta()]]</tt>
* <tt>[[Function Reference/delete post meta | delete_post_meta()]]</tt>
|}

| width="50%" |

{| class="widefat"
|- style="background:#464646; color:#d7d7d7;"
! '''自定义 值/键'''
|-
|
* <tt>[[Function Reference/get post custom | get_post_custom()]]</tt>
* <tt>[[Function Reference/get post custom values | get_post_custom_values()]]</tt>
* <tt>[[Function Reference/get post custom keys | get_post_custom_keys()]]</tt> 
|}

|- valign="top"
| colspan="2" |

{| class="widefat"
|- style="background:#464646; color:#d7d7d7;"
! '''模板标签'''
|-
|
* <tt>[[Template Tags/the meta | the_meta()]]</tt>
* <tt>[[Function Reference/get post meta | get_post_meta()]]</tt>
|}

|}

==使用方法==

我们参考前面所提到的例子来操作. 我们将添加两个自定义栏目， 一个栏目称为 "正在阅读" 另一个栏目则称之为 "今天的心情". 下面我们演示如何使用自定义栏目显示信息。

# 依照常规将您的文章书写完成, 卷动滚动条到'''自定义栏目'''位置.<br>'''Note:''' 自WordPress[[Version 3.1|version 3.1]]起,默认情况下自定义栏目已经隐藏,您可以通过管理面板写文章和页面编辑的[[Administration Panels#Screen_Options|显示选项]]中勾选自定义栏目打开它.
# 创建一个名字为"正在阅读"的'''自定义栏目''' , 在'''名称'''的输入栏中输入"正在阅读"文字(不带引号).
# 为刚刚新创建的'''名称'''添加一个'''值''', 我们举一个正在阅读"卡尔文与霍布斯"的例子. 在''值''的输入框中键入 "卡尔文与霍布斯"(不带引号).
# 单击'''添加自定义栏目'''按钮将以上内容保存到文章中.

To add your "Today's Mood", repeat the process and add "Today's Mood" to the '''key''' and a description of your mood in the '''value''' text boxes and click '''SAVE''' to save this information with the post.

On your next post, you can add a new book and mood to your meta-data.  In the '''Custom Fields''' section, the '''Key''' will now feature a pull down list with the previously entered Custom Fields. Choose "Currently Reading" and then enter the new book you are reading in the '''value'''.  Click '''Add Custom Field''' and then repeat the process to add "Today's Mood".

You only need to create a new "KEY" '''once''', after which you can assign a value to that key for every post, if you so desire. You can also assign more than one ''Value'' to a key, for a post. This will come in handy for people who read more than one book at a time.

==Displaying Custom Fields==

With a Custom Field added to the post, it's time to display your books and mood to the world.  To display the Custom Fields for each post, use the <tt>[[Template_Tags/the_meta|the_meta()</tt>]] template tag. The tag must be put within [[The Loop]] in order to work.  Many people add <tt>the_meta()</tt> template tag to the end of their post or in their [[Post Meta Data Section]]. Here is a basic example of using the tag:

 <?php the_meta(); ?>

It might look like this in the source code:

<pre>&lt;ul class='post-meta'&gt;
&lt;li&gt;&lt;span class='post-meta-key'&gt;Curently Reading:&lt;/span&gt; Calvin and Hobbes&lt;/li&gt;
&lt;li&gt;&lt;span class='post-meta-key'&gt;Today's Mood:&lt;/span&gt; Jolly and Happy&lt;/li&gt;
&lt;/ul&gt;</pre>

The template tag automatically puts the entire meta-data into a CSS style called <tt>post-meta</tt>. The '''key''' is in a <tt>span</tt> called <tt>post-meta-key</tt> so you can style it in your style sheet.  All of this is showcased in an unordered list.

To customize the look of the post-meta list, change the characteristics in your style sheet.  For instance, let's add some style to our example from the top.  The style sheet elements would look like this:

<pre>.post-meta {font-variant: small-caps; color: maroon; }
.post-meta-key {color: green; font-weight: bold; font-size: 110%; }</pre>

<div style="border:1px solid blue; width:50%; margin: 20px; padding:20px">
* <span style="font-size:110%; color: green; font-weight:bold; font-variant: small-caps">Currently  Reading</span>: <span style="font-style:italic; color: maroon; font-variant: small-caps">Calvin and Hobbes</span>
* <span style="font-size:110%; color: green; font-weight:bold; font-variant: small-caps">Today's Mood</span>: <span style="font-style:italic; color: maroon; font-variant: small-caps">Jolly and Happy</span>
</div>

There are also many WordPress Plugins in the [http://wordpress.org/extend/plugins/ Official WordPress Plugin Directory] that add some nice features to the job of displaying meta tags. A search for [http://www.google.com/search?hl=en&q=custom+fields+plugin+wordpress&btnG=Google+Search Custom Field plugins at Google] should help you find even more.

To register support for custom fields within a custom post type, simply list it in your 'supports' $args using 'custom-fields'.
<pre>
'supports' => array('title','editor','thumbnail','custom-fields')
</pre>

==自定义栏目的高级应用==

以下是使用更高级的方式获取自定义数据和自定义栏目的方法。

===Getting Custom Fields===
To fetch meta values use the <tt>[[Function Reference/get post meta|get_post_meta()]]</tt> function:

  get_post_meta($post_id, $key, $single);

*<tt>$post_id</tt> is the ID of the post you want the meta values for. Use <tt>$post->ID</tt> to get a post's ID within the $post variable scope. Use <tt>[[Function_Reference/get_the_ID|get_the_ID()]]</tt> to retrieve the ID of the current item in the WordPress Loop.
*<tt>$key</tt> is a string containing the name of the meta value you want.
*<tt>$single</tt> can either be <tt>true</tt> or <tt>false</tt>. If set to true then the function will return a single result, as a '''string'''. If false, or not set, then the function returns an '''array''' of the custom fields.

====Implementation Details====
The PostMeta information is stored in a new table, <tt>$wpdb->postmeta</tt>. This table has four fields:

:'<tt>meta_id</tt>' - A unique id for each entry.
:'<tt>post_id</tt>' - The ID of the post for this metadata.
:'<tt>meta_key</tt>' - The name of the 'key'.
:'<tt>meta_value</tt>' - The value associated with the key.

The values from this table are pulled into a structured multi-dimensional array called <tt>$post_meta_cache</tt>, just after the <tt>$posts</tt> array is fetched in <tt>wp-blog-header.php</tt>. This variable will only contain values for the list of posts fetched for the current page build. The structure of the array will look something like this:

 [
 	postid1 => [
 		key1 => [ val1, val2, ... ],
 		key2 => [ val1, val2, ... ],
 		...
 	],
 	postid2 => [
 		key1 => [ val1, val2, ... ],
 		key2 => [ val1, val2, ... ],
 		...
 	],
 	...
 ]

So, if you wanted to fetch the "reading" values from post number 256, you use this PHP code:

 // Fetch an array of values for what I'm reading:
 $readinglist = $post_meta_cache[256]['reading'];

'''Note:''' Don't forget that <tt>$readinglist</tt> will be an array, not a single value.

===PostMeta Functions===

====Internal Functions====

These functions are intended for use inside [[The Loop]], and all return arrays.

;<tt>[[Function Reference/get post custom|get_post_custom()]]</tt>: Get all key/value data for the current post.
;<tt>[[Function Reference/get post custom keys|get_post_custom_keys()]]</tt>: Get a list of all key names for the current post.
;<tt>[[Function Reference/get post custom values|get_post_custom_values($key)]]</tt>: Get the list of values for a particular key on the current post.
;<tt>[[Function Reference/get post meta|get_post_meta($post_id, $key, $single = false)]]</tt>: In WP 1.5 and beyond, this function returns the meta information without cache problems. The function requires the post id, the key, and if <tt>$single</tt> is set to TRUE, it returns only the first result (NOT as an array) for PHP use.

<pre>This will output the resulting meta value (notice the addition of "echo"):
<?php $key="mykey"; echo get_post_meta($post->ID, $key, true); ?></pre>

====Template Functions====

At the time of this writing, there is only one template function.

;<tt>[[Template Tags/the_meta|the_meta()]]</tt>:Echoes an unordered list containing the current post's meta-data with a class for the UL as ''post-meta'' and the LI as ''post-meta-key''.

We expect that independent developers will come up with many interesting uses for post meta-data in the form of plugins. The <tt>the_meta()</tt> template function is just an extremely basic example.

[[Category:zh-cn:开始使用]]
[[Category:zh-cn:布局与设计]]
[[Category:zh-cn:WordPress 课程]]
[[Category:zh-cn:高级话题]]
[[Category:zh-cn:用户界面链接到的页面]]