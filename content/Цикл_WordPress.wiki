{{Languages|
{{en|The Loop}}
{{ja|The Loop}}
{{ru|Цикл WordPress}}
}}
{{ru:Stub}}
__TOC__
'''Цикл''' используется в WordPress для отображения записей. Используя Цикл, WordPress обрабатывает каждую из этих записей для вывода на текущей странице и форматирует ее в соответствии с указанными критериями внутри Цикла. Любой [[Glossary#HTML|HTML]] или [[Glossary#PHP|PHP]] код, раположенный внутри Цикла, будет повторен для каждой записи.

Когда в документации WordPress говорится "Этот тэг используется внутри Цикла", как для конкретных [[Template Tags|Тэгов Шаблона]] или плагинов, тэг будет повторен для каждой записи. Например, в Цикле, по умолчанию, для каждой записи выводится следующая информация:
*Заголовок (<tt>[[Template Tags/the_title|the_title()]]</tt>)
*Время (<tt>[[Template Tags/the_time|the_time()]]</tt>)
*Рубрики (<tt>[[Template Tags/the_category|the_category()]]</tt>)

Другую информацию о каждой записи можно отобразить с помощью соответствующих [[Template Tags|тэгов шаблона]] или (для продвинутых пользователей) с помощью введения переменной <tt>$post</tt>, которая содержит информацию текущей записи, пока Цикл выполняется.

Для первого знакомства с Циклом, читайте [[The Loop in Action|Цикл в Действии]].
== Использование Цикла ==

Цикл должен быть расположен в файле <tt>index.php</tt> и в любых других шаблонах, используемых для отображения записей.

Убедитесь, что включили вызов заголовка Шаблона (header.php), в верхней части Шаблонов вашей [[Theme Development|Темы]]. Если вы используете Цикл внутри собственного дизайна (и ваш дизайн не является шаблоном), установите <tt>WP_USE_THEMES</tt> в значение <tt>false</tt>.

<pre><?php define('WP_USE_THEMES', false); get_header(); ?></pre>

Цикл стартует здесь:

 <?php if ( have_posts() ) : while ( have_posts() ) : the_post(); ?>

и заканчивается здесь:

 <?php endwhile; else: ?>
 &lt;p&gt;<?php _e('Sorry, no posts matched your criteria.'); ?>&lt;/p&gt;
 <?php endif; ?>

== Примеры Циклов ==

=== Стилизация Записей из различных Рубрик ===

Этот пример отображает каждую запись с заголовком (который используется в качестве [[Using Permalinks|Постоянной ссылки]] к записи), Рубриками и Содержимым. Это очень простой пример; вероятно ваши Шаблоны будут отображать больше информации, в таком случае стилизацию будет проще сделать с помощью [[Glossary#CSS|CSS]].

Для того чтобы извлечь больше пользы из этого примера, выделим записи из Рубрики с ID равным '3'. Для этого используется [[Template Tags|Тэг Шаблона]] <tt>[[Function Reference/in_category|in_category()]]</tt>.

Тэги <tt><nowiki><!-- --></nowiki></tt> являются HTML-тэгами комментариев; если вы используете данный пример, эти тэги не будут отображаться в браузере. Они нужны только для комментирования кода.

 <nowiki>
 <!-- Start the Loop. -->
 <?php if ( have_posts() ) : while ( have_posts() ) : the_post(); ?>

 <!-- Далее проверяется, находится ли текущая запись в рубрике 3. -->
 <!-- Если да, то блоку div, будет присвоен класс "post-cat-three". -->
 <!-- Иначе, блоку div будет присвоен класс "post". -->
 
<?php if ( in_category('3') ) { ?>
           <div class="post-cat-three">
 <?php } else { ?>
           <div class="post">
 <?php } ?>

 <!-- Отобразить Заголовок как постоянную ссылку на Запись. -->
 
<h2><a href="<?php the_permalink(); ?>"><?php the_title(); ?></a></h2>

 <!-- Отобразить время. --> 
<small><?php the_time('F jS, Y'); ?></small>

 <!-- Отобразить Содержимое Записи внутри div. -->
 <div class="entry">
   <?php the_content(); ?>
 </div>

 <!-- Отобразить список Рубрик Записи, разделенных запятой. -->
 <p class="postmetadata">Posted in <?php the_category(', '); ?></p>
 </div> <!-- closes the first div box -->

 <!-- Остановить Цикл (но есть ключевое слово "else:" - смотрите далее). -->
 <?php endwhile; else: ?>

 <!-- В первом "if" проверяется существуют ли каки-либо записи для  -->
 <!-- вывода.  Эта часть "else", говорит что делать, если записей не нашлось.-->
 <p>Sorry, no posts matched your criteria.</p>

 <!-- ДЕЙСТВИТЕЛЬНО остановить Цикл -->
 <?php endif; ?></nowiki>

'''Запомните:''' Каждый раз, когда вы хотите использовать [[Glossary#HTML|HTML]] код, вы ''должны'' находиться вне <tt><?php &nbsp;?></tt> тэгов. [[Glossary#PHP|PHP]] код (даже такие вещи как простые фигурные скобки: <tt>}</tt> ) ''должны'' быть внутри <tt><?php &nbsp;?></tt> тэгов. Вы можете запускать и останавливать PHP код с тем чтобы вставлять в промежутки HTML код, с каждым <tt>if</tt> и <tt>else</tt> выражением, как показано в примере выше.

=== Исключение Записей из некоторых Рубрик ===

Этот пример может быть использован для исключения определенной Рубрики из обычного отображения. Он основан на предыдущем [[#Стилизация Записей из различных Рубрик|примере]]. 

 <nowiki>
 <?php if ( have_posts() ) : while ( have_posts() ) : the_post(); ?>

 <!-- Если запись находится в рубрике, которую мы хотим исключить, мы просто переходим к следующей записи. -->
 
<?php if (in_category('3')) continue; ?>
 
 <div class="post">
 
  <h2><a href="<?php the_permalink(); ?>"><?php the_title(); ?></a></h2>
 
  <small><?php the_time('F jS, Y'); ?></small>
 
  <div class="entry">
    <?php the_content(); ?>
  </div>

  <p class="postmetadata">Posted in <?php the_category(', '); ?></p>
 </div> <!-- closes the first div box -->

 <?php endwhile; else: ?>
 <p>Sorry, no posts matched your criteria.</p>
 <?php endif; ?></nowiki>

'''Запомните''': Если вы используете этот пример для основной страницы, вы должны использовать другой [[Templates|Шаблон]] для архивов Рубрик. Иначе, WordPress будет исключать все записи в Рубрике 3, каждый раз, когда вы просматриваете Архив этой Рубрики!

Однако, если вы хотите использовать этот же файл шаблона, вы должны обойти это используя тэг <tt>is_home()</tt>:

 ...
 <?php if (in_category('3') && is_home() ) continue; ?>
 ...

Благодаря этому записи из Рубрики 3 будут исключены только с главной страницы. Существуют другие [[Conditional Tags|Условные Тэги]], которые можно использовать для управления выводом в зависимости от того выполняется ли определенное условие на запрашиваемой странице.

Пожалуйста запомните, что несмотря на то что запись не отображается, WordPress все равно ее считает, как если бы она отображалась - это значит, что если вы указали WordPress выводить максимум семь записей, и две, последние из семи находятся в Рубрике 3, на главной странице отобразяться только пять записей. Если вы столкнулись с такой проблемой, можно воспользоваться более сложным приемом, описанным в разделе [[FAQ Layout and Design|"Дизайн и Раскладка. Часто задаваемые вопросы"]] или вы можете использовать [[Template_Tags/query_posts | query_posts]], если вам нужно просто исключить одну рубрику из Цикла.

==Множественные Циклы==

Этот раздел посвящен расширенному использованию Цикла. Здесь будет немного технической информации - но пусть это вас не пугает. Мы начнем с самого простого и приложив немного сообразительности, терпения и энтузиазма, вы тоже сможете строить множественные Циклы.

Во-первых, <b>"зачем нужно использовать множественные Циклы?"</b> Множественные циклы могут понадобиться в том случае, если вам необходимо произвести какие-то различные дейстия над несколькими группами записей, и при этом <u>расположить их на одной странице</u>. Различные действия - могут означать все что угодно, вы ограничены только PHP-мастерством и собственной фантазией.

Мы перейдем к примерам ниже, но сначала вы должны ознакомиться с основами. Взгляните на простой Цикл. Он состоит из:

      <?php if (have_posts()) : ?>
                <?php while (have_posts()) : the_post(); ?>    
      &lt;!-- атрибуты записи ... --&gt;
      <?php endwhile; ?>

Проще говоря (люди, знакомые с PHP и языком кода, могут пропустить), вышеуказанное можно прочитать как: Если мы собираемся отображать записи, тогда получим их по одной. Для каждой записи в списке отобразить соответствующие ей <tt>&lt;!-- атрибуты записи ... --&gt;</tt>. Когда дойдем до последней записи, остановиться. Строка (ки) <tt>&lt;!-- атрибуты записи ... --&gt;</tt> зависит от шаблона.

Слова <tt>атрибуты записи</tt>: в этом примере простой заменитель части кода, который описывает как форматировать и отображать каждую запись на странице. Этот код может быть изменен в зависимости от того, каким вы хотите видеть свой WordPress. Если откроете файла index.php темы Кубрика, секция <tt>атрибуты записи</tt> будет выглядеть вот так:

      <?php while (have_posts()) : the_post(); ?>
Выше:

      <?php comments_popup_link('No Comments &#187;', '1 Comment &#187;', '% Comments &#187;'); ?>

Разъяснение для кодеров там же:
<tt>have_posts()</tt> и <tt>the_post()</tt> являются удобными обертками вокруг глобального объекта <tt>$wp_query</tt>, в котором происходят все эти действия. <tt>$wp_query</tt> вызывается в заголовке блога и аргументы запроса передаются к нему через <tt>GET</tt> и <tt>PATH_INFO</tt>. Приняв аргументы, <tt>$wp_query</tt>, строит и выполняет запрос к базе данных, а результаты запроса возвращает в виде массива записей. Этот массив записывается в объект и также возвращается назад в заголовок блога, где он заполняется в глобальный массив <tt>$posts</tt> (для обратной совместимости со старыми версиями циклов).

После того как WordPress загрузил заголовок блога и передал его в шаблон, мы перейдем к нашему Циклу записей. <tt>have_posts()</tt> просто вызывает <tt>$wp_query->have_posts()</tt>, который проверяет счетчик цикла на наличие каких-либо записей в массиве записей. Также <tt>the_post()</tt> вызывает <tt>$wp_query->the_post()</tt>, который увеличивает счетчик цикла и устанавливает глобальную переменную <tt>$post</tt>, также как и все данные записей. Один раз выполнив Цикл,<tt>have_posts()</tt> вернет false и мы закончим.

====Примеры Циклов====

Далее следуют два примера использования множественных циклов. Ключем к использованию множественных циклов является тот факт, что <tt>$wp_query</tt> может быть вызван только один раз. Для того чтобы обойти это, можно повторно использовать запрос, вызвав <tt>rewind_posts()</tt> или создав новый объект запроса. Это описывается в примере 1. В примере 2 описывается, использование переменной для хранения результатов запроса. В примере 3 документирована функция <tt>update_post_caches();</tt>, используемая для обхождения общих проблем с плагинами. Наконец, "множественные циклы в действии" включает множество идей, одна из которых - использование множественных циклов для взаимодействия записей из конкретной категории на домашней странице вашего блога.

===== Множественные Циклы. Пример 1 =====

Для того чтобы второй раз использовать цикл, с таким же запросом, вызовите функцию <tt>rewind_posts()</tt>. Она сбросит счетчик цикла и позволит вам выполнить другой цикл.

   <?php rewind_posts(); ?>
  
   <?php while (have_posts()) : the_post(); ?>
     &lt;!-- получить записи... --&gt;
   <?php endwhile; ?>

Если вы хотите использовать два различных запроса для получения записей, вы можете повторно запустить объект <tt>$wp_query</tt>, с помощью вызова <tt>query_posts()</tt>. <tt>query_posts()</tt> выполнит новый запрос, посторит новый массив записей, и сбросит счетчик цикла.

   // Получить последние 10 записей в рубрике special_cat
   <?php query_posts('category_name=special_cat&posts_per_page=10'); ?>
 
   <?php while (have_posts()) : the_post(); ?>
     &lt;!-- получить записи из рубрики special_cat... --&gt;
   <?php endwhile;?>

Если вам нужно сохранить оригинальный запрос, вы можете создать новый объект запроса.

 <?php $my_query = new WP_Query('category_name=special_cat&posts_per_page=10'); ?>
 
 <?php while ($my_query->have_posts()) : $my_query->the_post(); ?>
   &lt;!-- получить записи из рубрики special_cat... --&gt;
 <?php endwhile; ?>

Объект запроса <tt>my_query</tt> используется потому, что вы не можете использовать глобальные <tt>have_posts()</tt> и <tt>the_post()</tt>, поскольку они оба используются <tt>$wp_query</tt>. Вместо этого, используйте ваш новый объект <tt>$my_query</tt>.

=====Множественные Циклы Пример 2=====

Существует другой способ использования множественных Циклов, позволяющий обойти невозможность использования <tt>have_posts()</tt> и <tt>the_post()</tt>. Для этого, вам потребуется сохранить оригинальный запрос в переменную, а затем переназначить ее, за пределами другого Цикла. Этот способ позволяет использовать все стандартные функции, основывающиеся на глобальных данных.

Например:

 // оригинальный запрос сохраняется в переменную $temp_query
 <?php $temp_query = $wp_query; ?>
 &lt;!-- Получить записи... --&gt;
 
 <?php query_posts('category_name=special_cat&showposts=10'); ?>
 
 <?php while (have_posts()) : the_post(); ?>
   &lt;!-- Получить записи из рубрики special_cat... --&gt;
 <?php endwhile; ?>
 
 // $wp_query вновь присвается значение оригинального запроса
 <?php $wp_query = $temp_query; ?>

'''Важно:'''В PHP5, оператор "=" создает ссылку на объект, вместо того что копировать его, как это было в php4. Чтобы Пример 2 заработал в PHP 5, вам нужно использовать следующий код:

<pre>
 // оригинальный запрос сохраняется в переменную $temp_query
 <?php $temp_query = clone $wp_query; ?>
 &lt;!-- Получить записи... --&gt;
 
 <?php query_posts('category_name=special_cat&showposts=10'); ?>
 
 <?php while (have_posts()) : the_post(); ?>
   &lt;!-- Получить записи из рубрики special_cat... --&gt;
 <?php endwhile; ?>
 
 // $wp_query вновь присвается значение оригинального запроса
 <?php $wp_query = clone $temp_query; ?>
</pre>

Однако, этот второй пример не работает в WordPress 2.1.

=====Множественные Циклы Пример 3 - Плагины=====

Было установлено, что некоторые плагины плохо взаимодействуют с множественными циклами. В этих случаях было обнаружено, что плагины, имеющие отношение к ключевым словам и тэгированию записей, работают только с первым циклом на странице, который включает в себя подмножество всех записей. Если вы столкнулись с подобным, можно попробовать следующую реализацию основного цикла, с добавлением функции <tt>update_post_caches($posts)</tt>. Эта функция сбрасывает кэш записей, и пока не документирована. Эта реализация будет использоваться во втором цикле на странице, только если первый цикл вернул подмножество записей.

Просто замените следующие строки:

    <?php if (have_posts()) : ?>
                <?php while (have_posts()) : the_post(); ?>    
      &lt;!-- Получить записи... --&gt;
    <?php endwhile; ?>

на эти:

    <?php if (have_posts()) : ?>
                <?php while (have_posts()) : the_post(); update_post_caches($posts); ?>
      &lt;!-- Получить записи... --&gt;
    <?php endwhile; ?>

====Множественные Циклы в Действии====

Самый лучший способ понять как использовать множественные циклы - рассмотреть пример их использования. Чаще всего, множественные циклы используются для отображения двух (и более) списков записей на странице.Этот метод используется веб-мастером в том случае, когда он хочет отобразить не только последние записи, а еще и записи из некоторой рубрики.

Оставим в стороне все вопросы форматирования и CSS, представим что нам нужно отобразить два списка записей. Один из которых будет списком последних записей (стандартное количество записей равное 10,недавно добавили), и другой, который будет содержать только записи из рубрики "featured". Записи в рубрике "featured" должны быть отображены первыми, следущими за вторым списком записей (стандарт).<b>Хитрость в том, что не одна запись не должна присутствовать в обоих рубриках.</b> 

<b>Шаг 1.</b> Получить записи только из рубрики "featured".

   <?php $my_query = new WP_Query('category_name=featured&showposts=1');
   while ($my_query->have_posts()) : $my_query->the_post();
   $do_not_duplicate = $post->ID; ?>
     &lt;!-- Получить записи... --&gt;
   <?php endwhile; ?>

Говоря обычным языком, вышеуказанный код можно прочтитать так:

Установить <tt>$my_query</tt> равным результату запроса всех записей, где название рубрики featured, и кроме того, вернуть мне только одну запись. Также, установить значение переменной <tt>$do_not_duplicate</tt> равной ID-значению одиночной, возвращаемой записи. Выбрать то что описано в строке <tt>Получить записи</tt> вместе с параметрами форматирования, связанные с возвращаемой записью.

Обратите внимение, что нам понадобится использовать значение переменной <tt>$do_not_duplicate</tt> в следующем шаге, чтобы убедиться,что та же самая запись не попадет в оба списка.

<b>Шаг 2</b>. Второй цикл, получение Х последних записей (исключая первую).

Представленный код получает X последних записей (как описано в настройках WordPress), сохраняет одну, уже отображенную в первом цикле, и отображает остальные записи, в соответствии с секцией <tt>Получить записи</tt>.

   <?php if (have_posts()) : while (have_posts()) : the_post(); 
   if( $post->ID == $do_not_duplicate ) continue; update_post_caches($posts); ?>
    &lt;!-- Получить записи... --&gt;
   <?php endwhile; endif; ?>

Говоря обычным языком, вышеуказанный код можно прочтитать так:

Получить все записи; где запись равна <tt>$do_not_duplicate</tt>, то ничего не делать (<tt>continue</tt>), в другом случае отобразить все другие записи в соответствии с секцией <tt>Do stuff</tt>. Также, обновить кэш, чтобы плагины связанные с тэгированием и ключевыми словами работали нормально. Вернуть переменную <tt>$do_not_duplicate</tt>, содержащую ID записи, ранее выведенной.

<b>Конечный результат</b>

Here is what the final piece of code looks like <u>without any formatting</u>:

   <?php $my_query = new WP_Query('category_name=featured&showposts=1');
   while ($my_query->have_posts()) : $my_query->the_post();
   $do_not_duplicate = $post->ID;?>
     &lt;!-- Do stuff... --&gt;
   <?php endwhile; ?>
     &lt;!-- Do other stuff... --&gt;
   <?php if (have_posts()) : while (have_posts()) : the_post(); 
   if( $post->ID == $do_not_duplicate ) continue; update_post_caches($posts); ?>
    &lt;!-- Do stuff... --&gt;
   <?php endwhile; endif; ?>

В итоге мы получим два вывода. Первый вывод содержит самую свежую запись из категории 'featured'.  Второй вывод будет содержать X свежих записей (Как задано в настройках Wordpress) <i>за исключение</i> записи которая уже показана в первом выводе.  So, once the feature post is replaced with a new one, the previous feature will show up in standard post list section below (depending on how many posts you choose to display and on the post frequency).  This technique (or similar) has been used by many in conjunction with knowledge of the [http://codex.WordPress.org/Template_Hierarchy Template Hierarchy] to create a different look for home.php and index.php.  See associated resources at the bottom of this page.

<b>Note for Multiple Posts in the First Category</b>

If showposts=2 or more, you will need to alter the code a bit.  The variable $do_not_duplicate needs to be changed into an array as opposed to a single value.  Otherwise, the first loop will finish and the variable $do_not_duplicate will equal only the id of the latest post.  This will result in duplicated posts in the second loop.  To fix the problem replace
 
 <?php $my_query = new WP_Query('category_name=featured&amp;showposts=1');
  while ($my_query->have_posts()) : $my_query->the_post();
  $do_not_duplicate = $post->ID;?>

with

 <?php $my_query = new WP_Query('category_name=featured&amp;showposts=2');
   while ($my_query->have_posts()) : $my_query->the_post();
   $do_not_duplicate[] = $post->ID ?>

Note that "showposts" can be any number.
This changes $do_not_duplicate into an array.  Then replace
 
 <?php if (have_posts()) : while (have_posts()) : the_post(); if( $post->ID ==
   $do_not_duplicate ) continue; update_post_caches($posts); ?>

with

 <?php if (have_posts()) : while (have_posts()) : the_post(); 
  if (in_array($post->ID, $do_not_duplicate)) continue;
  update_post_caches($posts); ?>

Where you continue the pattern for whatever showposts is set equal to (2 in this case).

===Sources===
This article on multiple loops is a combination of [http://boren.nu Ryan Boren] and [http://www.alexking.org Alex King's] [http://comox.textdrive.com/pipermail/hackers/2005-January/003578.html discussion] about the Loop on the [[Mailing Lists#Hackers|Hackers Mailing List]] as well as the tutorial written at [http://www.maxpower.ca/wordPress-hack-sticky-adhesive-kubrick/2005/05/03/ MaxPower].

== Дополнительные материалы ==

* [http://wpmag.ru/2013/wp_query/ Основы WP_Query] - работа с запросами в WordPress с помощью класса WP_Query
* [http://wpmag.ru/2014/query_posts-wordpress/ Почему не следует использовать query_posts() в WordPress]

[[Category:Russian Codex]]