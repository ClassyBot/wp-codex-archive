{{ru:Stub}}
{{Languages|
{{en|Data Validation}}
{{ja|Data Validation}}
{{ru|Валидация данных}}
}}

Ненадежные данные поступают из многих источников (пользователи, сторонние сайты, ваша собственная база данных!, ...) и все они нуждаются в проверке как на ввод, так и на вывод.

== Output Sanitation ==
Метод валидации данных зависит от типа данных, а также от того, в каком контексте они используются. Далее мы рассмотрим несколько типичных задач, а также то, как необходимо валидировать данные.

Совет: Рекомендуется делать валидацию как можно позже, идеально - непосредственно перед выводом, вместо того, чтобы сделать это в самом начале. Таким образом, вы будете уверены, что данные валидны, и не будет необходимости помнить, делалась уже валидация, или нет.

=== Целые числа ===
; <tt>intval( $int )</tt> или <tt>(int) $int</tt>
:	Это должно быть целым числом, приводим переменную к такому типу.
; <tt>absint( $int )</tt> 
:	Целое, не отрицательное число.

=== HTML/XML ===
Note that many types of XML documents (as opposed to HTML documents) understand only a few named character references: <code>apos, amp, gt, lt, quot</code>.  When outputting text to such an XML document, be sure to filter any text containing illegal named entities through WordPress's <code>[[Function Reference/ent2ncr|ent2ncr]]( $text )</code> function.

==== HTML/XML Fragments ====
; <code>[[Function Reference/wp_kses|wp_kses]]( (string) $fragment, (array) $allowed_html, (array) $protocols = null )</code>
:	KSES Strips Evil Scripts.  All untrusted HTML (post text, comment text, etc.) should be run through <code>wp_kses()</code>.
:
:	To avoid having to pass an array of allowed HTML tags, you can use <code>[[Function Reference/wp_kses_post|wp_kses_post]]( (string) $fragment )</code> for tags that are allowed in posts/pages or <code>[[Function Reference/wp_kses_data|wp_kses_data]]( (string) $fragment )</code> for the small list of tags allowed in comments.
; <code>[[Function Reference/wp_rel_nofollow|wp_rel_nofollow]]( (string) $html )</code>
:	Adds a "rel='nofollow'" attribute to any <nowiki><a></nowiki> link.
:
; <code>[[Function Reference/wp_kses_allowed_html|wp_kses_allowed_html]]( (string) $context )</code>
:	Provides an array of allowed HTML tags for a given context. Allowed values are post | strip | data | entities or the name of a field filter such :       as pre_user_description.

==== Текстовые значения ====
; <code>[[Function Reference/esc_html|esc_html]]( $text )</code> (начиная с 2.8)
:	Кодирует символы <tt>< > & " '</tt> (меньше, больше, амперсанд, двойная кавычка, одинарная кавычка). Очень похоже на <code>esc_attr</code>.
; <code>[[Function Reference/esc_html_2|esc_html__]]</code> (начиная с 2.8)
:	Переводит и кодирует
; <code>[[Function Reference/esc_html_e|esc_html_e]]</code> (начиная с 2.8)
:	Переводит, кодирует и выводит
; <code>[[Function Reference/esc_textarea|esc_textarea]]</code> (начиная с 3.1)
:	Кодирует текст для использования в элементе textarea.
; <code>[[Function Reference/sanitize_text_field|sanitize_text_field]]</code> (since 2.9.0)
:	Валидация строки, введённой пользователем, или из базы данных.

==== Атрибуты тэга ====
; <code>[[Function Reference/esc_attr|esc_attr]]( $text )</code> (начиная с 2.8)
; <code>[[Function Reference/esc_attr_2|esc_attr__]]()</code>
:	Переводит и кодирует
; <code>[[Function Reference/esc_attr_e|esc_attr_e]]()</code>
:	Переводит, кодирует и выводит

==== JavaScript ====
; <code>[[Function Reference/esc_js|esc_js]]( $text )</code> (начиная с 2.8)

=== URLs ===
; <code>[[Function Reference/esc_url|esc_url]]( $url, (array) $protocols = null )</code> (начиная с 2.8)
:	Always use <code>esc_url</code> when sanitizing URLs (in text nodes, attribute nodes or anywhere else).  Rejects URLs that do not have one of the provided whitelisted protocols (defaulting to <tt>http</tt>, <tt>https</tt>, <tt>ftp</tt>, <tt>ftps</tt>, <tt>mailto</tt>, <tt>news</tt>, <tt>irc</tt>, <tt>gopher</tt>, <tt>nntp</tt>, <tt>feed</tt>, and <tt>telnet</tt>), eliminates invalid characters, and removes dangerous characters. Replaces <code>clean_url()</code> which was deprecated in 3.0.
: This function encodes characters as HTML entities: use it when generating an (X)HTML or XML document. Encodes ampersands (<tt>&</tt>) and single quotes (<tt>'</tt>) as numeric entity references (<tt>&#038, &#039</tt>).
; <code>[[Function Reference/esc_url_raw|esc_url_raw]]( $url, (array) $protocols = null )</code> (since 2.8)
:	For inserting an URL in the database.  This function does not encode characters as HTML entities: use it when storing a URL or in other cases where you need the non-encoded URL.  This functionality can be replicated in the old <code>clean_url</code> function by setting <code>$context</code> to <code>db</code>.
; <code>[[Function Reference/urlencode|urlencode]]( $scalar )</code>
:	Encodes for use in URL (as a query parameter, for example)
; <code>[[Function Reference/urlencode_deep|urlencode_deep]]( $array )</code>
:	urlencodes all array elements.

=== Базы Данных ===
; <code>[[Class Reference/wpdb#INSERT rows|$wpdb->insert]]( $table, (array) $data )</code>
:	<code>$data</code> должна быть не экранирована (функция выполнит это за вас).  Keys как columns, Values как values.

; <code>[[Class Reference/wpdb#UPDATE rows|$wpdb->update]]( $table, (array) $data, (array) $where )</code>
:	<code>$data</code> должна быть не экранирована.  Keys как columns, Values как values.  <code>$where</code> должна быть не экранирована.  Multiple <code>WHERE</code> conditions are <code>AND</code>ed together.
 $wpdb->update(
   'my_table',
   array( 'status' => $untrusted_status, 'title' => $untrusted_title ),
   array( 'id' => 123 )
 );

; <code>[[Class Reference/wpdb#Protect Queries Against SQL Injection Attacks|$wpdb->prepare]]( $format, (scalar) $value1, (scalar) $value2, ... )</code>
:	<code>$format</code> это [http://php.net/sprintf sprintf()]-подобный формат строки.  Он понимает только <code>%s</code> и <code>%d</code> заполнители, ни один из которых не должен быть заключён в кавычки.
 $wpdb->get_var( $wpdb->prepare(
   "SELECT something FROM table WHERE foo = %s and status = %d",
   $name, // неэкранированная строка (функция проверит это для вас)
   $status // ненадёжный числитель (функция проверит это для вас)
 ) );

; <code>[[Function Reference/esc_sql|esc_sql]]( $sql )</code>
:       Псевдоним для <code>$wpdb->escape()</code>.

; <code>$wpdb->escape( $text )</code>
:	Экранирует одну строку или массив строк для использования в SQL запросах.  Прославленный <code>addslashes(). $wpdb->prepare</code> как правило, предпочтительнее, так как он исправляет несколько типичных ошибок форматирования.

; <code>$wpdb->escape_by_ref( &$text )</code>
:	Нет возвращаемого значения. Поскольку параметр передается по ссылке, текст непосредственно изменяется, поэтому нет необходимости назначать какое-либо возвращаемое значение.

; <code>[[Function Reference/like_escape|like_escape]]( $string )</code>
:	Подготавливает <code>$string</code> для использования в LIKE выражениях SQL запросов. Будет по прежнему нуждаться в SQL экранировании (с одной из перечисленных функций).

=== Filesystem ===
; <code>[[Function Reference/validate_file|validate_file]]( (string) $filename, (array) $allowed_files = "" )</code>
:	Used to prevent directory traversal attacks, or to test a filename against a whitelist. Returns <tt>0</tt> if <code>$filename</code> represents a valid relative path. After validating, you <em>must</em> treat <code>$filename</code> as a relative path (i.e. you must prepend it with an absolute path), since something like <tt>/etc/hosts</tt> will validate with this function. Returns an integer greater than zero if the given path contains <tt>..</tt>, <tt>./</tt>, or <tt>:</tt>, or is not in the <code>$allowed_files</code> whitelist. Be careful making boolean interpretations of the result, since <tt>false</tt> (0) indicates the filename has passed validation, whereas <tt>true</tt> (> 0) indicates failure.

=== HTTP Headers ===
Header splitting attacks are annoying since they are dependent on the HTTP client.  WordPress has little need to include user generated content in HTTP headers, but when it does, WordPress typically uses [[#Whitelist|whitelisting]] for most of its HTTP headers.

WordPress does use user generated content in HTTP Location headers, and provides sanitation for those.

; <code>[[Function Reference/wp_redirect|wp_redirect]]($location, $status = 302)</code>
:	A safe way to redirect to any URL.  Ensures the resulting HTTP Location header is legitimate.
; <code>[[Function Reference/wp_safe_redirect|wp_safe_redirect]]($location, $status = 302)</code>
:	Even safer.  Only allows redirects to whitelisted domains.

== Input Validation ==

Many of the functions above in [[#Output_Sanitation]] are useful for input validation.  In addition, WordPress uses the following functions.

=== Slugs ===
; <code>[[Function Reference/sanitize_title|sanitize_title]]( $title )</code>
: Used in post slugs, for example
; <code>[[Function Reference/sanitize_user|sanitize_user]]( $username, $strict = false )</code>
: Use <code>$strict</code> when creating a new user (though you should use the API for that).

=== HTML ===
; <code>[[Function Reference/balanceTags|balanceTags]]( $html )</code> or <code>[[Function Reference/force_balance_tags|force_balance_tags]]( $html )</code>
: Tries to make sure HTML tags are balanced so that valid XML is output.
; <code>[[Function Reference/tag_escape|tag_escape]]( $html_tag_name )</code>
: Sanitizes an HTML tag name (does not escape anything, despite the name of the function).
; <code>[[Function Reference/sanitize_html_class|sanitize_html_class]]( $class, $fallback )</code>
: Santizes a html classname to ensure it only contains valid characters. Strips the string down to A-Z,a-z,0-9,'-' if this results in an empty string then it will return the alternative value supplied.

=== Email ===
; <code>[[Function Reference/is_email|is_email]]( $email_address )</code>
: returns boolean false if invalid, or $email_address if valid

=== Arrays ===
; <code>array_map( 'absint', $array )</code>
: Ensures all elements are nonnegative integers.  Replace callback <tt>'absint'</tt> with whatever is appropriate for your data. <tt>array_map()</tt> is a core PHP function that runs array elements through an arbitrary callback function, in this example, <tt>absint()</tt>.

=== Other ===
Some other functions that may be useful to sanitise data input:

* [[Function_Reference/sanitize_email|sanitize_email()]]
* [[Function_Reference/sanitize_file_name|sanitize_file_name()]]
* [[Function_Reference/sanitize_html_class|sanitize_html_class()]]
* [[Function_Reference/sanitize_key|sanitize_key()]]
* [[Function_Reference/sanitize_mime_type|sanitize_mime_type()]]
* [[Function_Reference/sanitize_option|sanitize_option()]]
* [[Function_Reference/sanitize_sql_orderby|sanitize_sql_orderby()]]
* [[Function_Reference/sanitize_text_field|sanitize_text_field()]]
* [[Function_Reference/sanitize_title_for_query|sanitize_title_for_query()]]
* [[Function_Reference/sanitize_title_with_dashes|sanitize_title_with_dashes()]]
* [[Function_Reference/sanitize_user|sanitize_user()]]
* [[Function_Reference/sanitize_meta|sanitize_meta()]]
* [[Function_Reference/sanitize_term|sanitize_term()]]
* [[Function_Reference/sanitize_term_field|sanitize_term_field()]]

== Validation Philosophies ==
There are several different philosophies about how validation should be done.  Each is appropriate for different scenarios.

=== Whitelist ===
Accept data only from a finite list of known and trusted values.

 $possible_values = array( 'a', 1, 'good' );
 if ( !in_array( $untrusted, $possible_values ) )
   die( "Don't do that!" );

 // Be careful here with fancy breaks and default actions.
 switch ( $untrusted ) {
 case 'a' :
   ...
   break;
 ...
 default :
   die( "You hoser!" );
 }

=== Blacklist ===
Reject data from finite list of known untrusted values.  This is very rarely a good idea.

=== Format Detection ===
Test to see if the data is of the correct format.  Only accept it if it is.
 if ( !ctype_alnum( $data ) )
   die( "Your data is teh suX0R" );
 if ( preg_match( "/[^0-9.-]/", $data ) )
   die( "Float on somewhere else, jerky" );

=== Format Correction ===
Accept most any data, but remove or alter the dangerous pieces.
 $trusted_integer = (int) $untrusted_integer;
 $trusted_alpha = preg_replace( '/[^a-z]/i', "", $untrusted_alpha );
 $trusted_slug = sanitize_title( $untrusted_slug );

== Changelog ==
* [[Version 3.1|3.1]]: Introduced <code>[[Function_Reference/esc_textarea|esc_textarea]]</code>. ([http://core.trac.wordpress.org/ticket/15454 #15454])
* [[Version 3.0|3.0]]: Deprecated <code>[[#URLs|clean_url()]]</code> in favor of <code>esc_url()</code> and <code>esc_url_raw()</code>. ([http://core.trac.wordpress.org/ticket/12309 #12309])
* [[Version 2.8|2.8]]: Deprecated the following functions. (via [http://wpdevel.wordpress.com/tag/escaping/ WordPress Development Updates])
** <code>sanitize_url()</code> -> <code>esc_url_raw()</code>
** <code>wp_specialchars()</code> -> <code>esc_html()</code> (also: <code>esc_html__()</code> and <code>esc_html_e()</code>)
** <code>attribute_escape()</code> -> <code>esc_attr()</code> (also: <code>esc_attr__()</code> and <code>esc_attr_e()</code>)

== External Resources ==
* [http://wp.tutsplus.com/tutorials/creative-coding/data-sanitization-and-validation-with-wordpress/ Data Sanitization and Validation With WordPress] by Stephen Harris
* [http://wordpress.tv/2011/01/29/mark-jaquith-theme-plugin-security/ Theme and Plugin Security] by Mark Jaquith
* [http://groups.google.com/group/wp-hackers/browse_thread/thread/8f1466febb168935?pli=1 wp_specialchars() vs attribute_escape() ( now esc_attr() ) and quote entity-encoding].


[[Category:Security]]
[[Category:WordPress Development]]

[[Category:Russian Codex]]