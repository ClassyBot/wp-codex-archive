{{Languages|
{{en|Function Reference/query posts}}
{{it|Riferimento funzioni/query posts}}
{{ja|テンプレートタグ/query_posts}}
{{zh-hans|函数参考/query posts}}
{{pt-br|Referência de Função/query posts}}
}}
__TOC__

==Descrizione==

<tt>query_posts()</tt> è il metodo più semplice, anche se non quello preferibile o più efficiente, per modificare la query standard che WordPress utilizza per visualizzare gli articoli. Utilizzare <tt>query_posts()</tt> per visualizzare articoli diversi da quealli che appaiono normalmente per una specifica URL. (Il metodo migliore è agganciarsi a '[[Plugin_API/Action_Reference/pre_get_posts|pre_get_posts]]' e modificare in questo modo la query principale utilizzando [[Function_Reference/is_main_query|is_main_query]])

Ad esempio, nella pagina home, normalmente appaiono gli ultimi dieci articoli. Se si desidera visualizzarne solo 5 (e non ci si preoccupa della paginazione), è possibile utilizzare query_posts() in questo modo:

<pre>
query_posts( 'posts_per_page=5' );
</pre>

==Avvertenze==
<tt>query_posts()</tt> è solo uno dei metodi fra i tanti per interrogare il database e generare un elenco di articoli. Prima di utilizzare <tt>query_posts()</tt>, assicurarsi di aver ben compreso le problematiche associate.

===Alterare il Loop principale===
<tt>query_posts()</tt> è pensato per alterare il loop principale. Una volta utilizzato  <tt>query_posts()</tt>, le variabili globali correlate all'articolo ed i tag dei template verranno modificati. I tag condizionali eseguiti dopo la vostra chiamata a <tt>query_posts()</tt> verranno anch'essi alterati - ciò può portare o meno al risultato desiderato.

===Loop secondari===
Per creare elenchi secondari (ad esempio un elenco di articoli correlati posti in fondo alla pagina oppure una lista di link in un widget della sidebar), si provi a creare una nuova istanza di [[Riferimento Classi/WP_Query|WP_Query]] oppure ad utilizzare  [[Function_Reference/get_posts|get_posts()]].

Se si deve utilizzare <tt>query_posts()</tt>, assicurarsi di richiamare <tt>wp_reset_query()</tt> dopo averlo utilizzato.

===Paginazione===
La paginazione non funzionerà correttamente a meno di impostare la variabile di query 'paged' in maniera opportuna: [[Pagination#Adding_the_.22paged.22_parameter_to_a_query|aggiungere i parametri di paginazione]]

===Query SQL aggiuntive===
Se si utilizza <tt>query_posts</tt> in un template di pagina, WordPress avrà già eseguito le query al database e recuperato i record nel momento in cui è arrivato al template di pagina (è in questo modo che sa quale template di pagina servire!). Quindi quando si sovrascrive la query predefinita tramite <tt>query_posts()</tt> si sta essenzialmente buttando via la query predefinita ed i suoi risultati e si esegue una nuova query sul database.

Ciò non costituisce necessariamente un problema, specialmente se si ha a che fare con un piccolo blog. Gli sviluppatori di grossi siti con grandi database ed un elevato numero di visitatori vorranno considerare delle alternative, ad esempio modificando direttamente la query predefinita (prima che venga chiamata). Il filtro  [[Plugin_API/Filter_Reference/request|request]] può essere utilizzato proprio a questo scopo.

I filtri 'parse_query' e '[[Plugin_API/Action_Reference/pre_get_posts|pre_get_posts]]' sono un altro metodo per modificare l'oggetto $query che viene utilizzato per generare la query SQL al database.

==Utilizzo==

<pre>
<?php

// La Query
query_posts( $args );

// Il Loop
while ( have_posts() ) : the_post();
	echo '<li>';
	the_title();
	echo '</li>';
endwhile;

// Reset Query
wp_reset_query();

?>
</pre>

Inserire una chiamata a <tt>query_posts()</tt> in uno dei file dei [[Templates|Template]]  prima che inizi [[Il Loop]]. L'oggetto <tt>wp_query</tt> genererà una nuova query SQL utilizzando i nuovi paramentri. Quando si effettua questa operazione, WordPress ignora lgli altri paramentri ricevuti tramite la URL (quali ad esempio il numero di pagina e la categoria). 

===Preservare i parametri delle query===

Se si desidera mantenere le informazioni sui parametri utilizzati per generare la query corrente e successivamente aggiungere o sovrascrivere alcuni parametri, dovete utilizzare la variabile globale <tt>$query_string</tt> durante la chiamata a <tt>query_posts()</tt>.

Ad esempio per impostare l'ordine di visualizzazione degli articoli senza modificare il resto della stringa di ricerca, è possibile inserire il seguente codice prima del [[Il Loop]]:

<pre>
global $query_string;
query_posts( $query_string . '&order=ASC' );
</pre>

Utilizzando <tt>query_posts()</tt> in questo modo la porzione dei parametri fra apici ''deve'' iniziare con un ampersand (&).

In alternativa è possibile unire l'array originale dei parametri con il proprio array di parametri:

<pre>
global $wp_query;
$args = array_merge( $wp_query->query_vars, array( 'post_type' => 'product' ) );
query_posts( $args );
</pre>

===Combinare parametri===

Si sarà notato da alcuni degli esempi precedenti che è possibile combinare i propri paramentri con un ampersand (&), così: 

<pre>
query_posts( 'cat=3&year=2004' );
</pre>

Articoli della categoria 13, per il mese corrente solo nella pagina principale:

<pre>
if ( is_home() ) {
	query_posts( $query_string . '&cat=13&monthnum=' . date( 'n', current_time( 'timestamp' ) ) );
}
</pre>

Dalla versione 2.3 questa combinazione ritornerà gli articoli appartenenti  entrambi alle categori 1 E 3, visualizzando solo due (2) articoli, in ordine discendente in base al titolo:

<pre>
query_posts( array( 'category__and' => array(1,3), 'posts_per_page' => 2, 'orderby' => 'title', 'order' => 'DESC' ) );
</pre>

Il codice seguente restituisce tutti gli articoli che appartengono alla categoria 1 e che sono contrassegnati dal tag "mele"

<pre>
query_posts( 'cat=1&tag=mele' );
</pre>

&Egrave; possibile cercare per tag multipli usando il +

<pre>
query_posts( 'cat=1&tag=mele+pere' );
</pre>

==Parametri==

'''Nota:''' Il dettaglio dei parametri si trovano [[Riferimento Classi/WP_Query#Parametri|nell'articolo sulla classe WP_Query sezione Parametri]].

I prossimi esempi funzionano anche con l'oggetto WP_Query.

==Esempi==

===Escludere alcune categorie dalla home page===

Inserendo questo codice nel file <tt>index.php</tt> si otterrà che la home page visualizzerà gli articoli di tutte le categorie ''accetto'' la categoria di ID 3.

<pre>
<?php
if ( is_home() ) {
	query_posts( 'cat=-3' );
}
?>
</pre>

&Egrave; possibile anche aggiungere più categorie alla lista di esclusione (testato con WP 3.3.1):

<pre>
<?php
if ( is_home() ) {
	query_posts( 'cat=-1,-2,-3' );
}
?>
</pre>

===Recuperare un articolo specifico===

Per recuperare uno specifico articolo è possibile utilizzare il seguente codice:

<pre>
query_posts( 'p=5' );
</pre>

'''Nota:''' Se uno specifico articolo è un allegato, si dovrà utilizzare il paramentro ''attachment_id'' al posto di ''p'':

<pre>
query_posts( 'attachment_id=5' );
</pre>

Se con questa query si desidera utilizzale la funzionalità ''Leggi altro'' si dovrà impostare la variabile globale <tt>$more</tt> a 0.

<pre>
<?php
// recupera un articolo con ID di 5
query_posts( 'p=5' );

// imposta $more a 0 per ottenere solo la prima parte dell'articolo
global $more;
$more = 0;

// il Loop
while (have_posts()) : the_post();
	the_content( 'Leggi articolo completo &raquo;' );
endwhile;
?>
</pre>

===Tutti gli articoli di una categoria===

Il paramentro "Le pagine del blog visualizzano al massimo" in Impostazioni > Lettura possono influenzare i risultati.  Per sovrascriverne il comportamento aggiungere il paramentro 'posts_per_page'.  Ad esempio:

<pre>
query_posts( array ( 'category_name' => 'my-category-slug', 'posts_per_page' => -1 ) );
</pre>

Restituisce TUTTI gli articoli della categoria.

Tuttavia, per le sottocategorie (o categorie figlie), 'Il nome categoria' non sempre funziona. Utilizzare al suo posto 'l'abbreviazione'. Si veda [[Function_Reference/is_category]].

<pre>
if (is_category('category-slug')): 

	 query_posts(array('category_name' => 'my-category-slug', 'posts_per_page' => -1 )); 

endif; 
</pre>

===Feed===

I parametri "I feed visualizzano" oppure '<tt>posts_per_rss</tt>' in Impostazioni > Lettura sovrascriveranno qualsiasi parametro '<tt>posts_per_page</tt>' in una query utilizzata in un feed.

Per ovviare a questo limite utilizzare (ad esempio in un feed ics personalizzato, dove sono necessari tutti gli articoli che trovano una corrispondenza) il filtro "posts_limit" come nel seguente esempio:

<pre>
if ( isset ( $query->query_vars['feed'] ) and ( $query->query_vars['feed'] == 'ics' ) )
{
	add_filter( 'post_limits', '__return_empty' );
}
</pre>

===Passare delle variabili a query_posts===

&Egrave; possibile passare una variabile alla query con due diversi metodi, in funzione delle proprie necessità your needs. Come per tutti gli esempi precedenti il codice va inserito prima del Loop:

==== Esempio 1  ====

In questo esempio, si concatenerà la query prima di eseguirla. Prima si asegna la variabile, la si concatena e quindi la si esegue. In questo esempio si sta recuperando da un'altra parte una variabile che definisce una categoria. 

<pre>
// assegna la variabile come la categoria corrente
$categoryvariable = $cat;

// concatena la query
$args = 'cat=' . $categoryvariable . '&orderby=date&order=ASC';

// esegue la query
query_posts( $args );
</pre>

==== Esempio 2 ====

In questo esempio i doppi apici indicano a PHP di trattare il contenuto come una espressione. In questo esempio si prende il mese e l'anno corrente e si indica a <tt>query_posts()</tt> di recuperare gli articoli per il mese/anno correnti ed in questo caso, di elencarli in ordine ascendente così da avere l'articolo più vecchio in cima alla pagina. 

<pre>
$current_year = date('Y');
$current_month = date('m');

query_posts( "cat=22&year=$current_year&monthnum=$current_month&order=ASC" );
</pre>

==== Esempio 3 ====

Questo esempio mostra come generare un elenco completo degli articoli, gestendo la paginazione. &Egrave>; possibile utilizzare la <tt>$query_string</tt> predefinita per dire a <tt>query_posts()</tt> di recuperare un elenco completo degli articoli. &Egrave; anche possibile modificare il parametro della query <tt>posts_per_page</tt> da -1 al numero di articoli che si desidera visualizzare in ciascuna pagina; in quest'ultimo caso probabilmente si vorrà utilizzare [[Template Tags/posts_nav_link|posts_nav_link()]] per navigare nell'archivio appena generato.

<pre>
query_posts( $query_string . '&posts_per_page=-1' );
</pre>

==== Esempio 4 ====

Se non si ha necessità di utilizzare la variabile <tt>$query_string</tt>, esiste un altro metodo che è più chiaro e leggibile nei casi più complessi. Questo metodo pone i parametri in un array. La stesa query del precedente Esempio 2 può essere riscritta così:

<pre>
$args = array(
	'cat'      => 22,
	'year'     => $current_year,
	'monthnum' => $current_month,
	'order'    => 'ASC'
);
query_posts( $args );
</pre>

Come si vede con questo approccio ogni variabile viene posta su uan riga facilitando la lettura del codice.

==== Esempio 5 ====

&Egrave; possibile utilizzare lo style con l'array (Esempio 4) per effettuare una query su tassonomie multiple. Basterà fornire l'abbreviazione (slug) della tassonomia in una stringa di valori separati da virgole (ciascun valore sarà un termine). Nell'esempio seguente si richiederanno tutti gli articoli sui film in cui recitano Bruce Campbell ''oppure'' Chuck Norris.

<pre>
$args = array(
	'post_type'=> 'movie',
	'actor'    => 'Bruce Campbell, Chuck Norris',
	'order'    => 'ASC'
);
query_posts( $args );
</pre>

==File sorgente==

<tt>query_posts()</tt> si trova in {{Trac|wp-includes/query.php|trunk|89}}.

==Risorse (in inglese)==
*Per una discussione più approfondita su come WordPress genera e gestisce le sue query si vedano questi articoli: [[Query Overview]] e [[Custom Queries]]
*Personalizzare correttamente la Query Predefinita utilizzando 'pre_get_posts' - [http://www.billerickson.net/customize-the-wordpress-query/#example-category Bill Erickson - Customize the Wordpress Query] oppure [http://developer.wordpress.com/2012/05/14/querying-posts-without-query_posts/ John James Jacoby - Querying Posts Without query_posts]
*Non sapete nulla sulle Query [http://www.slideshare.net/andrewnacin/you-dont-know-query-wordcamp-netherlands-2012 - Slides from WordCamp Netherlands 2012 by Andrew Nacin]

==Correlati==

{{it:Query_Tags}}
{{Tag Footer}}

[[Category:Template Tags]]