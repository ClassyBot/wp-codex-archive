{{Languages|
{{en|Function Reference/wp_enqueue_script}}
{{es|Referencia de Funciones/wp_enqueue_script}}
{{ru|Справочник по функциям/wp_enqueue_script}}
{{zh-cn|功能参考/wp_enqueue_script}}
}}

== 功能说明 ==

安全地将 javascript 代码加入到 WordPress 创建的页面中。一般来说，将没有被内置的代码进行添加，并在 WordPress 运行时进行加载。

== 使用方法 ==

<pre>
wp_enqueue_script( 
     $handle
    ,$src
    ,$deps
    ,$ver
    ,$in_footer 
);
</pre>

'''使用 <tt>wp_enqueue_scripts</tt> 行为来调用本功能, 或者使用 <tt>admin_enqueue_scripts</tt> 在管理界面进行调用, or use <tt>login_enqueue_scripts</tt> for login screens.''' 在行为之外进行调用将会导致问题产生。参见[http://core.trac.wordpress.org/ticket/11526 #11526]获得详细信息。

== 参数 ==

{{Parameter|$handle|string|代码的名称。使用小写字母。}}

{{Parameter|$src|string|代码的 URL 。例如：“http://example.com/wp-includes/js/scriptaculous/scriptaculous.js”。这个参数仅在 WordPress 没有内置该代码时使用。不可使用绝对地址来定位代码，应当使用[[Function Reference/plugins_url]]（对应于插件情况）和[[Function Reference/get_template_directory_uri]]（对应于模板情况）来获得正确的 URL 。|可选项|false}}

{{Parameter|$deps|array|本代码依赖的代码的名称；需要在本代码之前加载的代码的名称。如果没有依赖关系置为 false 。这个参数仅在 WordPress 没有内置该代码时使用。|可选项|array()}}

{{Parameter|$ver|string|表示代码版本号的字串，将会作为查询字串附加在路径的末尾。默认为 false 。如果没有设置，或者设置为 false ，wordpress 将会自动将 wordpress 的版本号附加在路径的末尾。这个参数用来确保正确的版本信息传递给了客户端，以免受到缓存的影响，因此如果可以获得合适的版本号就应该使用。如果你不愿意附加任何版本号信息在路径的末尾，你就必须将本参数设置为 NULL 。将 NULL 进行传递是不被推荐的，所以使用 NULL 之前请确保 NULL 是可行的。|可选项|false}}

{{Parameter|$in_footer|boolean|一般代码放置于 <tt><head></tt> 部分。如果将这个参数设置为 ture，代码将被放置在 <tt><body></tt> 部分的末尾。这就需要模板要正确的放置[[Plugin API/Action Reference/wp footer|wp_footer()]]勾件。注意你需要将本功能放置在<code>wp_head</code>之前，相应的代码才能被加载，即使设置了将代码放置在页脚处。(WordPress 2.8 新设置) |可选项|false}}

== 返回值 ==

; (void) : 本功能不返回任何值。

== 举例 ==

'''注意''': 从 <tt>wp_head</tt> 或者 <tt>wp_print_scripts</tt> 行为调用本功能会无法运行，因为文件需要在这些功能之前运行。参见[#Usage 使用方法]部分以进行正确的使用。

=== 从非默认位置调用一个默认的 WordPress 代码 ===

'''Please Note:''' It is not recommended that a theme force a 3rd party served JavaScript or CSS file by default, Doing so opens the users up to reliance upon a external host which is out of their control. A much better alternative is to use/recomend a Plugin such as [http://wordpress.org/extend/plugins/use-google-libraries/ Plugin: Use Google Libraries] which automatically uses the Google-CDN served jQuery '''of the same version that WordPress uses''' this ultimately reduces breakage caused by Themes/Plugins which hardcode the file to use.

Suppose you want to use the CDN copy of jQuery instead of WordPress’s, add this code to your functions.php file.

<pre>
<?php
function my_scripts_method() {
    wp_deregister_script( 'jquery' );
    wp_register_script( 'jquery', 'http://ajax.googleapis.com/ajax/libs/jquery/1.6/jquery.min.js');
    wp_enqueue_script( 'jquery' );
}    
 
add_action('wp_enqueue_scripts', 'my_scripts_method');
?>
</pre>

'''by using the <tt>wp_enqueue_scripts</tt> hook (instead of the <tt>init</tt> hook which many articles reference), we avoid registering the alternate jQuery on admin pages, which will cause post editing (amongst other things) to break after upgrades often.'''

=== Load the scriptaculous script ===

<pre>
<?php
function my_scripts_method() {
    wp_enqueue_script('scriptaculous');            
}    
 
add_action('wp_enqueue_scripts', 'my_scripts_method'); // For use on the Front end (ie. Theme)
?>
</pre>

The above example only loads the Scriptaculous library on the front end, If it was needed within the admin, you could use the <tt>admin_enqueue_scripts</tt> action instead, however this enqueues it on ALL admin pages, which often leads to plugin/core conflicts, ultimately breaking the WordPress admin experience. Instead, You should only load it on the individual pages you need it, See the [[#Load_scripts_only_on_plugin_pages|Load scripts only on Plugin pages]] section for an example of that.

=== Load script depends on scriptaculous ===

Add and load a new script that depends on scriptaculous (this will also cause it to load scriptaculous into the page as well):

<pre>
<?php
function my_scripts_method() {
   wp_enqueue_script('newscript',
     /* WP_PLUGIN_URL . '/someplugin/js/newscript.js', // old way, not SSL compatible */
     plugins_url('/js/newscript.js', __FILE__), // where the this file is in /someplugin/
     array('scriptaculous'),
     '1.0' );
}    
 
add_action('wp_enqueue_scripts', 'my_scripts_method');
?>
</pre>

=== Load a script from your theme which depends upon a WordPress Script ===

Often JavaScript files included in Themes require another JavaScript file to be loaded before the themes JavaScript file, WordPress offers an API for marking ''Dependencies'' when registering a script, For Example, the below theme requires jQuery for the custom_script JavaScript file:

<pre>
<?php
function my_scripts_method() {
   // register your script location, dependencies and version
   wp_register_script('custom_script',
       get_template_directory_uri() . '/js/custom_script.js',
       array('jquery'),
       '1.0' );
   // enqueue the script
   wp_enqueue_script('custom_script');
}
add_action('wp_enqueue_scripts', 'my_scripts_method');
?>
</pre>

=== Load scripts only on plugin pages ===

<pre>
<?php
    add_action( 'admin_init', 'my_plugin_admin_init' );
    add_action( 'admin_menu', 'my_plugin_admin_menu' );

    function my_plugin_admin_init() {
        /* Register our script. */
        wp_register_script( 'my_plugin_script', plugins_url('/script.js', __FILE__) );
    }

    function my_plugin_admin_menu() {
        /* Register our plugin page */
        $page = add_submenu_page( 'edit.php', // The parent page of this menu
                                  __( 'My Plugin', 'myPlugin' ), // The Menu Title
                                  __( 'My Plugin', 'myPlugin' ), // The Page title
				  'manage_options', // The capability required for access to this item
				  'my_plugin-options', // the slug to use for the page in the URL
                                  'my_plugin_manage_menu' // The function to call to render the page
                               );

        /* Using registered $page handle to hook script load */
        add_action('admin_print_styles-' . $page, 'my_plugin_admin_styles');
    }

    function my_plugin_admin_styles() {
        /*
         * It will be called only on your plugin admin page, enqueue our script here
         */
        wp_enqueue_script( 'my_plugin_script' );
    }

    function my_plugin_manage_menu() {
        /* Output our admin page */
    }
?>
</pre>

== jQuery noConflict wrappers ==

'''Note''': The jQuery library included with WordPress loads in [http://docs.jquery.com/Using_jQuery_with_Other_Libraries "no conflict" mode]. This is to prevent compatibility problems with other javascript libraries that WordPress can load.

In "no-confict" mode, the $ shortcut is not available and the longer jQuery is used.  For example:

<pre>
$(document).ready(function(){
     $(#somefunction) ...
});
</pre>

Becomes:

<pre>
jQuery(document).ready(function(){
    jQuery(#somefunction) ...
});
</pre>

In order to use the default jQuery shortcut of $, you can use the following wrapper around your code:
<pre>
jQuery(document).ready(function($) {
    // $() will work as an alias for jQuery() inside of this function
});
</pre>

That wrapper will cause your code to be executed when the page finishes loading, and the $ will work for calling jQuery. If, for some reason, you want your code to execute immediately (instead of waiting for the DOM ready event), then you can use this wrapper method instead:
<pre>
(function($) {
    // $() will work as an alias for jQuery() inside of this function
})(jQuery);
</pre>

== Default scripts included with WordPress ==

{| class="wikitable"
|-
! '''Script Name'''
! '''Handle'''
|-
| [http://script.aculo.us Scriptaculous Root]
| scriptaculous-root
|-
| [http://script.aculo.us Scriptaculous Builder]
| scriptaculous-builder
|-
| [http://script.aculo.us Scriptaculous Drag &amp; Drop]
| scriptaculous-dragdrop
|-
| [http://script.aculo.us Scriptaculous Effects]
| scriptaculous-effects
|-
| [http://script.aculo.us Scriptaculous Slider]
| scriptaculous-slider
|-
| [http://script.aculo.us/ Scriptaculous] Sound
| scriptaculous-sound
|-
| [http://script.aculo.us Scriptaculous Controls]
| scriptaculous-controls
|-
| [http://script.aculo.us Scriptaculous]
| scriptaculous
|-
| [http://www.defusion.org.uk/ Image Cropper]
| Image cropper (not used in core, see jcrop)
|-
| [http://deepliquid.com/content/Jcrop.html Jcrop]
| Image copper
|-
| [http://code.google.com/p/swfobject/ SWFObject]
| swfobject
|-
| [http://swfupload.org/ SWFUpload]
| swfupload
|-
| [http://swfupload.org/ SWFUpload Degarade]
| swfupload-degrade
|-
| [http://swfupload.org/ SWFUpload Queue]
| swfupload-queue
|-
| [http://swfupload.org/ SWFUpload Handlers]
| swfupload-handlers
|-
| [http://jquery.com/ jQuery]
| jquery
|-
| [http://plugins.jquery.com/project/form/ jQuery Form]
| jquery-form
|-
| [http://plugins.jquery.com/project/color/ jQuery Color]
| jquery-color
|-
| [http://jqueryui.com/ jQuery UI Core]
| jquery-ui-core (Att.: This is not the whole core incl. all core plugins. Just the base core.)
|-
| [http://jqueryui.com/demos/tabs/ jQuery UI Tabs]
| jquery-ui-tabs
|-
| [http://jqueryui.com/demos/sortable/ jQuery UI Sortable]
| jquery-ui-sortable
|-
| [http://jqueryui.com/demos/draggable/ jQuery UI Draggable]
| jquery-ui-draggable
|-
| [http://jqueryui.com/demos/droppable/ jQuery UI Droppable]
| jquery-ui-droppable
|-
| [http://jqueryui.com/demos/selectable/ jQuery UI Selectable]
| jquery-ui-selectable
|-
| [http://jqueryui.com/demos/resizable/ jQuery UI Resizable]
| jquery-ui-resizable
|-
| [http://jqueryui.com/demos/dialog/ jQuery UI Dialog]
| jquery-ui-dialog
|-
| [http://trainofthoughts.org/blog/2007/02/15/jquery-plugin-scheduler/ jQuery Schedule]
| schedule
|-
| [http://plugins.jquery.com/project/suggest jQuery Suggest]
| suggest
|-
| [http://jquery.com/demo/thickbox/ ThickBox]
| thickbox
|-
| [http://plugins.jquery.com/project/hotkeys jQuery Hotkeys]
| jquery-hotkeys
|-
| [http://www.twilightuniverse.com Simple AJAX Code-Kit]
| sack
|-
| [http://www.alexking.org QuickTags]
| quicktags
|-
| [http://acko.net/dev/farbtastic Farbtastic (color picker)]
| farbtastic
|-
| [http://mattkruse.com ColorPicker (deprecated)]
| colorpicker
|-
| [http://tinymce.moxiecode.com/ Tiny MCE]
| tiny_mce
|-
| [http://www.prototypejs.org/ Prototype Framework]
| prototype
|-
| Autosave
| autosave
|-
| WordPress AJAX Response
| wp-ajax-response
|-
| List Manipulation
| wp-lists
|-
| WP Common
| common
|-
| WP Editor
| editor
|-
| WP Editor Functions
| editor-functions
|-
| AJAX Cat
| ajaxcat
|-
| Admin Categories
| admin-categories
|-
| Admin Tags
| admin-tags
|-
| Admin custom fields
| admin-custom-fields
|-
| Password Strength Meter
| password-strength-meter
|-
| Admin Comments
| admin-comments
|-
| Admin Users
| admin-users
|-
| Admin Forms
| admin-forms
|-
| XFN
| xfn
|-
| Upload
| upload
|-
| PostBox
| postbox
|-
| Slug
| slug
|-
| Post
| post
|-
| Page
| page
|-
| Link
| link
|-
| Comment
| comment
|-
| Threaded Comments
| comment-repy
|-
| Admin Gallery
| admin-gallery
|-
| Media Upload
| media-upload
|-
| Admin widgets
| admin-widgets
|-
|  Word Count
| word-count
|-
| Theme Preview 
| theme-preview
|-
| [http://www.JSON.org/json2.js JSON for JS]
| json2
|}

== Notes ==

* See <tt>WP_Scripts::add_data()</tt>, <tt>WP_Scripts::enqueue()</tt>
* Uses global: (<tt>unknown type</tt>) <tt>$wp_scripts</tt>
* jQuery UI Effects is NOT included with the jquery-ui-core

== Change Log ==

Since: 2.6 (BackPress version: r16)

== Source File ==

<tt>wp_enqueue_script()</tt> is located in {{Trac|wp-includes/functions.wp-scripts.php}}.

==Resources==

* [http://www.prelovac.com/vladimir/best-practice-for-adding-javascript-code-to-wordpress-plugin Best practice for adding JavaScript code to WordPress plugins]
*[http://planetozh.com/blog/2008/04/how-to-load-javascript-with-your-wordpress-plugin/ How To: Load Javascript With Your WordPress Plugin]
*[http://noteslog.com/post/how-to-load-javascript-in-wordpress-plugins/ How to load JavaScript in WordPress plugins]
*[http://themocracy.com/2009/04/using-jquery-with-wordpress/ Using jQuery with WordPress]
*[http://www.devlounge.net/articles/using-javascript-and-css-with-your-wordpress-plugin  Using JavaScript and CSS with your WordPress Plugin]
* [http://www.lost-in-code.com/platforms/wordpress/wordpress-using-javascript-libraries-with-your-plugin-or-theme/ Using Javascript libraries with your Wordpress plugin or theme]
* [http://www.ericmmartin.com/5-tips-for-using-jquery-with-wordpress/ 5 Tips For Using jQuery with WordPress]
* [http://beerpla.net/2010/01/13/wordpress-plugin-development-how-to-include-css-and-javascript-conditionally-and-only-when-needed-by-the-posts/ How to Include CSS and JavaScript Conditionally, and Only When Needed by the Posts]
* [http://fusi0n.org/coding/make-your-wordpress-plugins-use-a-different-version-of-a-bundled-javascript-library Make Your WordPress Plugins Use a Different Version of a Bundled JavaScript Library] Replacing built-in JavaScript libraries is usually a bad idea. Do this only on sites you administer personally.
* [http://scribu.net/wordpress/optimal-script-loading.html How to load JavaScript like a WordPress Master] Highly recommended.
* [http://justintadlock.com/archives/2009/08/06/how-to-disable-scripts-and-styles How to disable scripts and styles]

== Related ==

[[Function_Reference/wp_register_script|wp_register_script()]], [[Function_Reference/wp_deregister_script|wp_deregister_script()]], [[Function_Reference/wp_enqueue_script|wp_enqueue_script()]], [[Function_Reference/wp_dequeue_script|wp_dequeue_script()]]

{{Tag Footer}}
{{Copyedit}}

[[Category:Functions]]