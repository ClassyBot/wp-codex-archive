{{Languages|
{{en|Template_Tags/get_posts}}
{{ja|テンプレートタグ/get_posts}}
{{zh-cn|模版标签/get_posts}} 
}}
== Description ==

The most appropriate use for <tt>get_posts</tt> is to create an array of posts based on a set of parameters. It retrieves a list of latest posts or posts matching this criteria. <tt>get_posts</tt> can also be used to create Multiple Loops, though a more direct reference to [[Class_Reference/WP_Query|WP_Query]] using <tt>new WP_Query</tt> is preferred in this case.

The parameters of <tt>get_posts</tt> are similar to those of [[Function_Reference/get_pages|get_pages]] but is implemented quite differently, and should be used in appropriate scenarios. get_posts uses [[Class_Reference/WP_Query|WP_Query]], whereas get_pages queries the database more directly. Each have parameters that reflect this difference in implementation.

[[Function_Reference/query_posts|query_posts]] also uses [[Class_Reference/WP_Query|WP_Query]], but is not recommended because it directly alters the main loop by changing the variables of the global variable <tt>$wp_query</tt>. <tt>get_posts</tt>, on the other hand, simply references a new WP_Query object, and therefore does not effect or alter the main loop. 

If you would like to alter the main query before it is executed, you can hook into it using <tt>[[Plugin_API/Action_Reference/pre_get_posts|pre_get_posts]]</tt>. If you would just like to call an array of posts based on a small and simple set of parameters within a page, then <tt>get_posts</tt> is your best option.

== Usage ==

%%% <?php $posts_array = get_posts( $args ); ?> %%%

===Default Usage===

<pre>
<?php $args = array(
	'posts_per_page'  => 5,
	'numberposts'     => 5,
	'offset'          => 0,
	'category'        => '',
	'orderby'         => 'post_date',
	'order'           => 'DESC',
	'include'         => '',
	'exclude'         => '',
	'meta_key'        => '',
	'meta_value'      => '',
	'post_type'       => 'post',
	'post_mime_type'  => '',
	'post_parent'     => '',
	'post_status'     => 'publish',
	'suppress_filters' => true ); ?>
</pre>
Note: 'numberposts' and 'posts_per_page' can be used interchangeably.

== Parameters ==
For full parameters list see [[Class_Reference/WP_Query|<tt>WP_Query</tt>]]

See also [[Function_Reference/get_pages|<tt>get_pages()</tt>]] for example parameter usage.

<tt>get_posts()</tt> makes use of the [[Class_Reference/WP_Query|<tt>WP_Query</tt>]] class to fetch posts. See [[Class_Reference/WP_Query#Parameters|the parameters section]] of the <tt>WP_Query</tt> documentation for a list of parameters that this function accepts.

'''Note: ''' get_posts uses <tt>'suppress_filters' => true</tt> as default, while <tt>[[Function Reference/query_posts|query_posts()]]</tt> applies filters by default, this can be confusing when using query-modifying plugins, like WPML. Also note that even if <tt>'suppress_filters'</tt> is ''true'', any filters attached to <tt>pre_get_posts</tt> are still applied&mdash;only filters attached on <tt>'posts_*'</tt> or <tt>'comment_feed_*'</tt> are suppressed.

'''Note: ''' The category parameter needs to be the ID of the category, and not the category name.

'''Note: ''' The category parameter can be a comma separated list of categories, as the <tt>[http://core.trac.wordpress.org/browser/tags/3.3.1/wp-includes/post.php#L1369 get_posts()]</tt> function passes the 'category' parameter directly into WP_Query as 'cat'.

{{Parameter|$post_mime_type|string&#124;array|List of mime types or comma separated string of mime types.|Optional}}

== Return Value ==

; (array) : List of post objects. See <tt>[[Function_Reference/get_post#Return|get_post()]]</tt> return values.

Unlike <tt>[[Function_Reference/get_pages|get_pages()]]</tt>, <tt>get_posts()</tt> will  return ''private'' pages in the appropriate context (i.e., for an administrator). (See: Andreas Kirsch, [http://blog.blackhc.net/2009/01/wordpress-hacking-ii/ WordPress Hacking II], January 24, 2009-- accessed 2012-11-09.)

== Examples ==

=== Posts list with offset ===

If you have your blog configured to show just one post on the front page, but also want to list links to the previous five posts in category ID 1, you can use this:

<pre>
<ul>
<?php
global $post;
$args = array( 'numberposts' => 5, 'offset'=> 1, 'category' => 1 );
$myposts = get_posts( $args );
foreach( $myposts as $post ) :	setup_postdata($post); ?>
	<li><a href="<?php the_permalink(); ?>"><?php the_title(); ?></a></li>
<?php endforeach; ?>
</ul>
</pre>

'''Note:''' ''With use of the offset, the above query should be used only on a category that has more than one post in it, otherwise there'll be no output.''

==== Reset after Postlists with offset ====

If you need after the loop, the post you had before joining the foreach, you can use this:

<pre>
<ul>
<?php
global $post;
$tmp_post = $post;
$args = array( 'numberposts' => 5, 'offset'=> 1, 'category' => 1 );
$myposts = get_posts( $args );
foreach( $myposts as $post ) : setup_postdata($post); ?>
	<li><a href="<?php the_permalink(); ?>"><?php the_title(); ?></a></li>
<?php endforeach; ?>
<?php $post = $tmp_post; ?>
</ul>
</pre>

=== Access all post data ===

Some post-related data is not available to get_posts by default, such as post content through [[Function Reference/the_content|the_content()]], or the numeric ID. This is resolved by calling an internal function setup_postdata(), with the $post array as its argument:

<pre>
<?php
$args = array( 'numberposts' => 3 );
$lastposts = get_posts( $args );
foreach($lastposts as $post) : setup_postdata($post); ?>
	<h2><a href="<?php the_permalink(); ?>"><?php the_title(); ?></a></h2>
	<?php the_content(); ?>
<?php endforeach; ?>
</pre>

To access a post's ID or content without calling setup_postdata(), or in fact any post-specific data (data retained in [[Database_Description#Table:_wp_posts|the posts table]]), you can use <tt>$post->''COLUMN''</tt>, where <tt>''COLUMN''</tt> is the table column name for the data. So <tt>$post->ID</tt> holds the ID, <tt>$post->post_content</tt> the content, and so on. To display or print this data on your page use the [[Glossary#PHP|PHP]] echo command, like so:

<pre>
<?php echo $post->ID; ?>
</pre>

=== Latest posts ordered by title ===

To show the last ten posts sorted alphabetically in ascending order, the following will display their post date, title and excerpt:

<pre>
<?php
$args = array( 'numberposts' => 10, 'order'=> 'ASC', 'orderby' => 'title' );
$postslist = get_posts( $args );
foreach ($postslist as $post) :  setup_postdata($post); ?> 
	<div>
		<?php the_date(); ?>
		<br />
		<?php the_title(); ?>   
		<?php the_excerpt(); ?>
	</div>
<?php endforeach; ?>
</pre>

=== Random posts ===

Display a list of 5 posts selected randomly by using the [[Glossary#MySQL|MySQL]] RAND() function for the orderby parameter value:

<pre>
<ul>
<?php
$args = array( 'numberposts' => 5, 'orderby' => 'rand' );
$rand_posts = get_posts( $args );
foreach( $rand_posts as $post ) : ?>
	<li><a href="<?php the_permalink(); ?>"><?php the_title(); ?></a></li>
<?php endforeach; ?>
</ul>
</pre>

=== Show all attachments ===

Do this outside any [[The_Loop|Loops]] in your template.

<pre>
<?php
$args = array( 'post_type' => 'attachment', 'numberposts' => -1, 'post_status' => 'any', 'post_parent' => null ); 
$attachments = get_posts( $args );
if ($attachments) {
	foreach ( $attachments as $post ) {
		setup_postdata($post);
		the_title();
		the_attachment_link($post->ID, false);
		the_excerpt();
	}
}
?>
</pre>

=== Show attachments for the current post ===

Do this inside [[The Loop]] (where <var>$post->ID</var> is available).

<pre>
<?php
$args = array( 'post_type' => 'attachment', 'numberposts' => -1, 'post_status' =>'any', 'post_parent' => $post->ID ); 
$attachments = get_posts($args);
if ($attachments) {
	foreach ( $attachments as $attachment ) {
		echo apply_filters( 'the_title' , $attachment->post_title );
		the_attachment_link( $attachment->ID , false );
	}
}
?>
</pre>

=== Get a post by its slug ===

Allows you to get a post ID by post slug. The caller_get_posts argument excludes sticky posts from this custom query. 

<pre>
<?php
$the_slug = 'my_slug';
$args=array(
  'name' => $the_slug,
  'post_type' => 'post',
  'post_status' => 'publish',
  'numberposts' => 1
);
$my_posts = get_posts($args);
if( $my_posts ) {
echo 'ID on the first post found '.$my_posts[0]->ID;
}
?>
</pre>

=== Taxonomy Parameters ===

Show posts associated with certain taxonomy. If specifying a taxonomy registered to a custom post type then instead of using 'category' you would use '{custom_taxonomy_name}'. For instance, if you had a custom taxonomy called "genre" and wanted to only show posts from the "jazz" genre you would use the below code.

<pre>
<?php
$args = array(
   'numberposts' => 8,
   'orderby' => 'rand',
   'post_type' => 'albums',
   'genre' => 'jazz',
   'post_status' => 'publish'
);
$show_albums = get_posts ( $args );
?>
</pre>

Following example displays posts tagged with 'jazz', under 'genre' custom taxonomy, using 'tax_query':

<pre>
$args = array(
	'tax_query' => array(
		array(
			'taxonomy' => 'genre',
			'field' => 'slug',
			'terms' => 'jazz'
		)
	)
);
$postslist = get_posts( $args );
</pre>

Refer to [[Class_Reference/WP_Query#Taxonomy_Parameters|the taxonomy parameters section]] of the <tt>WP_Query</tt> documentation for more examples.

=== Custom Field Parameters ===

Show posts associated with a certain custom field. Following example displays posts from the 'product' post type that have meta key 'featured' with value 'yes', using 'meta_query':

<pre>
$args = array(
	'post_type' => 'product',
	'meta_query' => array(
		array(
			'key' => 'featured',
			'value' => 'yes',
		)
	)
 );
$postslist = get_posts( $args );
</pre>

Refer to [[Class_Reference/WP_Query#Custom_Field_Parameters|the custom fields parameters section]] of the <tt>WP_Query</tt> documentation for more examples.

==Change Log==

* Since: [[Version 1.2|1.2.0]]

==Source File==

<tt>get_posts()</tt> is located in {{Trac|wp-includes/post.php}}.

== Related ==

{{Tag Footer}}

[[Category:Template Tags]]