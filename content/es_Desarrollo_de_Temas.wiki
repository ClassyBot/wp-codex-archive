{{Draft}}

{{Languages|
{{bn|থিম ডেভলপমেন্ট}}
{{en|Theme Development}}
{{es|Desarrollo de Temas}}
{{ja|テーマの作成}}
{{ko|Theme Development}}
{{pt-br|Desenvolvimento de Temas}}
{{ru|Создание тем}}
{{zh-cn|主题开发}}
{{zh-tw|主題開發}}
}}

__TOC__

Este artículo es acerca de desarrollar Temas de WordPress. Si deseas aprender más acerca de como instalar y usar los Temas, revisa [[es:Usando Temas|Usar temas]]. Este asunto se distingue de [[es:Usando Temas|Usar temas]] porque discute los aspectos técnicos de escribir código para construir tus propios Temas en vez de cómo activar los temas u obtener nuevos temas.

== Porqué Temas de WordPress ==

Los Temas de WordPress son ficheros que trabajan conjuntamente para crear el diseño y funcionalidad de un sitio de WordPress. Cada tema puede ser diferente, ofreciendo muchas opciones para que los dueños de sitios cambien al instante la apariencia de su sitio web.

Puede que desees desarrollar temas de WordPress para tu propio uso,para el proyecto de un cliente o para [[es:Theme_Review|mandarlas al directorio de temas de Wordpress]] [[Theme_Review|submit to the WordPress Theme Directory]]. ¿Porqué sino deberías construir un tema de Wordpress?

* Para crear una apariencia única para tu sitio web.
* Para usar la ventaja de las [[es:Stepping Into Templates|plantillas]] [[Stepping Into Templates|templates]], [[es:Template Tags|etiquetas de plantillas]] [[Template Tags|template tags]], y [[es:The Loop in Action| el bucle de WordPress]] [[The Loop in Action|the WordPress Loop]] para generar diferentes resultados y apariencias del sitio web.
* Para proveer deplantillas alternativas para características específicas del sitio, tales como [[esCategory Templates|páginas de categoría]]  [[Category Templates|category pages]] y buscar paginas de resultado.
* Para rápidamente cambiar entre dos disposiciones de sitio, o aprovecharse de un  [[es:Plugins|selector de tema o estilo]] [[Plugins|Theme or style switcher]] para permitir a los propietarios de sitio el cambiar la apariencia de tu sitio.

Un tema de WordPress también tiene muchos beneficios.

* Separa los estilos de presentación y  [[es:Stepping Into Templates|ficheros de plantilla]] [[Stepping Into Templates|template files]] de los ficheros del sistema tal que el sitio se modernice sin cambios drásticos para la presentación visual del sitio.
* Permite personalizar la funcionalidad única del sitio a ese tema.
* Permite cambios rápidos del diseño visual y la disposición de un sitio WordPress.
* Elimina la necesidad para un propietario de sitio web de tener que aprender CSS, HTML, y PHP para tener un sitio web que luzca genial.

¿Porqué deberías construir tu propio tema de WordPress? Esa es la verdadera pregunta.

* Es una oportunidad de aprender mas sobre CSS, HTML y PHP.
* Es una oportunidad de poner en práctica tus conocimientos de CSS, HTML y PHP.
* Es creativo.
* Es divertido (la mayor parte del tiempo).
* Si tú [[es:Theme_Review|la distribuyes públicamente]] [[Theme_Review|release it to the public]], puedes sentirte bien de haber compartido y devuelto algo a la  [[es:Contribuir_con_WordPress|comunidad de WordPress]] (vale, derecho a chulearte)

== Normas de desarrollo de temas ==

Los temas de WordPress deberían codificarse utilizando las siguientes normas:

* Usa PHP bien estructurado, libre de errores y HTML válido. Mira [[es:WordPress Coding Standards| normas de codificación de Wordpress]] [[WordPress Coding Standards]].
* Usa CSS limpio y válido. Mira [[es:CSS Coding Standards|normas de codificación de CSS]] [[CSS Coding Standards]].
* Sigue las lineas de diseño en [[es:Site Design and Layout|diseño de sitio y disposición]] [[Site Design and Layout]].

=== Anatomía de un tema ===

Los temas  de WordPress habitan en subdirectorios del directorio de temas de WordPress (por defecto ''wp-content/themes/'') el cuál [[es:Editing wp-config.php#Moving_themes_folder| no puede ser directamente movido]] [[Editing wp-config.php#Moving_themes_folder|can not be directly moved]] usando el fichero ''wp-config.php''. çel subdirectorio de temas contiene todos los ficheros de hojas de estilo de tema, [[es:Stepping Into Templates|ficheros de plantilla]] [[Stepping Into Templates|template files]], y ficheros de funciones opcionales (''functions.php''), ficheros JavaScript e imágenes. Por ejemplo, un tema llamado "test" residiría en el directorio ''wp-content/themes/test/''. Evita usar números para el nombre del tema, ya que previene de que sea mostrado en la lista de temas disponibles.

WordPress incluye un tema por defecto en cada nueva instalación. Examina los ficheros en el tema por defecto concienzudamente para conseguir una mejor idea de como construir tus propios ficheros de tema.

Para una guía visual, mira esta [http://yoast.com/wordpress-theme-anatomy/ infografía sobre anatomía de temas de WordPress].

Los temas de WordPress típicamente consisten de tres tipos principales de ficheros, además de imágenes y ficheros JavaScript. 

# La hoja de estilos llamada ''style.css'', que controla la presentación (diseño visual y disposición) de las páginas de sitios web. 
# [[es:Stepping Into Templates|Los ficheros de plantillas de WordPress]] [[Stepping Into Templates|WordPress template files]] que controlan el modo en que las paginas del sitio generan la información desde tu base de datos de WordPress a ser mostrada en el sitio. 
# El fichero de funciones opcionales (''functions.php'') como parte de los ficheros del tema de WordPress. 

Veamoslos individualmente.

==== Temas hijo ====

El tema mas simple posible es un tema hijo que incluya únicamente un fichero ''style.css'', más alguna imagen. Esto es posible porque es un ''hijo'' de otro tema el cual actúa como su progenitor. 

Para una guia detallada para temas hijo, mira [[es:Temas_hijos|Temas Hijo]] en español, o en inglés [[Child Themes]].
<!-- We need to improve the Child Theme rather than link to an external site like this: http://op111.net/53 this tutorial by op111 -->

=== Hoja de estilos de tema ===

Además de información de estilo CSS para tu tema, ''style.css'' provee detalles sobre el tema en forma de comentarios. La  hoja de estilo '''debe''' proveer detalles sobre el tema en forma de comentarios. '''No se permiten dos temas que tengan los mismos detalles''' listados en su comentario [[es:File Header|encabezados]][[File Header|headers]], ya que esto conllevará problemas en el [[es:Administration_Panels#Design_-_Change_the_Look_of_your_Blog|diálogo deseleccion de tema]] [[Administration_Panels#Design_-_Change_the_Look_of_your_Blog|Theme selection dialog]]. Sí haces tu propio tema copiando uno ya existente, asegúrate de que cambias su información lo primero.

Lo siguiente es un ejemplo de las pocas primeras lineas de la hoja de  estilos, llamada el encabezado de hoja de estilo, para el tema "Twenty Thirteen":

<pre>
/*
Theme Name: Twenty Thirteen
Theme URI: http://wordpress.org/themes/twentythirteen
Author: the WordPress team
Author URI: http://wordpress.org/
Description: The 2013 theme for WordPress takes us back to the blog, featuring a full range of post formats, each displayed beautifully in their own unique way. Design details abound, starting with a vibrant color scheme and matching header images, beautiful typography and icons, and a flexible layout that looks great on any device, big or small.
Version: 1.0
License: GNU General Public License v2 or later
License URI: http://www.gnu.org/licenses/gpl-2.0.html
Tags: black, brown, orange, tan, white, yellow, light, one-column, two-columns, right-sidebar, flexible-width, custom-header, custom-menu, editor-style, featured-images, microformats, post-formats, rtl-language-support, sticky-post, translation-ready
Text Domain: twentythirteen

This theme, like WordPress, is licensed under the GPL.
Use it to make something cool, have fun, and share what you've learned with others.
*/
</pre>

''NB: El nombre usado para el autor se sugiere que sea el mismo que el nombre de usuario de wordpress.org del autor de tema, aunque puede ser el verdadero nombre del autor también. La opción es del autor del tema.''

Nota la lista de etiquetas usadas para describir el tema. Estas permiten al usuario encontrar tu tema utilizando el filtro de etiqueta. Aquí tienes la  [http://wordpress.org/extend/themes/tag-filter/ lista completa de etiquetas permitidas]. 

'''Las líneas de comentario del encabezado de ''style.css'' son requisito para que WordPress  sea capaz de identificar el tema''' y lo muestre en el [[es:Administration_Panels|panel de administration ]][[Administration_Panels|Administration Panel]] bajo [[es:Administration_Panels#Design_-_Change_the_Look_of_your_Blog|Diseño]] [[Administration_Panels#Design_-_Change_the_Look_of_your_Blog|Design]] > [[es:Administration_Panels#Themes|Temas]] [[Administration_Panels#Themes|Themes]] como una opción de tema disponible junto con otros temas instalados.


==== Lineas guía de hojas de estilo ====

* Sigue las [[CSS_Coding_Standards|CSS coding standards]] [[es:Normas de codificación de CSS|normas de codificación de CSS]] cuando crees tu CSS.
* Usa CSS válido cuando sea posible. Como una excepción, usa prefijos específicos de vendedores para aprovecharte de las características de CSS3.
* Minimiza los hacks CSS. La excepción obvia es el soporte a navegadores específicos, habitualmente versiones de IE. Si es posible, separa los hacks CSS en secciones separadas o ficheros separados.
* Todos los elementos HTML posibles deberían ser estilizados por el tema, tanto en el contenido de la pagina/envíos así como  en el contenido de comentarios.
** Tablas, leyendas, imágenes, listas, citas de bloques, etcétera.
* Se recomienda encarecidamente añadir estilos pro-impresión.
** Puedes incluir una hoja de estilo de impresión con <tt>media="print"</tt> o añadirlo dentro un bloque de medios de impresión en tu hoja de estilo principal.

=== Functions File ===

Un tema opcionalmente puede usar un archivo de funciones, que reside en el subdirectorio "theme" y es llamado: ''functions.php''. Este archivo actúa, básicamente como un [[Plugins|plugin]], y si está presente en el tema que estás usando, es cargado automáticamente durante el inicio de WordPress (tanto para páginas de administración como para páginas externas). Usos Sugeridos para este archivo:

* Habilitar [[Theme Features]] asi como [[Sidebars]], [[Navigation Menus]], [[Post Thumbnails]], [[Post Formats]], [[Custom Headers]], [[Custom Backgrounds]] y otros.
* Definir funciones usadas en varios archivos de plantilla de su tema.
* Configurar un menú de opciones, dando a los propietarios de sitios opciones de colores, estilos y otros aspectos de su tema.

El Tema por defecto de WordPress contiene un archivo ''functions.php'' que define muchas de estas características, asi que es posible que desees usarlo como modelo. Ya que '' functions.php '' básicamente funciona como un complemento, la lista [[Function_Reference]] es el mejor lugar para obtener más información sobre lo que puede hacer con este archivo.

'''Nota para decidir cuándo agregar funciones a '' functions.php '' o a un complemento específico:'''

Te puedes encontrar con que necesites que la misma función esté disponible para más de un tema principal o tema "padre". Si ese es el caso, la función debe crearse en un [[Plugins | plugin]] en lugar de un functions.php para el tema específico. Esto puede incluir etiquetas de plantilla y otras funciones específicas. Las funciones contenidas en los complementos/plugins serán vistas por todos los temas.

=== Template Files ===

[[Stepping Into Templates|Templates]] son archivos fuente `PHP` utilizados para generar las páginas solicitadas por los visitantes, y se envían como `HTML`. Los archivos de plantilla están formados por `HTML`, `PHP`, y [[Template Tags|WordPress Template Tags]]. 

Miremos las diversas plantillas que se pueden definir como parte de un tema.

WordPress te permite definir plantillas separadas para los diversos aspectos de tu sitio. Sin embargo, no es esencial tener todos estos diferentes archivos de plantilla para que tu sitio funcione completamente. Las plantillas se eligen y se generan en función de la [[Template Hierarchy]], según las plantillas disponibles en un tema en particular.

Como desarrollador de Temas, puedes elegir qué tanta personalización deseas implementar usando plantillas. Por ejemplo, como caso extremo, puedes usar solo un archivo de plantilla, llamado '' index.php '' como la plantilla para '' todas '' las páginas generadas y mostradas por el sitio. Un uso muy común es tener diferentes archivos de plantilla para generar resultados diferentes, para permitir la máxima personalización.

==== Template Files List ====

Aquí esta la lista de archivos "Theme" reconocidos por WordPress. Por supuesto, su Tema puede contener cualquier hoja de estilos, imágenes o archivos. Sólo tenga en cuenta que lo siguiente tiene un significado especial para WordPress -- vea [[Template Hierarchy]] para más información.
;''style.css'': La hoja de estilos principal. Esta '''debe''' ser incluída con su tema, y debe contener el encabezado de información para su Tema.
;''rtl.css'': La hoja de estilo rtl. Esta se incluirá '' 'automáticamente' '' si la dirección del texto del sitio web es de derecha a izquierda. Esto se puede generar utilizando el complemento/pluggin [http://wordpress.org/extend/plugins/rtler/ RTLer].
;''index.php'': La plantilla principal. Si su tema proporciona sus propias plantillas, '' index.php '' debe estar presente.
;''comments.php'': La plantilla de comentarios.
;''front-page.php'': La plantilla de la página principal.
;''home.php'': La plantilla de la página de inicio, que es la página principal por defecto. Si usa una [[Creating a Static Front Page|static front page]], esta es la plantilla de la página con las últimas publicaciones.
;''single.php'': La plantilla de publicación individual. Se usa cuando se consulta una sola publicación. Para esta y todas las demás plantillas de consulta, se utiliza '' index.php '' si la plantilla de consulta no está presente.
;''single-{post-type}.php'': The single post template used when a single post from a custom post type is queried. For example, ''single-book.php'' would be used for displaying single posts from the custom post type named "book". ''index.php'' is used if the query template for the custom post type is not present.
;''page.php'': The page template. Used when an individual [[Pages|Page]] is queried.
;''category.php'': The [[Category Templates|category template]]. Used when a category is queried.
;''tag.php'': The [[Tag Templates|tag template]]. Used when a tag is queried.
;''taxonomy.php'': The [[Taxonomy Templates|term template]]. Used when a term in a custom taxonomy is queried.
;''author.php'': The [[Author Templates|author template]]. Used when an author is queried.
;''date.php'': The date/time template. Used when a date or time is queried. Year, month, day, hour, minute, second.
;''archive.php'': The archive template. Used when a category, author, or date is queried. Note that this template will be overridden by ''category.php'', ''author.php'', and ''date.php'' for their respective query types.
;''search.php'': The search results template. Used when a search is performed.
;''attachment.php'': Attachment template. Used when viewing a single attachment.
;''image.php'': Image attachment template. Used when viewing a single image attachment. If not present, attachment.php will be used.
;''404.php'': The '''[[Creating_an_Error_404_Page|404 Not Found]]''' template. Used when WordPress cannot find a post or page that matches the query.

These files have a special meaning with regard to WordPress because they are used as a replacement for ''index.php'', when available, according to the [[Template Hierarchy]], and when the corresponding [[Conditional Tags|Conditional Tag]] returns true. For example, if only a single post is being displayed, the <tt>[[Conditional Tags#A Single Post Page|is_single()]]</tt> function returns 'true', and, if there is a ''single.php'' file in the active Theme, that template is used to generate the page.

==== Basic Templates ====

At the very minimum, a WordPress Theme consists of two files:

* ''style.css''
* ''index.php''

Both of these files go into the Theme directory. The ''index.php'' [[Stepping Into Templates|template file]] is very flexible. It can be used to include all references to the header, sidebar, footer, content, categories, archives, search, error, and any other page created in WordPress.

Or, it can be divided into modular template files, each one taking on part of the workload. If you do not provide other template files, WordPress may have default files or functions to perform their jobs. For example, if you do not provide a ''searchform.php'' template file, WordPress has a default function to display the search form.

Typical template files include:

* ''comments.php''
* ''comments-popup.php''
* ''footer.php''
* ''header.php''
* ''sidebar.php''

Using these template files you can put template tags within the ''index.php'' master file to include these other files where you want them to appear in the final generated page.

* To include the header, use <tt>[[Function Reference/get header|get_header()]]</tt>.
* To include the sidebar, use <tt>[[Function Reference/get sidebar|get_sidebar()]]</tt>.
* To include the footer, use <tt>[[Function Reference/get footer|get_footer()]]</tt>.
* To include the search form, use <tt>[[Function Reference/get_search_form|get_search_form()]]</tt>.

Here is an example of the ''include'' usage:

<pre>
<?php get_sidebar(); ?>

<?php get_footer(); ?>
</pre>

The default files for some template functions may be deprecated or not present, and you should provide these files in your theme. As of version 3.0, the deprecated default files are located in {{Trac|wp-includes/theme-compat}}. For example, you should provide ''header.php'' for the function <tt>[[Function Reference/get_header|get_header()]]</tt> to work safely, and ''comments.php'' for the function <tt>[[Function Reference/comments_template|comments_template()]]</tt>.

For more on how these various Templates work and how to generate different information within them, read the [[Templates]] documentation.

====Custom Page Templates====

The files defining each Page Template are found in your [[Using Themes|Themes]] directory.  To create a new Custom Page Template for a Page you must create a file. Let's call our first Page Template for our Page ''snarfer.php''.  At the top of the ''snarfer.php'' file, put the following:

 <?php
 /*
 Template Name: Snarfer
 */
 ?>

The above code defines this ''snarfer.php'' file as the "Snarfer" Template.  Naturally, "Snarfer" may be replaced with most any text to change the name of the Page Template. This Template Name will appear in the Theme Editor as the link to edit this file.

The file may be named ''almost'' anything with a ''.php'' extension (see [[Theme Development#Template Files List|reserved Theme filenames]] for filenames you should ''not'' use; these are special file names WordPress reserves for specific purposes).

What follows the above five lines of code is up to you.  The rest of the code you write will control how Pages that use the Snarfer Page Template will display.  See [[Template Tags]] for a description of the various WordPress Template functions you can use for this purpose.  You may find it more convenient to copy some other Template (perhaps ''page.php'' or ''index.php'') to ''snarfer.php'' and then add the above five lines of code to the beginning of the file.  That way, you will only have to ''alter'' the HTML and PHP code, instead of creating it all from scratch.  Examples are shown [[#Examples|below]]. Once you have created the Page Template and placed it in your Theme's directory, it will be available as a choice when you create or edit a Page. ('''Note''': when creating or editing a Page, the Page Template option does not appear unless there is at least one template defined in the above manner.)

==== Query-based Template Files ====

WordPress can load different [[Stepping Into Templates|Templates]] for different ''query'' types. There are two ways to do this: as part of the built-in [[Template Hierarchy]], and through the use of [[Conditional Tags]] within [[The Loop]] of a template file.

To use the [[Template Hierarchy]], you basically need to provide special-purpose Template files, which will automatically be used to override ''index.php''. For instance, if your Theme provides a template called ''category.php'' and a category is being queried, ''category.php'' will be loaded instead of ''index.php''. If ''category.php'' is not present, ''index.php'' is used as usual.

You can get even more specific in the Template Hierarchy by providing a file called, for instance, ''category-6.php'' -- this file will be used rather than ''category.php'' when generating the page for the category whose ID number is 6. (You can find category ID numbers in [[Administration_Panels#Manage_-_Change_your_content|Manage]] > [[Administration_Panels#Categories|Categories]] if you are logged in as the site administrator in WordPress version 2.3 and below. In WordPress 2.5 the ID column was removed from the Admin panels. You can locate the category id by clicking 'Edit Category' and looking on the URL address bar for the cat_ID value. It will look '...categories.php?action=edit&cat_ID=3' where '3' is the category id). For a more detailed look at how this process works, see [[Category Templates]].

If your Theme needs to have even more control over which Template files are used than what is provided in the [[Template Hierarchy]], you can use [[Conditional Tags]]. The Conditional Tag basically checks to see if some particular condition is true, within the [[The_Loop_in_Action|WordPress Loop]], and then you can load a particular template, or put some particular text on the screen, based on that condition.

For example, to generate a distinctive stylesheet in a post only found within a specific category, the code might look like this:

<pre>
<?php
if ( is_category( '9' ) ) {
    get_template_part( 'single2' ); // looking for posts in category with ID of '9'
} else {
    get_template_part( 'single1' ); // put this on every other category post
}
?>
</pre>

Or, using a query, it might look like this:

<pre>
<?php
$post = $wp_query->post;
if ( in_category( '9' ) ) {
    get_template_part( 'single2' );
} else {
    get_template_part( 'single1' );
}
?>
</pre>

In either case, this example code will cause different templates to be used depending on the category of the particular post being displayed. Query conditions are not limited to categories, however, see the [[Conditional Tags]] article to look at all the options.

==== Defining Custom Templates ====

It is possible to use the WordPress plugin system to define additional templates that are shown based on your own custom criteria. This advanced feature can be accomplished using the "template_redirect" [[Plugin API#Current Hooks For Actions|action hook]]. More information about creating plugins can be found in the [[Plugin API]] reference.

==== Including Template Files ====

To load another template (other than header, sidebar, footer, which have predefined included commands like <tt>[[Function Reference/get header|get_header()]]</tt>) into a template, you can use <tt>[[Function_Reference/get_template_part|get_template_part()]]</tt>. This makes it easy for a Theme to reuse sections of code.

==== Referencing Files From a Template ====

When referencing other files within the same Theme, avoid hard-coded URIs and file paths. Instead reference the URIs and file paths with <tt>[[Function_Reference/bloginfo|bloginfo()]]</tt>: see [[Theme_Development#Referencing_Files_From_a_Template|Referencing Files From a Template]].

Note that URIs that are used in the stylesheet are relative to the stylesheet, not the page that references the stylesheet. For example, if you include an ''images/'' directory in your Theme, you need only specify this relative directory in the CSS, like so: 

<pre>
h1 {
    background-image: url(images/my-background.jpg);
}
</pre>

==== Plugin API Hooks ====

When developing Themes, it's good to keep in mind that your Theme should be set up so that it can work well with any WordPress plugins users might decide to install. Plugins add functionality to WordPress via "Action Hooks" (see [[Plugin API]] for more information).

Most Action Hooks are within the core PHP code of WordPress, so your Theme does not have to have any special tags for them to work. But a few Action Hooks do need to be present in your Theme, in order for Plugins to display information directly in your header, footer, sidebar, or in the page body. Here is a list of the special Action Hook Template Tags you need to include:

; [[Function Reference/wp head|wp_head()]]
: Goes in the <tt>&lt;head&gt;</tt> element of a theme, in ''header.php''. Example plugin use: add JavaScript code. 

; [[Function Reference/wp footer|wp_footer()]]
: Goes in ''footer.php'', just before the closing <tt></body></tt> tag. Example plugin use: insert PHP code that needs to run after everything else, at the bottom of the footer. Very commonly used to insert web statistics code, such as Google Analytics.

; [[Function Reference/wp meta|wp_meta()]]
: Typically goes in the <tt><nowiki><li>Meta</li></nowiki></tt> section of a Theme's menu or sidebar; ''sidebar.php'' template. Example plugin use: include a rotating advertisement or a tag cloud.

; [[Function Reference/comment form|comment_form()]]
: Goes in ''comments.php'' directly before the file's closing tag (<tt></div></tt>). Example plugin use: display a comment preview.

For a real world usage example, you'll find these plugin hooks included in the default Theme's templates.

==== Theme Customization API ====
As of WordPress 3.4, a new Theme Customization feature is available by default for nearly all WordPress themes. The Theme Customization admin page is automatically populated with options that a theme declares support for with [[Function Reference/add_theme_support|add_theme_support()]] or using the Settings API, and allows admins to see non-permanent previews of changes they make in real time.

Theme and plugin developers interested in adding new options to a theme's Theme Customization page should see the documentation on the [[Theme_Customization_API|Theme Customization API]]. Additional tutorials on the Theme Customization API are available at the [http://ottopress.com/2012/how-to-leverage-the-theme-customizer-in-your-own-themes/ Ottopress.com website].

==== Untrusted Data ====

You should escape dynamically generated content in your Theme, especially content that is output to HTML attributes. As noted in [[WordPress_Coding_Standards|WordPress Coding Standards]], text that goes into attributes should be run through <tt>[[Function Reference/esc_attr|esc_attr()]]</tt> so that single or double quotes do not end the attribute value and invalidate the XHTML and cause a security issue. Common places to check are <tt>title</tt>, <tt>alt</tt>, and <tt>value</tt> attributes.

There are few special template tags for common cases where safe output is needed. One such case involves outputing a post title to a <tt>title</tt> attribute using [[Function Reference/the_title_attribute|<tt>the_title_attribute()</tt>]] instead of [[Function Reference/the_title|<tt>the_title()</tt>]] to avoid a security vulnerability. Here's an example of correct escaping for the <tt>title</tt> attribute of a post title link when using translatable text:
<pre><a href="<?php the_permalink(); ?>" title="<?php sprintf( __( 'Permanent Link to %s', 'theme-name' ), the_title_attribute( 'echo=0' ) ); ?>"><?php the_title(); ?></a></pre>

Replace deprecated escape calls with the correct calls: [[Function Reference/wp_specialchars|<tt>wp_specialchars()</tt>]] and [http://php.net/manual/en/function.htmlspecialchars.php <tt>htmlspecialchars()</tt>] with [[Function Reference/esc_html|<tt>esc_html()</tt>]], [[Function Reference/clean_url|<tt>clean_url()</tt>]] with [[Function Reference/esc_url|<tt>esc_url()</tt>]], and [[Function Reference/attribute_escape|<tt>attribute_escape()</tt>]] with [[Function Reference/esc_attr|<tt>esc_attr()</tt>]]. See [[Data_Validation#Attribute_Nodes|Data_Validation]] for more.

==== Translation Support / I18n  ====

To ensure smooth transition for language localization, use the WordPress gettext-based [[I18n for WordPress Developers|i18n]] functions for wrapping all translatable text within the template files. This makes it easier for the translation files to hook in and translate the labels, titles and other template text into the site's current language. See more at [[WordPress Localization]] and [[I18n for WordPress Developers]].

==== Theme Classes ====

Implement the following template tags to add WordPress-generated class attributes to body, post, and comment elements. For post classes, apply only to elements within [[The Loop]].

* [[Function Reference/body class|body_class()]]
* [[Function Reference/post class|post_class()]]
* [[Function Reference/comment class|comment_class()]]

=== Template File Checklist ===

When developing a Theme, check your template files against the following template file standards.

==== Document Head (header.php) ====

* Use the proper [http://en.wikipedia.org/wiki/Document_Type_Declaration DOCTYPE].
* The opening <tt><html></tt> tag should include [[Function_Reference/language_attributes|<tt>language_attributes()</tt>]].
* The <tt><meta></tt> charset element should be placed before everything else, including the <tt><title></tt> element.
* Use [[Function_Reference/bloginfo|<tt>bloginfo()</tt>]] to set the <tt><meta></tt> charset and description elements.
* Use [[Function_Reference/wp_title|<tt>wp_title()</tt>]] to set the <tt><title></tt> element. [[Function_Reference/wp_title#Note|See why]].
* Use [[Function_Reference/get_stylesheet_uri|<tt>get_stylesheet_uri()</tt>]] to get the URL of the current theme stylesheet.
* Use [[Automatic Feed Links]] to add feed links.
* Add a call to [[Function_Reference/wp_head|<tt>wp_head()</tt>]] before the closing <tt></head></tt> tag. Plugins use this [[Plugin API/Action Reference|action hook]] to add their own scripts, stylesheets, and other functionality.

Here's an example of a correctly-formatted HTML5 compliant head area:

<pre>
<!DOCTYPE html>
<html <?php language_attributes(); ?>>
    <head>
        <meta charset="<?php bloginfo( 'charset' ); ?>" />
        <title><?php wp_title(); ?></title>
        <meta name="description" content="<?php bloginfo( 'description' ); ?>">
        <link rel="profile" href="http://gmpg.org/xfn/11" />
        <link rel="stylesheet" href="<?php echo get_stylesheet_uri(); ?>" type="text/css" media="screen" />
        <link rel="pingback" href="<?php bloginfo( 'pingback_url' ); ?>" />
        <?php if ( is_singular() && get_option( 'thread_comments' ) ) wp_enqueue_script( 'comment-reply' ); ?>
        <?php wp_head(); ?>
    </head>
</pre>

==== Navigation Menus (''header.php'') ====

* The Theme's main navigation should support a custom menu with [[Function_Reference/wp_nav_menu|<tt>wp_nav_menu()</tt>]].
** Menus should support long link titles and a large amount of list items. These items should not break the design or layout.
** Submenu items should display correctly. If possible, support drop-down menu styles for submenu items. Drop-downs allowing showing menu depth instead of just showing the top level.

==== Widgets (''sidebar.php'') ====

* The Theme should be widgetized as fully as possible. Any area in the layout that works like a widget (tag cloud, blogroll, list of categories) or could accept widgets (sidebar) should allow widgets.
* Content that appears in widgetized areas by default (hard-coded into the sidebar, for example) should disappear when widgets are enabled from Appearance > Widgets.

==== Footer (''footer.php'') ====

* Use the [[Function_Reference/wp_footer|<tt>wp_footer()</tt>]] call, to appear just before closing <tt>body</tt> tag.

<pre>
<?php wp_footer(); ?>
</body>
</html>
</pre>

==== Index (''index.php'') ====

* Display a list of posts in excerpt or full-length form. Choose one or the other as appropriate.
* Include [[Function_Reference/wp_link_pages|<tt>wp_link_pages()</tt>]] to support navigation links within posts.

==== Archive (''archive.php'') ====

* Display archive title (tag, category, date-based, or author archives).
* Display a list of posts in excerpt or full-length form. Choose one or the other as appropriate.
* Include [[Function_Reference/wp_link_pages|<tt>wp_link_pages()</tt>]] to support navigation links within posts.

==== Pages (''page.php'') ====

* Display page title and page content.
* Display comment list and comment form (unless comments are off).
* Include [[Function_Reference/wp_link_pages|<tt>wp_link_pages()</tt>]] to support navigation links within a page.
* Metadata such as tags, categories, date and author should not be displayed.
* Display an "Edit" link for logged-in users with edit permissions.

==== Single Post (''single.php'') ====

* Include [[Function_Reference/wp_link_pages|<tt>wp_link_pages()</tt>]] to support navigation links within a post.
* Display post title and post content.
** The title should be plain text instead of a link pointing to itself.
* Display the post date.
** Respect the [[Settings General Screen|date and time format settings]] unless it's important to the design. (User settings for date and time format are in [[Administration Panels]] > [[Administration Panels#Settings|Settings]] > [[Administration Panels#General|General]]).
** For output based on the user setting, use <tt>the_time( get_option( 'date_format' ) )</tt>.
* Display the author name (if appropriate).
* Display post categories and post tags.
* Display an "Edit" link for logged-in users with edit permissions.
* Display comment list and comment form.
* Show navigation links to next and previous post using [[Function_Reference/previous_post_link|<tt>previous_post_link()</tt>]] and [[Function_Reference/next_post_link|<tt>next_post_link()</tt>]].

==== Comments (''comments.php'') ====

* Author comment should be  highlighted differently.
* Display gravatars (user avatars) if appropriate.
* Support threaded comments.
* Display trackbacks/pingbacks.
* This file shouldn’t contain function definitions unless in the [http://php.net/manual/en/function.function-exists.php <tt>function_exist()</tt>] check to avoid redeclaration errors. Ideally all functions should be in ''functions.php''.

==== Search Results (''search.php'') ====

* Display a list of posts in excerpt or full-length form. Choose one or the other as appropriate.
* The search results page show the search term which generated the results. It's a simple but useful way to remind someone what they just searched for -- especially in the case of zero results. Use [[Function_Reference/the_search_query|<tt>the_search_query()</tt>]] or [[Function_Reference/get_search_query|<tt>get_search_query()</tt>]] (display or return the value, respectively). For example: <pre><h2><?php printf( __( 'Search Results for: %s' ), '<span>' . get_search_query() . '</span>'); ?></h2></pre>
* It's a good practice to include the search form again on the results page. Include it with: [[Function_Reference/get_search_form|<tt>get_search_form()</tt>]].

=== JavaScript ===

* JavaScript code should be placed in external files whenever possible.
* Use [[Function_Reference/wp_enqueue_script|<tt>wp_enqueue_script()</tt>]] to load your scripts.
* JavaScript loaded directly into HTML documents (template files) should be CDATA encoded to prevent errors in older browsers.
<pre>
<script type="text/javascript">
/* <![CDATA[ */
// content of your Javascript goes here
/* ]]> */
</script>
</pre>

=== Screenshot ===

Create a screenshot for your theme. The screenshot should be named ''screenshot.png'', and should be placed in the top level directory. The screenshot should accurately show the theme design and saved in PNG format. The recommended image size is 600x450. The screenshot will only be shown as 300x225, but the double-sized image allows for high-resolution viewing on HiDPI displays.

=== Theme Options ===

Themes can optionally support the [[Appearance Customize Screen|Customize Screen]]. For an example code, see [http://themeshaper.com/sample-theme-options/ A Sample WordPress Theme Options Page].

When enabling the availability of the Customize Screen for a user [[Roles and Capabilities#Roles|role]], use the "edit_theme_options" user capability instead of the "switch_themes" capability unless the user role actually should also be able to switch the themes. See more at [[Roles and Capabilities#Capabilities|Roles and Capabilities]] and [[Adding Administration Menus]].

If you are using the "edit_themes" capability anywhere in your Theme to gain the Adminstrator role access to the Customize Screen (or maybe some custom screens), be aware that since [[Version 3.0]], this capability is not assigned to the Adminstrator role by default in the case of WordPress [[Glossary#Multisite|Multisite]] installation. See [http://wordpress.org/support/topic/capability-manage_options-vs-edit_themes#post-1566844 the explanation]. In such a case, use the "edit_theme_options" capability instead if you want the Adminstrator to see the "Theme Options" menu. See the [[Roles and Capabilities#Additional_Admin_Capabilities|additional capabilities]] of Adminstrator role when using WordPress Multisite.

== Theme Testing Process ==

# Fix PHP and WordPress errors. Add the following debug setting to your <tt>wp-config.php</tt> file to see deprecated function calls and other WordPress-related errors: <tt>define('WP_DEBUG', true);</tt>. See [[WordPress_Deprecated_Functions_Hook|Deprecated Functions Hook]] for more information.
# Check template files against [[Theme_Development#Template_File_Checklist|Template File Checklist]] (see above).
# Do a run-through using the [[Theme Unit Test]].
# Validate HTML and CSS. See [[Validating a Website]].
# Check for JavaScript errors.
# Test in all your target browsers. For example, IE7, IE8, IE9, Safari, Chrome, Opera, and Firefox.
# Clean up any extraneous comments, debug settings, or TODO items.
# See [[Theme Review]] if you are publicly releasing the Theme by submitting it to the Themes Directory.

== Resources and References ==

=== Code Standards === 
* [[Know Your Sources]]
* [[WordPress Coding Standards]]
* [[CSS Coding Standards]]

=== Theme Design ===
* [[Site Design and Layout]]

=== CSS ===
* [[CSS]]
* [[CSS Shorthand]]
* [[CSS#WordPress_Generated_Classes|WordPress Generated Classes]]

=== Templates ===
* [[Stepping Into Templates]]
* [[Templates]]
* [[Template Hierarchy]]
* [[Template Tags]]
* [[The Loop]]
* [[Conditional Tags]]
* [[Function Reference]]
* [[I18n for WordPress Developers]]
* [[Data Validation]]

=== Functions listing ===
* [[Function Reference]]

=== Testing and QA ===
* [[Theme Unit Test]]
* [[Validating a Website]]
* [[CSS Fixing Browser Bugs]]
* [[CSS Troubleshooting]]
* [http://modern.ie/ modern.IE: for testing IE on different platforms with open-source tools]

=== Release & Promotion ===
* [[Theme Review|Theme Review Process]]

[[Category:es:Design and Layout]]
[[Category:es:WordPress Development]]
[[Category:es:UI Link]]

=== External Resources & Tutorials ===
* [http://www.chipbennett.net/2011/02/17/incorporating-the-settings-api-in-wordpress-themes/ Incorporating the Settings API in WordPress Themes]
* [http://theme.fm/2011/08/providing-typography-options-in-your-wordpress-themes-1576/ Providing Typography Options in Your WordPress Themes]
* [http://learnhtmlcode.com/ How To Build And Design A Website]
* [http://htmldog.com/ HTML Dog]