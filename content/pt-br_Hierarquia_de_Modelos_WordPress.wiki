{{Languages|
{{en|Template Hierarchy}}
{{fr|Hiérarchie de modeles}}
{{ja|テンプレート階層}}
{{ru|Иерархия шаблонов}}
{{pt-br|Hierarquia de Modelos WordPress}}
}}

== Introdução ==
Os modelos WordPress se encaixam como peças de um quebra-cabeça para gerar as páginas em seu site. Alguns modelos são usados em todas as páginas da web (como o cabeçalho e o rodapé e estilos, por exemplo), enquanto outros são usados somente em condições específicas.

Este artigo procura responder à seguinte pergunta:

<blockquote>''Qual arquivo de modelo (s) o WordPress usará  quando ele exibe um certo tipo de página?''</blockquote>

== O Modelo de hierarquia de arquivo ==

=== A idéia geral ===

O WordPress utiliza ''Query String'' - Informações contidas no interior de cada link em seu site - para decidir qual o modelo ou conjunto de modelos serão utilizados para exibir a página.

Primeiro, o WordPress partidas cadeia de consulta para todos os tipos de consulta - ou seja, ele decide que tipo de página (uma página de busca, uma página da categoria, a home page, etc) está sendo solicitado.

Os modelos são então escolhidos - e o conteúdo da página web é gerada - na ordem sugerida pela Hierarquia de Temas WordPress, dependendo de que modelos estão disponíveis num determinado Tema WordPress.

===Exemplos ===
Se o seu blog está em <nowiki>http://exemplo.com/wp/</nowiki> e um visitante clica em um link para uma página da categoria como <nowiki>http://exemplo.com/wp/category/carros/</nowiki>, WordPress procura por um arquivo de modelo no diretório do tema atual que corresponde ao ID da categoria. 

Se a categoria de identificação é 4, o WordPress procura por um arquivo de modelo <nowiki>category-4.php </nowiki>. Se estiver em falta, o WordPress  procura por um arquivo de modelo genérico, <nowiki>category.php </nowiki>. 

Se este arquivo não existe o WordPress procura por um arquivo de modelo genérico, <nowiki>archive.php</nowiki>. Se não exisitir, então ele procura pelo arquivo principal, <nowiki>index.php </nowiki>.

Se um visitante vai para sua homepage na <code> http://exemplo.com/wp/</code>, o WordPress primeiro determina se há uma Página estática. Se uma página estática foi definida, o WordPress exibe primeiro a página principal e depois esta página definida, de acordo com o modelo de hierarquia. 

Se uma página estática não foi definida, então o WordPress procura por um arquivo <nowiki> home.php</nowiki> e o usa para gerar a página solicitada. 

Se não há arquivo <nowiki>home.php </nowiki>, o WordPress procura por um arquivo chamado <nowiki>index.php</nowiki> no diretório do tema ativo, e usa esse modelo para gerar a página.

==Visão geral==

O seguinte diagrama mostra quais arquivos de modelo são chamados para gerar uma página do WordPress com base na Hierarquia de Temas WordPress.

{{Imagens|[[Image:Hierarquia de Arquivos de Tema WordPress.png|750px|thumb|Estrutura da Hierarquia de Temas WordPress]]}}

=== A Hierarquia de Modelos em detalhe ===

As seções seguintes descrevem a ordem na qual os arquivos de modelo são chamados pelo WordPress, para cada tipo de consulta.

====Página Inicial (Home)====
# <strong>home.php</strong>
# <strong>index.php</strong>

====Página Inicial (definida pelo usuário)====
# <strong>front-page.php</strong> - usado tanto para ''Seus posts mais recentes'' e ''Uma página estática'' configurado em Configurações &rarr; Leitura.
# Quando uma '''página''' será usada como Página Inicial, se configurado em Configurações &rarr; Leitura.
# Quando uma '''página de posts''' será usada como Página Inicial, se configurado em Configurações &rarr; Leitura.

==== Post único====

# '''single-{post_type}.php''' - Se há um tipo personalizado chamado ''livro'', o arquivo para mostrar um item só é chamado ''single-livro.php''.
# '''single.php'''
# '''index.php'''

====Página====
Ao ver uma [[pt-br:Glossário#Página|página]] fixa.
#'''modelo de página''' - Se a página tem um [[pt-br:Modelos de Páginas|modelo de página]] definido.
#'''page-{slug}.php''' - Se o slug da página é ''sobre-mim'', o WordPress vai procurar um arquivo chamado ''page-sobre-mim.php''
#'''page-{id}.php''' - Se a ID de tal página é 6, o WordPress procurará por ''page-6.php''
#'''page.php'''
#'''index.php'''

==== Categoria====
Quando se clica no link para uma categoria.
#'''category-{slug}.php''' - Se o [[pt-br:Glossário#Slug|slug]] de uma categoria for ''dicas'', então o WordPress procurará por ''category-dicas.php''
#category-{id}.php - Se o IDde uma categoria for ''12'', então o WordPress procuraráa por ''category-12.php''
#'''category.php'''
#'''archive.php'''
#'''index.php'''

==== Tag====
#'''tag-{slug}.php''' - Se o slug de uma tag for ''especies'', então o WordPress procurará por ''tag-especies.php''
#'''tag-{id}.php''' - Se ID de uma tag for 6, então o WordPress procurará por ''tag-6.php''
#'''tag.php'''
#'''archive.php'''
#'''index.php'''

====Taxonomias Personalizadas====
Mostra publicações que usam a taxonomia.

#'''taxonomy-{taxonomia}-{termo}.php''' - Se a taxonomia for ''genero'' e um termo dessa taxonomia for ''romance'', o WordPress procurará por ''taxonomy-genero-romance.php''. No caso de Formatos de Post, a taxonomia é 'post_format' e seus termos são 'post-format-{formato}. Exemplo: taxonomy-post_format-post-format-link.php
#'''taxonomy-{taxonomia}.php''' - Se a taxonomia for ''cor'', o WordPress procurará por taxonomy-cor.php. 
#'''taxonomy.php'''
#'''archive.php'''
#'''index.php'''

==== Tipos de Posts Personalizados ====

#'''single-{post_type}.php''' - Se o tipo do post for ''carros'', então o WordPress procurará por ''single-carros.php''
#'''single.php'''
#'''index.php'''

==== Autor====
#'''author-{nicename}.php''' - Se o "nicename" do autor for ''dianakc'', o WordPress procurará por ''author-dianakc.php''
#'''author-{id}.php''' - Se a ID de um autor for 10, o WordPress procurará por ''author-10.php''
#'''author.php'''
#'''archive.php'''
#'''index.php'''

====Datação ====
#'''date.php'''
#'''archive.php'''
#'''index.php'''

==== Resultados da Pesquisa====
# search.php 
# index.php 

==== Página 404 (Não Encontrado) ====
# 404.php 
# index.php 

==== Anexos====
#MIME_type.php - qualquer tipo MIME (image.php, video.php, audio.php, application.php ou qualquer outros). Para text/plain será:

#text.php
#plain.php
#text_plain.php 

Arquivos gerais (não importa o tipo de anexo):
#attachment.php
#single.php
#index.php 

Todas estas funções ficam no arquivo <tt>wp-includes/theme.php</tt>.
O modelo de hierarquia de funções estão localizados em <code>wp-includes/theme.php</code>.

{{Avançado}}

==Filtros de Hierarquia==

O sistema de modelos dos WordPress permite que você filtre a hierarquia. O filtro (localizado na função <code>get_query_template()</code>) usa este nome de filtro: "{$type}_template" onde $type é o nome do arquivo na hierarquia, sem a extensão de arquivo ''.php''.

Lista completa: 

*index_template
*404_template
*archive_template
* author_template
* category_template
* tag_template
* taxonomy_template
* date_template
* home_template
* front_page_template
* page_template
* paged_template
* search_template
* single_template
* text_template, plain_template, text_plain_template (all mime types)
* attachment_template
* comments_popup 

===Examplo de uso===

Um exemplo, observe a hieraquia de arquivod para autor:

* author-{nicename}.php
* author-{id}.php
* author.php 

Para criar <code>author-{role}.php</code> prevalecendo sobre author.php, podemos manipular a hierarquia padrão usando o hook 'author_template'. Em vez de requisitar /autor/usuário, usaremos <code>author-editor.php</code> para usuários na função editor, se o arquivo existir na pasta do tema, e assim para todas as funções de usuários existentes.

<pre>
function author_role_template( $templates='' )
{
	$author = get_queried_object();
	$role=$author->roles[0];
	
	if(!is_array($templates) && !empty($templates)) {
		$templates=locate_template(array("author-$role.php",$templates),false);
	} 
	elseif(empty($templates)) {
		$templates=locate_template("author-$role.php",false);
	}
	else {
		$new_template=locate_template(array("author-$role.php"));
		if(!empty($new_template)) array_unshift($templates,$new_template);
	}
	
	return $templates;
}
add_filter( 'author_template', 'author_role_template' );
</pre>

{{Codex-pt}}
{{DEFAULTSORT:H}}