{{Languages|
{{en|Data Validation}}
{{ja|Data Validation}}
{{ru|Валидация данных}}
{{zh-tw|資料驗證}}
}}

來自許多來源（使用者、第三方網站以及你自己的資料庫！...）的不可信資料都需要在輸入以及輸出時被驗證。

== 輸出淨化 ==
資料淨化的方法取決於資料的類型以及其所使用的內容。以下是某一些在 WordPress 裡的日常任務以及它們應該要如何被淨化。

小秘訣：最好盡可能到最後才做輸出驗證，在資料即將輸出時再做輸出驗證是最為理想的。這樣一來你將能隨時確保你的資料有被適當地驗證／跳脫過並且你也不需要記得該變數在之前是否已經被驗證過。

=== 整數 ===
; <tt>intval( $int )</tt> 或 <tt>(int) $int</tt>
:	如果該變數應該要是整數，那就把它轉型為整數。
; <tt>absint( $int )</tt> 
:	確保結果為非負數。

=== HTML/XML ===
Note that many types of XML documents (as opposed to HTML documents) understand only a few named character references: <code>apos, amp, gt, lt, quot</code>.  When outputting text to such an XML document, be sure to filter any text containing illegal named entities through WordPress's <code>[[Function Reference/ent2ncr|ent2ncr]]( $text )</code> function.

==== HTML/XML Fragments ====
; <code>[[Function Reference/wp_kses|wp_kses]]( (string) $fragment, (array) $allowed_html, (array) $protocols = null )</code>
:	KSES Strips Evil Scripts.  All untrusted HTML (post text, comment text, etc.) should be run through <code>wp_kses()</code>.
:
:	To avoid having to pass an array of allowed HTML tags, you can use <code>[[Function Reference/wp_kses_post|wp_kses_post]]( (string) $fragment )</code> for tags that are allowed in posts/pages or <code>[[Function Reference/wp_kses_data|wp_kses_data]]( (string) $fragment )</code> for the small list of tags allowed in comments.
:
:       Note that the kses system can be resource-intensive, and should therefore not be run as an output sanitization filter directly, but as a filter to data after it has been input and processed, before it is saved in the database. WordPress runs kses on the pre_comment_content filter, for example, to filter the HTML before saving the comment.
; <code>[[Function Reference/wp_rel_nofollow|wp_rel_nofollow]]( (string) $html )</code>
:	Adds a "rel='nofollow'" attribute to any <nowiki><a></nowiki> link.
:
; <code>[[Function Reference/wp_kses_allowed_html|wp_kses_allowed_html]]( (string) $context )</code>
:	Provides an array of allowed HTML tags for a given context. Allowed values are post | strip | data | entities or the name of a field filter such :       as pre_user_description.

==== Text Nodes ====
; <code>[[Function Reference/esc_html|esc_html]]( $text )</code> (since 2.8)
:	Encodes <tt>&lt; &gt; &amp; &quot; &#39;</tt> (less than, greater than, ampersand, double quote, single quote). Identical to <code>esc_attr</code>, except it applies the <code>esc_html</code> filter to the output.
; <code>[[Function Reference/esc_html_2|esc_html__]]</code> (since 2.8)
:	Translates and encodes
; <code>[[Function Reference/esc_html_e|esc_html_e]]</code> (since 2.8)
:	Translates, encodes, and echoes
; <code>[[Function Reference/esc_textarea|esc_textarea]]</code> (since 3.1)
:	Encodes text for use inside a textarea element.
; <code>[[Function Reference/sanitize_text_field|sanitize_text_field]]</code> (since 2.9.0)
:	Sanitize a string from user input or from the db.

==== 屬性節點 ====
; <code>[[Function Reference/esc_attr|esc_attr]]( $text )</code> (since 2.8)
: 將 <tt>< > & " '</tt> （小於、大於、& 符號、雙引號、單引號）編碼。<br>除了它會將 <code>attribute_escape</code> 過濾標籤套用到輸出以外 ，功能同 <code>esc_html</code>。
; <code>[[Function Reference/esc_attr_2|esc_attr__]]()</code>
:	轉譯並編碼
; <code>[[Function Reference/esc_attr_e|esc_attr_e]]()</code>
:	轉譯、編碼並回應

==== JavaScript ====
; <code>[[Function Reference/esc_js|esc_js]]( $text )</code> (since 2.8)

=== URLs ===
; <code>[[Function Reference/esc_url|esc_url]]( $url, (array) $protocols = null )</code> (since 2.8)
:	Always use <code>esc_url</code> when sanitizing URLs (in text nodes, attribute nodes or anywhere else).  Rejects URLs that do not have one of the provided whitelisted protocols (defaulting to <tt>http</tt>, <tt>https</tt>, <tt>ftp</tt>, <tt>ftps</tt>, <tt>mailto</tt>, <tt>news</tt>, <tt>irc</tt>, <tt>gopher</tt>, <tt>nntp</tt>, <tt>feed</tt>, and <tt>telnet</tt>), eliminates invalid characters, and removes dangerous characters. Replaces <code>clean_url()</code> which was deprecated in 3.0.
: This function encodes characters as HTML entities: use it when generating an (X)HTML or XML document. Encodes ampersands (<tt>&</tt>) and single quotes (<tt>'</tt>) as numeric entity references (<tt>&#038, &#039</tt>).
; <code>[[Function Reference/esc_url_raw|esc_url_raw]]( $url, (array) $protocols = null )</code> (since 2.8)
:	For inserting a URL in the database.  This function does not encode characters as HTML entities: use it when storing a URL or in other cases where you need the non-encoded URL.  This functionality can be replicated in the old <code>clean_url</code> function by setting <code>$context</code> to <code>db</code>.
; <code>[[Function Reference/urlencode|urlencode]]( $scalar )</code>
:	Encodes for use in URL (as a query parameter, for example)
; <code>[[Function Reference/urlencode_deep|urlencode_deep]]( $array )</code>
:	urlencodes all array elements.

=== 資料庫 ===
; <code>[[Class Reference/wpdb#INSERT rows|$wpdb->insert]]( $table, (array) $data )</code>
:	<code>$data</code> 變數應該要是尚未經過跳脫處理的（該函數會為你替它們跳脫特殊字元）。<br>陣列索引鍵為欄位，陣列索引值為值。
; <code>[[Class Reference/wpdb#UPDATE rows|$wpdb->update]]( $table, (array) $data, (array) $where )</code>
:	<code>$data</code> 變數應該要是尚未經過跳脫處理的。陣列索引鍵為欄位，陣列索引值為值。<br><code>$where</code> 變數應該要是尚未經過跳脫處理的。多個 <code>WHERE</code> 條件是以 <code>AND</code> 連接。
 $wpdb->update(
   'my_table',
   array( 'status' => $untrusted_status, 'title' => $untrusted_title ),
   array( 'id' => 123 )
 );
; <code>[[Class Reference/wpdb#Protect Queries Against SQL Injection Attacks|$wpdb->prepare]]( $format, (scalar) $value1, (scalar) $value2, ... )</code>
:	<code>$format</code> 變數是一個格式類似於 [http://php.net/sprintf sprintf()] 的字串，它只能解析 <code>%s</code>、<code>%d</code> 以及 <code>%f</code>，任何不是這些指令的變數都需要以單引號包起來。
 $wpdb->get_var( $wpdb->prepare(
   "SELECT something FROM table WHERE foo = %s and status = %d",
   $name, // an unescaped string (function will do the sanitization for you)
   $status // an untrusted integer (function will do the sanitization for you)
 ) );
; <code>[[Function Reference/esc_sql|esc_sql]]( $sql )</code>
:	Escapes a single string or string array for use in a SQL query.  Glorified <code>addslashes(). $wpdb->prepare</code> is generally preferred because it corrects a few common formatting errors.
; <code>$wpdb->escape( $text )</code>
:       Deprecated since [[Version 3.6|3.6]]. Use <tt>esc_sql()</tt> or <tt>$wpdb->prepare()</tt> instead.
; <code>$wpdb->escape_by_ref( &$text )</code>
:	No return value. Since the parameter is passed by reference, the text is directly modified, so no need to assign any returned value.
; <code>[[Class_Reference/wpdb/esc_like|$wpdb->esc_like]]( $text )</code>
:	Sanitizes <code>$text</code> for use in a LIKE expression of a SQL query.  Will still need to be SQL escaped (with one of the above functions).
; <code>[[Function Reference/like_escape|like_escape]]( $string )</code>
:       Deprecated since [[Version 4.0|4.0]]. Use <tt>$wpdb->esc_like()</tt> instead.

=== Filesystem ===
; <code>[[Function Reference/validate_file|validate_file]]( (string) $filename, (array) $allowed_files = "" )</code>
:	Used to prevent directory traversal attacks, or to test a filename against a whitelist. Returns <tt>0</tt> if <code>$filename</code> represents a valid relative path. After validating, you <em>must</em> treat <code>$filename</code> as a relative path (i.e. you must prepend it with an absolute path), since something like <tt>/etc/hosts</tt> will validate with this function. Returns an integer greater than zero if the given path contains <tt>..</tt>, <tt>./</tt>, or <tt>:</tt>, or is not in the <code>$allowed_files</code> whitelist. Be careful making boolean interpretations of the result, since <tt>false</tt> (0) indicates the filename has passed validation, whereas <tt>true</tt> (> 0) indicates failure.

=== HTTP Headers ===
Header splitting attacks are annoying since they are dependent on the HTTP client.  WordPress has little need to include user generated content in HTTP headers, but when it does, WordPress typically uses [[#Whitelist|whitelisting]] for most of its HTTP headers.

WordPress does use user generated content in HTTP Location headers, and provides sanitization for those.

; <code>[[Function Reference/wp_redirect|wp_redirect]]($location, $status = 302)</code>
:	A safe way to redirect to any URL.  Ensures the resulting HTTP Location header is legitimate.
; <code>[[Function Reference/wp_safe_redirect|wp_safe_redirect]]($location, $status = 302)</code>
:	Even safer.  Only allows redirects to whitelisted domains.

== Input Validation ==

Many of the functions above in [[#Output_Sanitization]] are useful for input validation.  In addition, WordPress uses the following functions.

=== Slugs ===
; <code>[[Function Reference/sanitize_title|sanitize_title]]( $title )</code>
: Used in post slugs, for example
; <code>[[Function Reference/sanitize_user|sanitize_user]]( $username, $strict = false )</code>
: Use <code>$strict</code> when creating a new user (though you should use the API for that).

=== HTML ===
; <code>[[Function Reference/balanceTags|balanceTags]]( $html )</code> or <code>[[Function Reference/force_balance_tags|force_balance_tags]]( $html )</code>
: Tries to make sure HTML tags are balanced so that valid XML is output.
; <code>[[Function Reference/tag_escape|tag_escape]]( $html_tag_name )</code>
: Sanitizes an HTML tag name (does not escape anything, despite the name of the function).
; <code>[[Function Reference/sanitize_html_class|sanitize_html_class]]( $class, $fallback )</code>
: Sanitizes a html classname to ensure it only contains valid characters. Strips the string down to A-Z,a-z,0-9,'-' if this results in an empty string then it will return the alternative value supplied.

=== Email ===
; <code>[[Function Reference/is_email|is_email]]( $email_address )</code>
: returns boolean false if invalid, or $email_address if valid

=== Arrays ===
; <code>array_map( 'absint', $array )</code>
: Ensures all elements are nonnegative integers.  Replace callback <tt>'absint'</tt> with whatever is appropriate for your data. <tt>array_map()</tt> is a core PHP function that runs array elements through an arbitrary callback function, in this example, <tt>absint()</tt>.

=== Other ===
Some other functions that may be useful to sanitize data input:

* [[Function_Reference/sanitize_email|sanitize_email()]]
* [[Function_Reference/sanitize_file_name|sanitize_file_name()]]
* [[Function_Reference/sanitize_html_class|sanitize_html_class()]]
* [[Function_Reference/sanitize_key|sanitize_key()]]
* [[Function_Reference/sanitize_mime_type|sanitize_mime_type()]]
* [[Function_Reference/sanitize_option|sanitize_option()]]
* [[Function_Reference/sanitize_sql_orderby|sanitize_sql_orderby()]]
* [[Function_Reference/sanitize_text_field|sanitize_text_field()]]
* [[Function_Reference/sanitize_title_for_query|sanitize_title_for_query()]]
* [[Function_Reference/sanitize_title_with_dashes|sanitize_title_with_dashes()]]
* [[Function_Reference/sanitize_user|sanitize_user()]]
* [[Function_Reference/sanitize_meta|sanitize_meta()]]
* [[Function_Reference/sanitize_term|sanitize_term()]]
* [[Function_Reference/sanitize_term_field|sanitize_term_field()]]

== Validation Philosophies ==
There are several different philosophies about how validation should be done.  Each is appropriate for different scenarios.

=== Whitelist ===
Accept data only from a finite list of known and trusted values.

When comparing untrusted data against the whitelist, it's important to make sure that strict type checking is used. Otherwise an attacker could craft input in a way that will pass the whitelist but still have a malicious effect.

==== Comparison Operator ====

<code><pre>
$untrusted_input = '1 malicious string';  // will evaluate to integer 1 during loose comparisons

if ( 1 === $untrusted_input ) {  // == would have evaluated to true, but === evaluates to false
	echo '<p>Valid data';
} else {
	wp_die( 'Invalid data' );
}
</pre></code>

==== in_array() ====

<code><pre>
$untrusted_input = '1 malicious string';  // will evaluate to integer 1 during loose comparisons
$safe_values     = array( 1, 5, 7 );

if ( in_array( $untrusted_input, $safe_values, true ) ) {  // `true` enables strict type checking
	echo '<p>Valid data';
} else {
	wp_die( 'Invalid data' );
}
</pre></code>

==== switch() ====

<code><pre>
$untrusted_input = '1 malicious string';  // will evaluate to integer 1 during loose comparisons

switch ( true ) {
	case 1 === $untrusted_input:  // do your own strict comparison instead of relying on switch()'s loose comparison
		echo '<p>Valid data';
		break;

	default:
		wp_die( 'Invalid data' );
}
</pre></code>

=== Blacklist ===
Reject data from finite list of known untrusted values.  This is very rarely a good idea.

=== Format Detection ===
Test to see if the data is of the correct format.  Only accept it if it is.
 if ( ! ctype_alnum( $data ) ) {
   wp_die( "Invalid format" );
 }
 
 if ( preg_match( "/[^0-9.-]/", $data ) ) {
   wp_die( "Invalid format" );
 }

=== Format Correction ===
Accept most any data, but remove or alter the dangerous pieces.
 $trusted_integer = (int) $untrusted_integer;
 $trusted_alpha = preg_replace( '/[^a-z]/i', "", $untrusted_alpha );
 $trusted_slug = sanitize_title( $untrusted_slug );

== Changelog ==
* [[Version 3.6|3.6]]: Deprecated <tt>$wpdb->escape()</tt> in favor of <tt>[[Function_Reference/esc_sql | esc_sql()]]</tt> and <tt>[[#Database|$wpdb->prepare()]]</tt>.
* [[Version 3.1|3.1]]: Introduced <code>[[Function_Reference/esc_textarea|esc_textarea]]</code>. ([http://core.trac.wordpress.org/ticket/15454 #15454])
* [[Version 3.0|3.0]]: Deprecated <code>[[#URLs|clean_url()]]</code> in favor of <code>esc_url()</code> and <code>esc_url_raw()</code>. ([http://core.trac.wordpress.org/ticket/12309 #12309])
* [[Version 2.8|2.8]]: Deprecated the following functions. (via [http://wpdevel.wordpress.com/tag/escaping/ WordPress Development Updates])
** <code>sanitize_url()</code> -> <code>esc_url_raw()</code>
** <code>wp_specialchars()</code> -> <code>esc_html()</code> (also: <code>esc_html__()</code> and <code>esc_html_e()</code>)
** <code>attribute_escape()</code> -> <code>esc_attr()</code> (also: <code>esc_attr__()</code> and <code>esc_attr_e()</code>)

== External Resources ==
* [http://wp.tutsplus.com/tutorials/creative-coding/data-sanitization-and-validation-with-wordpress/ Data Sanitization and Validation With WordPress] by Stephen Harris
* [http://wordpress.tv/2011/01/29/mark-jaquith-theme-plugin-security/ Theme and Plugin Security] by Mark Jaquith
* [http://groups.google.com/group/wp-hackers/browse_thread/thread/8f1466febb168935?pli=1 wp_specialchars() vs attribute_escape() ( now esc_attr() ) and quote entity-encoding].


[[Category:Security]]
[[Category:WordPress Development]]