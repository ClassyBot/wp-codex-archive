{{Languages|
{{en|Custom Fields}}
{{es|Using Custom Fields}}
{{nl|Custom Fields}}
{{ja|カスタムフィールドの使い方}}
{{mk|Посебни Полиња}}
{{pt-br|Campos Personalizados}}
}}
{{Comunidade WP-Brasil}}
{{Ajuda}}
{{Traduz}}
__TOC__

WordPress tem a capacidade de permitir aos autores atribuirem campos personalizados a uma postagem. Esta informação extra é conhecida como '''meta-dados'''. '''Meta-dados''' podem ser pequenas informações que se refere ao tempo da publicação por exemplo:

* '''Humor:''' Feliz
* '''Lendo:''' O Alienista
* '''Ouvindo:''' Samba de uma nota só
* '''Clima:''' Quente e úmido

Com algum código extra, é possível fazer ações mais complexas, como o uso de '''meta-dados''' para armazenar uma data de expiração para a postagem.

Os Meta-dados são compostos de uma '''chave''' e um '''valor'''. A '''Chave''' é o nome do elemento de meta-dados. E  '''Valor''' é a informação que vai aparecer na lista de meta-dados em cada postagem individual a que tal informação está associada.

'''Chaves''' podem ser usadas mais de uma vez na mesma postagem. Por exemplo, se você estava lendo dois livros diferentes (talvez um livro técnico de trabalho e uma ficção em casa), você pode criar uma Chave ''leitura'' e usá-la duas vezes no mesmo lugar, uma para cada livro.

Aqui está um exemplo de como a informação aparecerá em sua postagem:

{{Ex-Post|{{Ex-Title}}{{Ex-Data}}{{Ex-Content}}<br>'''Lendo:''' O Alienista<br>'''Ouvindo:''' Samba de uma nota só<br>{{Ex-Meta}}}}
==Uso==
Com base em nosso exemplo acima, vamos colocar isso em ação. Vamos adicionar dois campos personalizados, um chamado ''lendo'' e outro ''ouvindo''. As instruções a seguir irá demonstrar como adicionar essas informações a um post usando Campos Personalizados.

# Depois de ter escrito sua postagem, logo abaixo do campo de edição há uma caixa '''Campos Personalizados'''.
# Para criar um novo '''Campo Personalizado''' chamado <tt>lendo</tt>, digite o texto "lendo" (sem as aspas) no campo ''Chave''.
# O recém-criado campo, deve ter um valor, que no nosso caso é o nome do livro, em ''Valor'' escreva então <tt>O Alienista</tt>
# Clique no botão '''Adicionar Campo Personalizado''' para guardar esta informação para esse post.

Para adicionar a informação ''ouvindo'', repita os passos acima. O nome da ''Chave'' agora deve ser ''ouvindo'' e o ''Valor'' deve ser a tal música.

Você só cria ''Chaves'' uma vez só, ou seja, no próxima postagem que for adicionar tais informações, você só precisa escolher a ''Chave'' que criou e informar o novo ''Valor''.

==Mostrando Campos Personalizados==

Com um campo personalizado adicionado ao post, é hora de exibir seus campos para o mundo. Para exibir os campos personalizados para cada post, use o <tt>[[Template Tags/the meta | the_meta()]]</tt>. 

 <?php the_meta(); ?>

A marca deve ser colocada dentro do [[pt-br:O Loop|Loop]] para que funcione. Muitas pessoas adicionam a tag <tt>the_meta()</tt> como mostrado no exemplo, logo acima das informações da postagem. O código da página mostrará um HTML comum:

<pre>&lt;ul class='post-meta'&gt;
&lt;li&gt;&lt;span class='post-meta-key'&gt;Livro:&lt;/span&gt; O Alienista&lt;/li&gt;
&lt;li&gt;&lt;span class='post-meta-key'&gt;Ouvindo:&lt;/span&gt; Samba de uma nota só&lt;/li&gt;
&lt;/ul&gt;</pre>

A tag de modelo coloca automaticamente todo os meta-dados em uma classe [[pt-br:Glossário#CSS|CSS]] chamada <tt>post-meta</tt>. A '''Chave''' está em um <tt>span</tt> chamado <tt>post-meta-key</tt> então poderá estilizar seus dados na folha de estilos. Tudo é mostrado em uma lista comum.

Para personalizar a aparência da lista, adicone a formatação a sua folha de estilo. Por exemplo, vamos adicionar algum estilo ao nosso exemplo de cima. Os elementos da folha de estilo ficam assim:

<pre>.post-meta {font-variant: small-caps; color: blue; }
.post-meta-key {color: green; font-weight: bold; font-size: 110%; }</pre>

<div style="border:1px outset #f7f7f7; width:100%; padding:10px;background:#f7f7f7">
* <span style="font-size:110%; color:blue; font-weight:bold; font-variant: small-caps">Livro</span>: <span style="font-style:italic; color: green; font-variant: small-caps">O Alienista</span>
* <span style="font-size:110%; color:blue; font-weight:bold; font-variant: small-caps">Ouvindo</span>: <span style="font-style:italic; color: green; font-variant: small-caps">Samba de uma nota só</span>
</div>


Há ainda plugins variados no [http://wordpress.org/extend/plugins/ Repositória Oficial de Plugin] que permitem várias outras formatações e recursos.
{{Avançado}}

== Referência de Função ==
'''Nota:''' a documentação sobre estas funções ainda estão em inglês.
{| cellspacing="10" width="100%"
|- valign="top"
| width="50%" |

{| class="widefat"
|- style="background:#464646; color:#d7d7d7;"
! '''Add, Update, Delete'''
|-
|
* <tt>[[Function Reference/add post meta | add_post_meta()]]</tt>
* <tt>[[Function Reference/update_post_meta | update_post_meta()]]</tt>
* <tt>[[Function Reference/delete post meta | delete_post_meta()]]</tt>
|}

| width="50%" |

{| class="widefat"
|- style="background:#464646; color:#d7d7d7;"
! '''Get Custom Values/Keys'''
|-
|
* <tt>[[Function Reference/get post custom | get_post_custom()]]</tt>
* <tt>[[Function Reference/get post custom values | get_post_custom_values()]]</tt>
* <tt>[[Function Reference/get post custom keys | get_post_custom_keys()]]</tt> 
|}

|- valign="top"
| colspan="2" |

{| class="widefat"
|- style="background:#464646; color:#d7d7d7;"
! '''Template Tags'''
|-
|
* <tt>[[Template Tags/the meta | the_meta()]]</tt>
* <tt>[[Function Reference/get post meta | get_post_meta()]]</tt>
|}

|}

== Técnicas avançadas para Campos Personalizados ==

A seguir estão as técnicas mais avançadas para obtenção e personalização de meta-dados e Campos Personalizados.

=== Obtendo Campos Personalizados Específicos ===
Para buscar valores meta usar a função <tt>[[Template_Tags/the_meta|the_meta()</tt>]]:

  <pre><?php get_post_meta($post_id, $key, $single); ?></pre>

*<tt>$post_id</tt> o ID da postagem. Use <tt>$post->ID</tt> para obter o ID da postagem atual  dentro do escopo de <tt>$post variable</tt>. Ou <tt>[[Function_Reference/get_the_ID|get_the_ID()]]</tt> se for dentro do [[pt-br:O Loop|Loop]].
*<tt>$key</tt> ''nome'' do meta-valor que se quer obter.
*<tt>$single</tt> pode ser <tt>true</tt> ou <tt>false</tt>. Se definido como ''true'', então a função retornará um único resultado em '''string'''. Se ''false'', ou não definido, então a função retorna um '''array''' dos campos personalizados.

==== Detalhes de Implementação====
As informações meta da postagem são armazenadas em uma nova tabela, <tt>$wpdb->postmeta</tt>. Esta tabela possui quatro campos:

:'''<tt>meta_id</tt>''' - ID único para cada postagem.
:'''<tt>post_id</tt>''' - ID da postagem para este meta-dado.
:'''<tt>meta_key</tt>''' - Nome da chave.
:'''<tt>meta_value</tt>''' - Valor da chave.

Os valores desta tabela são puxados em um array multi-dimensional estruturado chamado de  <tt>$post_meta_cache</tt>, logo após o array <tt>$posts</tt> é buscado em <tt>wp-blog-header.php</tt>. Esta variável irá conter apenas os valores para a lista de posts buscados para a construção da página atual. A estrutura do array será algo parecido com isto:

 [
 	postid1 => [
 		key1 => [ val1, val2, ... ],
 		key2 => [ val1, val2, ... ],
 		...
 	],
 	postid2 => [
 		key1 => [ val1, val2, ... ],
 		key2 => [ val1, val2, ... ],
 		...
 	],
 	...
 ]

Então, se você quuiser buscar os valores "leitura" do post número 256, você usa esse código PHP:

 // Buscar uma array de valores:
 $readinglist = $post_meta_cache[256]['reading'];

'''Nota:''' Não se esqueça que <tt>$readinglist</tt> será um array, não um único valor.

===PostMeta Functions===

====Internal Functions====

These functions are intended for use inside [[The Loop]], and all return arrays.

;<tt>[[Function Reference/get post custom|get_post_custom()]]</tt>: Get all key/value data for the current post.
;<tt>[[Function Reference/get post custom keys|get_post_custom_keys()]]</tt>: Get a list of all key names for the current post.
;<tt>[[Function Reference/get post custom values|get_post_custom_values($key)]]</tt>: Get the list of values for a particular key on the current post.
;<tt>[[Function Reference/get post meta|get_post_meta($post_id, $key, $single = false)]]</tt>: In WP 1.5 and beyond, this function returns the meta information without cache problems. The function requires the post id, the key, and if <tt>$single</tt> is set to TRUE, it returns only the first result (NOT as an array) for PHP use.

<pre>This will output the resulting meta value (notice the addition of "echo"):
<?php $key="mykey"; echo get_post_meta($post->ID, $key, true); ?></pre>

====Template Functions====

At the time of this writing, there is only one template function.

;<tt>[[Template Tags/the_meta|the_meta()]]</tt>:Echoes an unordered list containing the current post's meta-data with a class for the UL as ''post-meta'' and the LI as ''post-meta-key''.

We expect that independent developers will come up with many interesting uses for post meta-data in the form of plugins. The <tt>the_meta()</tt> template function is just an extremely basic example.

==Links Externos==
*[http://www.escolawp.com/2008/07/como-utilizar-os-campos-personalizados-no-wordpress-custom-fields/  Como utilizar os campos personalizados no wordpress (custom fields)]
*[http://www.tudoparawordpress.com.br/dicas-wordpress/como-utilizar-campos-personalizados-em-seu-tema/ Como utilizar os Campos Personalizados em seu tema]

{{AjudaPainel}}
{{DEFAULTSORT:C}}