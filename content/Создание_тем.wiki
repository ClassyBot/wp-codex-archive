{{Languages|
{{bn|থিম ডেভলপমেন্ট}}
{{en|Theme Development}}
{{es|Desarrollo de Temas}}
{{ja|テーマの作成}}
{{ko|Theme Development}}
{{pt-br|Desenvolvimento de Temas}}
{{ru|Создание тем}}
{{th|Theme Development}}
{{uk|Створення тем}}
{{zh-cn|主题开发}}
{{zh-tw|主題開發}}
}}
{{ru:Stub}}

__TOC__
В этой статье вы узнаете, как создать свою собственную тему для WordPress. Если вы хотите узнать, как устанавливать и начать использовать темы, обратитесь к статье [[Использование тем]]. В данном руководстве рассматриваются технические аспекты написания кода для построения своей собственной темы, а не вопросы по активации и получению уже готовых тем.

Вы можете разрабатывать темы для себя лично или для [[Разработка тем для общественного пользования|общественного пользования]].
==Зачем нужны темы WordPress==

Темы WordPress состоят из файлов и стилей, которые вместе определяют внешний вид сайта. Они  могут сильно отличаться между собой, позволяя пользователям быстро изменить дизайн веб-сайта. Но зачем вам может понадобиться своя тема?

* Чтобы создать ваш собственный уникальный дизайн сайта.
* Чтобы воспользоваться [[Основы шаблонов|шаблонами]], [[Теги шаблонов|тегами шаблонов]] и [[Цикл WordPress|циклом WordPress]] для вывода различного содержимого и стиля страниц.
* Чтобы создать альтернативные шаблоны для специальных разделов сайта, например для  [[Шаблоны рубрик|страниц рубрик]] и результатов поискового запроса.
* Чтобы быстро переключаться между двумя разметками сайта, или с помощью [[Плагины|переключателя тем и стилей]] позволить пользователям изменять вид вашего сайта.
* Чтобы предоставить тему в общественный доступ и позволить другим насладиться вашим дизайном.

Тема WordPress также предоставляет некоторые преимущества.

* Она разделяет стили представления и [[Основы шаблонов|файлы шаблонов]] от системных файлов, позволяя производить обновления без сильных изменений внешнего вида сайта.
* Она позволяет настраивать специфические для данной темы параметры вывода.
* С помощью неё можно быстро сменить внешний вид сайта на основе WordPress.
* Благодаря ей, отпадает необходимость пользователю изучать CSS, HTML и PHP для того, чтобы сделать свой сайт привлекательным.

Но зачем вам создавать свою собственную тему? Вот в чём главный вопрос.

* Это возможность узнать больше о CSS, HTML/XHTML и PHP.
* Это возможность показать свои умения в CSS, HTML/XHTML и PHP.
* Это возможность творить.
* Это весело (по большей части).
* Если вы предоставили свою тему в [[Разработка тем для общественного пользования|общественный доступ]], то вы получите удовлетворение от того, что поделились и дали что-то взамен  [[Ваш вклад в WordPress|Сообществу WordPress]] (можете похвастаться!)

== Стандарты создания тем ==

При написании кода тем WordPress, придерживайтесь следующих стандартов:

* Используйте корректно структурированный, не содержащий ошибок PHP-код и валидный HTML-код (см. [[Стандарты кодирования WordPress]]).
* Используйте правильно составленный, валидный CSS-код (см. [[Стандарты кодирования CSS]]).
* Придерживайтесь рекомендаций по [[Дизайн_и_раскладка_блога|основам дизайна сайта]].

===Анатомия Темы===

Темы WordPress находятся в поддиректориях <tt>wp-content/themes/</tt>. Директория темы содержит таблицы стилей, [[Основы шаблонов|файлы шаблонов]], файл дополнительного функционала (<tt>functions.php</tt>) и картинки.  К примеру, тема под названием "test" вероятно будет расположена в директории <tt>wp-content/themes/test/</tt>.

По умолчанию WordPress содержит три темы, созданные командой разработчиков Wordpress: "Twenty Fifteen", "Twenty Sixteen" и "Twenty Seventeen".  Эти темы отличаются между собой и используют различные функции и теги для создания внешнего вида и страниц сайта. Внимательно изучите составляющие их файлы, чтобы лучше понять, как создать свою собственную тему.

Тема WordPress состоит из трёх основных типов файлов, в дополнение к изображениям. Первый - это таблица стилей под именем <tt>style.css</tt>, которая контролирует внешний вид страниц сайта. Второй предоставляет собой файл дополнительного функционала  (<tt>functions.php</tt>). Остальные файлы - это [[Введение в шаблоны|файлы шаблонов]], которые определяют, каким образом выводится информация из базы данных на веб-страницу. Давайте рассмотрим каждый тип по отдельности.

===Таблица стилей темы===

Помимо собственно таблицы стилей вашей темы, файл <tt>style.css</tt> '''''обязательно''''' должен содержать информацию о вашей теме в виде комментариев. '''''Каждая тема должна иметь свою собственную уникальную информацию''''' в комментариях заголовка, в обратном случае возникнут проблемы в [[Административные_панели|диалоге выбора темы]]. Создавая новую тему на основе уже существующей, в первую очередь измените комментарии заголовка.

Ниже приведен шаблон заголовка таблицы стилей (style sheet header) вашей темы <tt>Rose</tt>. Он должен находится в начале файла стилей <tt>style.css</tt>, в первых строках:  

<pre>/*   
Theme Name: Rose
Theme URI: домашняя-страница-темы
Description: краткое-описание-темы
Author: ваше-имя
Author URI: ваш-URI
Template: напишите-здесь-наименование-родительской-темы--необязательное-поле
Version: номер-версии--необязательное-поле
.
Развёрнутое описание темы/Лицензия-если-нужно.
.
*/</pre>

Простейшая тема включает в себя только файл <tt>style.css</tt> плюс изображения, если они необходимы. Для создания такой темы необходимо в строке заголовка <tt>Template:</tt> указать имя родительской темы. Например, если ваша тема "Rose" происходит (наследует) от темы "test", напишите в заголовке <tt>style.css</tt> следующую строку:
        
        <tt>Template: test</tt>

После добавления такой строки в заголовок <tt>style.css</tt> все шаблоны темы "test" будут наследоваться вашей темой "Rose", в которой ничего нет, кроме файла с таблицей стилей <tt>style.css</tt>, и возможно, рисунков. Эти файлы необходимо поместить в каталог <tt>wp-content/themes/Rose</tt>.

Начиная с WordPress 2.7 тема-потомок может содержать файлы-шаблоны, имена которых совпадают с именами шаблонов в родительской теме, в админ-панели можно выбрать эти шаблоны для использования, и они будут использоваться вместо родительских.

Комментарии в заголовке <tt>style.css</tt> нужны WordPress для идентификации темы и отображения её в  [[Administration_Panels|Administration Panel]] подменю [[Administration_Panels#Design_-_Change_the_Look_of_your_Blog|Design]] > [[Administration_Panels#Themes|Themes]] в качестве установленной темы, вместе с другими установленными темами.

'''Примечание''' : ''Когда вы определяете родительскую тему, в строке комментариев <tt>Template:</tt> , вы должны использовать имя каталога темы. Например, для использования темы "Default Wordpress Theme", не пишите'' 

        <tt>Template: WordPress Default</tt>

''а пишите'' 

        <tt>Template: default</tt>

''поскольку "default" - это имя каталога родительской темы.''

===Файл дополнительного функционала===

Тема может дополнительно использовать файл с необходимыми функциями для работы темы, он должен располагаться в каталоге темы и называться <tt>functions.php</tt>. Этот файл в основном работает подобно плагину, и если он присутствует в каталоге темы, которую вы используете, то он автоматически загружается во время инициализации WordPress. Это верно как для страниц админки, так и для остальных (внешних к админке) страниц. Предлагается следующее использование для этого файла:

* Определение функций, используемых в файлах шаблонов вашей темы;
* Настройки в админке вашей темы, которые предоставляют пользователям варианты настроек цветов, стилей или других аспектов вашей темы.

Темы, поставляемые с WordPress  и установленные из коробки, имеют файл <tt>functions.php</tt>, который определяет ряд функций и настроек в админке темы, поэтому вы можете использовать его в качестве модели. Файл functions.php в основном работает как плагин, раздел Кодекса [[Function_Reference]] - лучшее место, где можно получить более подробную информацию о том, как вы можете использовать этот файл.

===Файлы шаблонов темы===

[[Шаблоны]] - это PHP файлы, которые используются для генерации страниц или их частей, запрошенных посетителями блога. Давайте рассмотрим различные варианты шаблонов, которые можно использовать как часть темы.

WordPress позволяет определять отдельные шаблоны для различных потребностей и частей вашего блога, но вовсе не обязательно, чтобы все эти различные шаблоны вашего блога одновременно исполнялись для генерации страниц в полном составе. Шаблоны выбираются и используются для генерации страницы на основе [[Иерархия шаблонов|иерархии шаблонов]], в зависимости от того, какие шаблоны доступны в той или иной теме. Как разработчик темы, вы можете выбрать количество настроек, которые вы хотите реализовать с использованием шаблонов. Например, в крайнем случае, вы можете использовать только один файл шаблона, с именем <tt>index.php</tt> в качестве шаблона для всех страниц, создаваемых и отображаемых в блоге. Однако наиболее часто используют различные файлы шаблонов для генерации различного вида страниц, чтобы обеспечить максимальную гибкость настройки.

===='''Базовые шаблоны'''====

Минимальная тема WordPress состоит из двух файлов:

* <tt>style.css</tt>
* <tt>index.php</tt>

Оба этих файла помещают в папку темы. [[Основы шаблонов|Файл шаблона]] <tt>index.php</tt> является весьма гибким. Его можно использовать так, что в него добавлены все ссылки на заголовок, боковую панель, подвал, содержание, категории, архивы, поиск, страницы ошибок и другие необходимые веб-страницы, создаваемые пользователем на вашем сайте. В другом варианте построения темы разработайте для темы другие модульные файлы шаблонов, каждый из которых примет на себя часть функционала.

Если вы не добавите в тему свои собственные файлы шаблонов, WordPress будет использовать встроенные файлы шаблонов по умолчанию. Например, если у вас в теме нет файлов шаблонов: ни <tt>comments.php</tt>, ни <tt>comments-popup.php</tt>, то WordPress будет автоматически использовать стандартные <tt>wp-comments.php</tt> и <tt>wp-comments-popup.php</tt> файлы шаблонов, согласно  иерархии шаблонов [[Template Hierarchy]]. Эти шаблоны по умолчанию скорее всего не будут соответствовать стилям вашей темы, так что вам, вероятно, придётся разработать свои ​​собственные файлы шаблонов. 
Вот основные файлы, которые обычно используют для разделения вида страниц (и которые должны быть в каталоге темы):

* <tt>header.php</tt>
* <tt>sidebar.php</tt>
* <tt>footer.php</tt>
* <tt>comments.php</tt>
* <tt>comments-popup.php</tt>

Если вы разработали эти модульные файлы шаблонов, вы можете их добавить шаблон в <tt>index.php</tt> (главный файл-шаблон), и результат их работы появится на странице у пользователя. Чтобы включить или ''получить'' эти модули шаблонов там, где вы хотите, следуйте инструкциям.

* Для добавления шаблона <tt>header.php</tt> используйте <tt>[[Function Reference/get header|get_header()]]</tt> template tag.
* Для добавления шаблона <tt>sidebar.php</tt> используйте <tt>[[Function Reference/get sidebar|get_sidebar()]]</tt> template tag.
* Для добавления шаблона <tt>footer.php</tt> используйте the <tt>[[Function Reference/get footer|get_footer()]]</tt> template tag.

Вот пример ''включения'' шаблонов:

<pre>
<?php get_sidebar(); ?>

<?php get_footer(); ?>
</pre>

Более подробную информацию о том, как разрабатывать различные шаблоны и как они работают, как генерировать различную информацию в них, читайте в документации [[Templates]]

===='''Выбор шаблонов, основанный на запросах'''====

WordPress позволяет программисту использовать различные варианты для подключения шаблонов из набора [[Шаблоны|шаблонов]]: во-первых, с использованием иерархии шаблонов [[Template Hierarchy]], во-вторых - с использованием условных тегов [[Conditional Tags]] внутри цикла обработки [[The Loop]] файлов шаблона.

В первом случае, при использовании иерархии шаблонов [[Template Hierarchy]], необходимо создать специальные файлы шаблонов, которые будут автоматически использоваться в необходимый момент для создания страницы вместо базового шаблона <tt>index.php</tt>.  Например, если ваша тема содержит шаблон под названием <tt>category.php</tt> и пришёл запрос на страницу с категорией, шаблон <tt>category.php</tt> будет загружен вместо шаблона <tt>index.php</tt>. Если  файл <tt>category.php</tt> в теме отсутствует, будет загружен шаблон <tt>index.php</tt>, как обычно.

Вы можете определить шаблон для конкретной категории, например, добавив в тему 
файл шаблона <tt>category-6.php</tt>. Файл будет использован вместо <tt>index.php</tt> в том случае, когда ID категории будет равен 6. Чтобы узнать ID категории, зайдите в [[Administration_Panels#Manage_-_Change_your_content|Manage]] > [[Administration_Panels#Categories|Categories]], если у вас есть доступ администратора в WordPress version 2.3 или ниже.
 
Начиная с WordPress 2.5 столбец ID был удалён из панели администратора. Вы можете определить ID категории, кликнув 'Edit Category' и посмотрев в URL-е значение cat_ID. Например, конец URL:  

    '...categories.php?action=edit&cat_ID=3'

где '3' - и есть ID текущей категории. Более детально этот процесс рассмотрен в [[Category Templates]]

Если ваша тема должна уметь еще более подробно управлять шаблоном отображения, чем тот уровень контроля, который обеспечивает иерархия шаблонов [[Template Hierarchy]], вы можете использовать условные теги [[Conditional Tags]]. Условные теги в основном проверяют, если какое-либо особое состояние верно во время исполнения [[The_Loop_in_Action | WordPress Loop]], в таком случае вы можете загрузить определенный шаблон или отобразить некоторые варианты текста на странице в соответствии с этим состоянием.

Например, для создания различных стилей, в зависимости от номера категории, код может выглядеть следующим образом:

<pre><?php
if (is_category(9)) {
   // для постов 9 категории
   include(TEMPLATEPATH . '/single2.php');
} else {
   // для других постов
   include(TEMPLATEPATH . '/single1.php');
}
?></pre>

Или, используя объект запроса, тот же алгоритм можно реализовать по-другому:

<pre><?php
$post = $wp_query->post;
if ( $post->in_category('9') ) {
   include(TEMPLATEPATH . '/single2.php');
} else {
   include(TEMPLATEPATH . '/single1.php');
}
?></pre>

В любом случае, оба примера кода будут вызывать различные шаблоны, в зависимости от ID категории. Условные теги не ограничиваются категориями, см. статью [[Conditional Tags]], в ней рассмотрены все возможные варианты.

=== Иконки типов файлов ===

'''Эта возможность [http://trac.wordpress.org/ticket/6751 не работает в WordPress 2.5].'''

Wordpress использует иконки типов файлов ([[Using_Image_and_File_Attachments|attachment files]]) в вашем блоге и в интерфейсе Админ-панели, если эти иконки существуют в указанном месте.

Wordpress ищет эти файлы в каталоге <tt>images</tt> текущей темы.
(А в Wordpress 2.2, тема по умолчанию имеет только одну иконку, <tt>audio.jpg</tt>.)

Например, для отрисовки иконки типа [http://en.wikipedia.org/wiki/Internet_media_type MIME type] <tt>audio/mpeg</tt>, Wordpress будет искать файл иконки в указанном каталоге <tt>images</tt> текущей темы, он выбирает первый подходящий файл (см. описание функции <tt>[[Function_Reference/wp_mime_type_icon|wp_mime_type_icon]]</tt>):

# <var>my_theme</var>/images/audio.jpg
# <var>my_theme</var>/images/audio.gif
# <var>my_theme</var>/images/audio.png
# <var>my_theme</var>/images/mpeg.jpg
# <var>my_theme</var>/images/mpeg.gif
# <var>my_theme</var>/images/mpeg.png
# <var>my_theme</var>/images/audio_mpeg.jpg
# <var>my_theme</var>/images/audio_mpeg.gif
# <var>my_theme</var>/images/audio_mpeg.png

===Перечень стандартных файлов шаблонов темы===

Ниже приведен список стандартных файлов шаблонов, используемых WordPress. Конечно, ваша тема может содержать и другие файлы стилей, изображений или программ. Просто имейте в виду, что приведеные ниже имена файлов имеют особое значение для WordPress - см. шаблон иерархии [[Template Hierarchy]] для получения дополнительной информации.

;<tt>style.css</tt>: Главный файл таблицы стилей. Файл должен быть в теме '''обязательно''' и обязательно должен содержать описанные выше комментарии в заголовке файла.
;<tt>index.php</tt>: Главный файл шаблонов. Если вы в своей теме используете свои шаблоны, этот файл <tt>index.php</tt> обязателен.
;<tt>comments.php</tt>: Шаблон комментариев. Если его нет, используется файл <tt>comments.php</tt> из темы по умолчанию.
;<tt>comments-popup.php</tt>: Добавляет всплывающее меню для комментариев на JS. При отсутствии вызывается <tt>comments-popup.php</tt> из темы по умолчанию.
;<tt>home.php</tt>: Шаблон главной страницы блога.
;<tt>single.php</tt>: Шаблон страницы одиночного поста. Используется, когда запрошен конкретный пост. Для этого и других шаблонов по запросу используется <tt>index.php</tt>, если в вашей теме нет соответствующего файла шаблона.
;<tt>page.php</tt>: Шаблон отдельной страницы, используется для отображения запрошенной страницы [[Pages|Page]].  
;<tt>category.php</tt>: Шаблон категории [[Category Templates|category template]]. Используется при запросе категории.
;<tt>author.php</tt>: Шаблон автора блога [[Author Templates|author template]]. Используется при запросе автора блога.
;<tt>date.php</tt>: Шаблон вывода даты-времени. Используется при запросе даты и времени. Год, месяц, день месяца, час, минута, секунда.
;<tt>archive.php</tt>: Шаблон архива. Используется, когда запрошены категория, автор или дата. Учтите, что этот шаблон может быть переопределен шаблонами <tt>category.php</tt>, <tt>author.php</tt> и <tt>date.php</tt> для соответствующих типов запросов.
;<tt>search.php</tt>: Шаблон результатов поиска. Используется после выполнения поиска.
;<tt>404.php</tt>: Шаблон для сообщения об ошибке '''[[Creating_an_Error_404_Page|404 Not Found]]''' . Используется, когда WordPress не может найти сообщение или страницу, которая соответствует запросу.

Эти файлы имеют специальное значение в WordPress, поскольку они используются для замены <tt>index.php</tt>, когда они есть в каталоге темы, в соответствии с иерархией шаблонов [[Template Hierarchy]], и когда поступил соответствующий запрос; или же в соответствии с истинностью условных тегов [[Conditional Tags|Conditional Tag]], когда функция типа <tt>is_*();</tt> возвращает 'true'.

Например, если требуется отобразить единственный пост, функция <tt>[[Conditional Tags#A Single Post Page|is_single()]]</tt> возвращает 'true', и в каталоге активной темы есть файл шаблона <tt>single.php</tt> , этот шаблон используется для создания страницы.

===Ссылки на файлы из шаблона===

Тема WordPress по умолчанию представляет собой хороший пример техники (впервые описанной  Майклом Хелманном (Michael Heilemann) в [http://binarybonsai.com/kubrick/ Kubrick] в макете для WordPress 1.2), как запросы отображаются в шаблонах.

Следующий код <tt><?php bloginfo('template_directory'); ?></tt> вставляет URL шаблона в вывод шаблона.  Вы можете добавить любую дополнительную информацию для ссылок на файлы из вашей темы.

Следующий код <tt><?php bloginfo('stylesheet_directory'); ?></tt> добавляет URL каталога,
который содержит файлы стилей <tt>.css</tt> вашей темы, в вывод шаблона.  Вы можете добавить любую дополнительную информацию для ссылок на файлы вашей темы, особенно те, которые необходимы для таблиц стилей (чтобы этого избежать, используйте это вместо <tt><?php bloginfo('stylesheet_directory'); ?></tt>).

Константа TEMPLATEPATH содержит абсолютный путь к каталогу шаблонов текушей темы (без символа '/' в конце).

Обратите внимание, что URI, которые используются в таблице стилей, привязаны к каталогу, где находится файл таблицы стилей, а не к каталогу, где находится шаблон, использующий эти стили. Это устраняет необходимость добавления кода PHP в файл таблицы стилей для задания текущего каталога.  
Например, если вы в таблице стилей используете изображения из каталога <tt>images/</tt> своей темы, вы должны указать в CSS только относительный путь, например: 

<pre style="font-size: 0.9em">h1 { background-image: URL(images/my_background.jpg); }</pre>

Это хороший вариант использовать способ, описанный выше, для ссылки на файлы. В этом случае вам не понадобятся абсолютные пути в ваших шаблонах.

=== Определение пользовательских типов шаблонов ===

Для добавления своих собственных типов шаблонов, которые используются в определённых вами случаях, можно использовать систему плагинов WordPress. Это необходимо, если вы хотите сделать, например, различную вёрстку для различных случаев или свой шаблон комментариев и т.д.
Это расширение возможностей WordPress можно достичь при помощи перехвата события  <tt>template_redirect </tt>, см. [[Plugin API#Current Hooks For Actions|action hook]]. Более подробную информацию о создании плагинов можно найти по ссылке [[Plugin API]].

===Необходимые вызовы событий для совместимости===

При разработке темы желательно иметь в виду, что ваша тема должна быть настроена таким образом, что она может хорошо работать с любым плагином для WordPress, который вы или другой пользователь вашей темы захочет установить. Плагины расширяют функциональные возможности WordPress с помощью перехвата событий ("Action Hooks", см. [[Plugin API]] для получения дополнительной информации). Большинство событий происходит в ядре WordPress, так что вашей теме нет необходимости вызова перехваченных специальных событий для своей работы. Но некоторые перехваченные события всё же придётся вызывать, для того, чтобы устанавливаемые плагины корректно отображали информацию, непосредственно в заголовке (верхнем колонтитуле) и подвале (нижнем колонтитуле), в боковой панели, или в основном теле страницы. Вот список специальных тегов событий, которые необходимо вызывать в вашей теме для корректной работы любых плагинов:

; wp_head 
: Происходит при отображении [[Glossary#HTML|HTML]] кода элемента <tt>&lt;head&gt;</tt> в шаблоне <tt>header.php</tt>. Пример использования в плагине: добавление кода javascript. 

: Использование: <tt><nowiki><?php do_action('wp_head'); ?></nowiki></tt> 
:''-или-''&nbsp; <tt><nowiki><?php wp_head(); ?></nowiki></tt>

; wp_footer
: Происходит при отображении заголовка (верхнего колонтитула) "footer" темы в шаблоне <tt>footer.php</tt>. Пример использования в плагине: вставка кода PHP, который должен выполняться после всего, самым последним на странице.

: Использование: <tt><nowiki><?php do_action('wp_footer'); ?></nowiki></tt> 
:''-или-''&nbsp; <tt><nowiki><?php wp_footer(); ?></nowiki></tt>

; wp_meta 
: Событие обычно происходит при обработке тега <tt><nowiki><li>Meta</li></nowiki></tt> при отрисовке  меню или в меню боковой панели в шаблоне <tt>sidebar.php</tt>. Пример использования: включение круговой рекламы или облака тегов в боковую панель.

: Использование: <tt><nowiki><?php do_action('wp_meta'); ?></nowiki></tt> 
:''-или-''&nbsp; <tt><nowiki><?php wp_meta(); ?></nowiki></tt>

; comment_form 
: Происходит при отработке скриптов шаблонов <tt>comments.php</tt> и <tt>comments-popup.php</tt>, непосредственно перед закрытием тега формы комментариев (<code><nowiki></form></nowiki></code>). Пример использования: Показать предпросмотр только что добавленных комментариев.

: Использование: <tt><nowiki><?php do_action('comment_form', $post->ID); ?></nowiki></tt> 

Для реального примера, вы можете найти эти вызовы событий для плагинов в соответствующих шаблонах темы по умолчанию.

==Общие замечания для разработчиков тем==


Пожалуйста, четко представьте себе и опишите в вашей документации на тему (файл README, включенный в вашу тему, поможет многим пользователям обойти любые потенциальные камни преткновения):

#Укажите, для чего именно предназначена ваша тема и файлы шаблонов.
#Придерживайтесь соглашения о наименованиях в стандартной иерархии темы.
#Укажите недостатки вашей темы, если таковые имеются.
#Пишите простые и понятные комментарии [[Commenting_Code|comments]], особенно в сложных местах, в шаблонах и файлах стилей. Добавьте комментарии в местах, где вы изменили стандартное поведение шаблонов и стилей.
#Если у вас есть какие-либо специальные требования, которые могут включать пользовательские правила перезаписи или изменений или использование некоторых дополнительных, специальных шаблонов, изображений или других файлов, пожалуйста, чётко укажите шаги действий пользователя, которые он должен предпринять, чтобы получить вашу тему полноценно работающей.
#Попробуйте и протестируйте вашу тему в разных браузерах [[CSS_Fixing_Browser_Bugs|across browsers]], чтобы поймать хотя бы некоторые из проблем, с которыми пользователи могут столкнуться [[CSS_Troubleshooting|problems]].
#Укажите контактную информацию (веб-страницу или электронную почту), если возможно, для информационной поддержки и вопросов пользователей.

Найдите время, чтобы прочитать раздел "Проектирование Темы для общественного пользования" [[Designing Themes for Public Release]]. Это статья с хорошими советами по подготовке вашей темы для общественности.

==Ссылки и ресурсы==

Полный список ресурсов, касающихся тем и шаблонов доступен в статье [[Templates]]. 

[[Category:Russian Codex]]
[[Category:Design and Layout]]
[[Category:WordPress Development]]